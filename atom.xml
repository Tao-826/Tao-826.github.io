<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-11-06T03:56:44.889Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初识(十二)</title>
    <link href="http://example.com/2022/11/06/%E5%88%9D%E8%AF%86-%E5%8D%81%E4%BA%8C/"/>
    <id>http://example.com/2022/11/06/%E5%88%9D%E8%AF%86-%E5%8D%81%E4%BA%8C/</id>
    <published>2022-11-06T03:53:36.000Z</published>
    <updated>2022-11-06T03:56:44.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="uni-app"><a href="#uni-app" class="headerlink" title="uni-app"></a>uni-app</h2><h3 id="1-开发工具"><a href="#1-开发工具" class="headerlink" title="1. 开发工具"></a>1. 开发工具</h3><h4 id="1-1-安装-scss-x2F-sass-编译"><a href="#1-1-安装-scss-x2F-sass-编译" class="headerlink" title="1.1 安装 scss&#x2F;sass 编译"></a>1.1 安装 scss&#x2F;sass 编译</h4><p><a href="https://ext.dcloud.net.cn/plugin?name=compile-node-sass">https://ext.dcloud.net.cn/plugin?name=compile-node-sass</a></p><p>进入插件下载页面之后，点击使用 HBuilderX 导入插件 按钮进行自动安装</p><h4 id="1-2-快捷键方案切换"><a href="#1-2-快捷键方案切换" class="headerlink" title="1.2 快捷键方案切换"></a>1.2 快捷键方案切换</h4><p>操作步骤：工具 -&gt; 预设快捷键方案切换 -&gt; VS 代码</p><h4 id="1-3-修改编辑器的基本设置"><a href="#1-3-修改编辑器的基本设置" class="headerlink" title="1.3 修改编辑器的基本设置"></a>1.3 修改编辑器的基本设置</h4><p>操作步骤：工具 -&gt; 设置 -&gt; 打开 Settings.json 按需进行配置 </p><p><strong>源码视图</strong>下可用的参考配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;editor.colorScheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Default&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.fontSize&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.fontFamily&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Consolas&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.fontFmyCHS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;微软雅黑 Light&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.insertSpaces&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.lineHeight&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.minimap.enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.mouseWheelZoom&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.onlyHighlightWord&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.tabSize&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.wordWrap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;explorer.iconTheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vs-seti&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.codeassist.px2rem.enabel&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.codeassist.px2upx.enabel&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="1-4-目录结构"><a href="#1-4-目录结构" class="headerlink" title="1.4 目录结构"></a>1.4 目录结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">┌─components            uni-app组件目录</span><br><span class="line">│  └─comp-a.vue         可复用的a组件</span><br><span class="line">├─pages                 业务页面文件存放的目录</span><br><span class="line">│  ├─index</span><br><span class="line">│  │  └─index.vue       index页面</span><br><span class="line">│  └─list</span><br><span class="line">│     └─list.vue        list页面</span><br><span class="line">├─static                存放应用引用静态资源（如图片、视频等）的目录，注意：静态资源只能存放于此</span><br><span class="line">├─main.js               Vue初始化入口文件</span><br><span class="line">├─App.vue               应用配置，用来配置小程序的全局样式、生命周期函数等</span><br><span class="line">├─manifest.json         配置应用名称、appid、logo、版本等打包信息</span><br><span class="line">└─pages.json            配置页面路径、页面窗口样式、tabBar、navigationBar 等页面类信息</span><br></pre></td></tr></table></figure><h4 id="1-5-把项目运行到微信开发者工具"><a href="#1-5-把项目运行到微信开发者工具" class="headerlink" title="1.5 把项目运行到微信开发者工具"></a>1.5 把项目运行到微信开发者工具</h4><p>在 manifestjson -&gt;微信小程序配置 -&gt; 填写自己的微信小程序的 AppID</p><p>在 HBuilderX 中 -&gt;工具 -&gt;设置 -&gt;运行配置 -&gt;配置“微信开发者工具”的<strong>安装路径</strong></p><p>在微信开发者工具中，通过 面板，开启”微信开发者工具”的<strong>服务端口</strong></p><p>在 HBuilderX 中，点击菜单栏中的 ，将当前 uni-app 项目编译之后，自动运行到微信开发者工具中，从而方便查看项目效果与调试，运行 -&gt; 运行到小程序模拟器 -&gt; 微信开发者工具</p><h4 id="1-6-使用-Git-管理项目"><a href="#1-6-使用-Git-管理项目" class="headerlink" title="1.6  使用 Git 管理项目"></a>1.6  使用 Git 管理项目</h4><p>1.在项目根目录中新建 忽略文件，并配置如下：<code>.gitignore</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 忽略 node_modules 目录</span><br><span class="line">/node_modules</span><br><span class="line">/unpackage/dist</span><br></pre></td></tr></table></figure><p>为了让 Git 能够正常追踪 unpackage 目录，按照惯例，我们可以在 unpackage 目录下创建一个叫做 的文件进行占位<code>.gitkeep</code></p><p>2.打开终端，切换到项目根目录中，运行如下的命令，初始化本地 Git 仓库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>3.将所有文件都加入到暂存区：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>4.本地提交更新：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;init project&quot;</span><br></pre></td></tr></table></figure><h3 id="2-标签栏"><a href="#2-标签栏" class="headerlink" title="2. 标签栏"></a>2. 标签栏</h3><h4 id="2-1-创建-tabBar-分支"><a href="#2-1-创建-tabBar-分支" class="headerlink" title="2.1 创建 tabBar 分支"></a>2.1 创建 tabBar 分支</h4><p>运行如下的命令，基于 master 分支在本地创建 tabBar 子分支，用来开发和 tabBar 相关的功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 创建分支</span><br><span class="line">git checkout -b tabbar</span><br><span class="line">// 查看分支</span><br><span class="line">git branch</span><br></pre></td></tr></table></figure><h4 id="2-2-创建-选项卡栏-页面"><a href="#2-2-创建-选项卡栏-页面" class="headerlink" title="2.2 创建 选项卡栏 页面"></a>2.2 创建 选项卡栏 页面</h4><p>在 目录中，创建首页（home）、分类（cate）、购物车（cart）、我的（my） 这 4 个 tabBar 页面。在 HBuilderX 中，可以通过如下的两个步骤，快速新建页面：<code>pages</code></p><ol><li>在 目录上鼠标右键，选择<strong>新建页面</strong><code>pages</code></li><li>在弹出的窗口中，填写<strong>页面的名称</strong>、<strong>勾选 scss 模板</strong>之后，点击创建按钮。</li></ol><h4 id="2-3-配置-tabBar-效果"><a href="#2-3-配置-tabBar-效果" class="headerlink" title="2.3 配置 tabBar 效果"></a>2.3 配置 tabBar 效果</h4><p>修改项目根目录中的 <code>pages.json</code> 配置文件，新增 <code>tabBar</code> 的配置节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;tabBar&quot;: &#123;</span><br><span class="line">    &quot;selectedColor&quot;: &quot;#C00000&quot;,</span><br><span class="line">    &quot;list&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;pagePath&quot;: &quot;pages/home/home&quot;,</span><br><span class="line">        &quot;text&quot;: &quot;首页&quot;,</span><br><span class="line">        &quot;iconPath&quot;: &quot;static/tab_icons/home.png&quot;,</span><br><span class="line">        &quot;selectedIconPath&quot;: &quot;static/tab_icons/home-active.png&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;pagePath&quot;: &quot;pages/cate/cate&quot;,</span><br><span class="line">        &quot;text&quot;: &quot;分类&quot;,</span><br><span class="line">        &quot;iconPath&quot;: &quot;static/tab_icons/cate.png&quot;,</span><br><span class="line">        &quot;selectedIconPath&quot;: &quot;static/tab_icons/cate-active.png&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;pagePath&quot;: &quot;pages/cart/cart&quot;,</span><br><span class="line">        &quot;text&quot;: &quot;购物车&quot;,</span><br><span class="line">        &quot;iconPath&quot;: &quot;static/tab_icons/cart.png&quot;,</span><br><span class="line">        &quot;selectedIconPath&quot;: &quot;static/tab_icons/cart-active.png&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;pagePath&quot;: &quot;pages/my/my&quot;,</span><br><span class="line">        &quot;text&quot;: &quot;我的&quot;,</span><br><span class="line">        &quot;iconPath&quot;: &quot;static/tab_icons/my.png&quot;,</span><br><span class="line">        &quot;selectedIconPath&quot;: &quot;static/tab_icons/my-active.png&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-删除默认的-index-首页"><a href="#2-4-删除默认的-index-首页" class="headerlink" title="2.4 删除默认的 index 首页"></a>2.4 删除默认的 index 首页</h4><ol><li>在 HBuilderX 中，把 <code>pages</code> 目录下的 <code>index首页文件夹</code> 删除掉</li><li>同时，把 <code>page.json</code> 中记录的 <code>index 首页</code> 路径删除掉</li><li>为了防止小程序运行失败，在微信开发者工具中，手动删除 <code>pages</code> 目录下的 <code>index 首页文件夹</code></li><li>同时，把 <code>components</code> 目录下的 <code>uni-link 组件文件夹</code> 删除掉</li></ol><h4 id="2-5-修改导航条的样式效果"><a href="#2-5-修改导航条的样式效果" class="headerlink" title="2.5 修改导航条的样式效果"></a>2.5 修改导航条的样式效果</h4><ol><li><p>打开 <code>pages.json</code> 这个全局的配置文件</p></li><li><p>修改 <code>globalStyle</code> 节点如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;globalStyle&quot;: &#123;</span><br><span class="line">    &quot;navigationBarTextStyle&quot;: &quot;white&quot;,</span><br><span class="line">    &quot;navigationBarTitleText&quot;: &quot;黑马优购&quot;,</span><br><span class="line">    &quot;navigationBarBackgroundColor&quot;: &quot;#C00000&quot;,</span><br><span class="line">    &quot;backgroundColor&quot;: &quot;#FFFFFF&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-6-分支的提交与合并"><a href="#2-6-分支的提交与合并" class="headerlink" title="2.6 分支的提交与合并"></a>2.6 分支的提交与合并</h4><ol><li>将本地的 tabbar 分支进行本地的 commit 提交：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;完成了 tabBar 的开发&quot;</span><br></pre></td></tr></table></figure><ol><li>将本地的 tabbar 分支推送到远程仓库进行保存：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin tabbar</span><br></pre></td></tr></table></figure><ol><li>将本地的 tabbar 分支合并到本地的 master 分支：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge tabbar</span><br></pre></td></tr></table></figure><ol><li>删除本地的 tabbar 分支：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d tabbar</span><br></pre></td></tr></table></figure><h3 id="3-首页"><a href="#3-首页" class="headerlink" title="3. 首页"></a>3. 首页</h3><h4 id="3-0-创建-home-分支"><a href="#3-0-创建-home-分支" class="headerlink" title="3.0 创建 home 分支"></a>3.0 创建 home 分支</h4><p>运行如下的命令，基于 master 分支在本地创建 home 子分支，用来开发和 home 首页相关的功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b home</span><br></pre></td></tr></table></figure><h4 id="3-1-配置网络请求"><a href="#3-1-配置网络请求" class="headerlink" title="3.1 配置网络请求"></a>3.1 配置网络请求</h4><p>由于平台的限制，小程序项目中<strong>不支持 axios</strong>，而且原生的 <code>wx.request()</code> API 功能较为简单，<strong>不支持拦截器</strong>等全局定制的功能。因此，建议在 uni-app 项目中使用 <code>@escook/request-miniprogram</code> 第三方包发起网络数据请求。</p><blockquote><p>请参考 <strong>@escook&#x2F;request-miniprogram</strong> 的官方文档进行安装、配置、使用</p></blockquote><blockquote><p>官方文档：<a href="https://www.npmjs.com/package/@escook/request-miniprogram">https://www.npmjs.com/package/@escook/request-miniprogram</a></p></blockquote><p>最终，在项目的 <code>main.js</code> 入口文件中，通过如下的方式进行配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import &#123; $http &#125; from &#x27;@escook/request-miniprogram&#x27;</span><br><span class="line"></span><br><span class="line">uni.$http = $http</span><br><span class="line">// 配置请求根路径</span><br><span class="line">$http.baseUrl = &#x27;https://www.uinav.com&#x27;</span><br><span class="line"></span><br><span class="line">// 请求开始之前做一些事情</span><br><span class="line">$http.beforeRequest = function (options) &#123;</span><br><span class="line">  uni.showLoading(&#123;</span><br><span class="line">    title: &#x27;数据加载中...&#x27;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 请求完成之后做一些事情</span><br><span class="line">$http.afterRequest = function () &#123;</span><br><span class="line">  uni.hideLoading()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-轮播图区域"><a href="#3-2-轮播图区域" class="headerlink" title="3.2 轮播图区域"></a>3.2 轮播图区域</h4><h5 id="3-2-1-请求轮播图的数据"><a href="#3-2-1-请求轮播图的数据" class="headerlink" title="3.2.1 请求轮播图的数据"></a>3.2.1 请求轮播图的数据</h5><p>实现步骤：</p><ol><li>在 data 中定义轮播图的数组</li><li>在 onLoad 生命周期函数中调用获取轮播图数据的方法</li><li>在 methods 中定义获取轮播图数据的方法</li></ol><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      // 1. 轮播图的数据列表，默认为空数组</span><br><span class="line">      swiperList: [],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad() &#123;</span><br><span class="line">    // 2. 在小程序页面刚加载的时候，调用获取轮播图数据的方法</span><br><span class="line">    this.getSwiperList()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 3. 获取轮播图数据的方法</span><br><span class="line">    async getSwiperList() &#123;</span><br><span class="line">      // 3.1 发起请求</span><br><span class="line">      const &#123; data: res &#125; = await uni.$http.get(&#x27;/api/public/v1/home/swiperdata&#x27;)</span><br><span class="line">      // 3.2 请求失败</span><br><span class="line">      if (res.meta.status !== 200) &#123;</span><br><span class="line">        return uni.showToast(&#123;</span><br><span class="line">          title: &#x27;数据请求失败！&#x27;,</span><br><span class="line">          duration: 1500,</span><br><span class="line">          icon: &#x27;none&#x27;,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      // 3.3 请求成功，为 data 中的数据赋值</span><br><span class="line">      this.swiperList = res.message</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-2-渲染轮播图的-UI-结构"><a href="#3-2-2-渲染轮播图的-UI-结构" class="headerlink" title="3.2.2 渲染轮播图的 UI 结构"></a>3.2.2 渲染轮播图的 UI 结构</h5><ol><li><p>渲染 UI 结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    &lt;!-- 轮播图区域 --&gt;</span><br><span class="line">    &lt;swiper :indicator-dots=&quot;true&quot; :autoplay=&quot;true&quot; :interval=&quot;3000&quot; :duration=&quot;1000&quot; :circular=&quot;true&quot;&gt;</span><br><span class="line">      &lt;!-- 循环渲染轮播图的 item 项 --&gt;</span><br><span class="line">      &lt;swiper-item v-for=&quot;(item, i) in swiperList&quot; :key=&quot;i&quot;&gt;</span><br><span class="line">        &lt;view class=&quot;swiper-item&quot;&gt;</span><br><span class="line">          &lt;!-- 动态绑定图片的 src 属性 --&gt;</span><br><span class="line">          &lt;image :src=&quot;item.image_src&quot;&gt;&lt;/image&gt;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">      &lt;/swiper-item&gt;</span><br><span class="line">    &lt;/swiper&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>美化 UI 结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">swiper &#123;</span><br><span class="line"> height: 330rpx;</span><br><span class="line"></span><br><span class="line"> .swiper-item,</span><br><span class="line"> image &#123;</span><br><span class="line">   width: 100%;</span><br><span class="line">   height: 100%;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><h5 id="3-2-3-配置小程序分包"><a href="#3-2-3-配置小程序分包" class="headerlink" title="3.2.3 配置小程序分包"></a>3.2.3 配置小程序分包</h5><blockquote><p>分包可以减少小程序首次启动时的加载时间</p></blockquote><p>为此，我们在项目中，把 tabBar 相关的 4 个页面放到主包中，其它页面（例如：商品详情页、商品列表页）放到分包中。在 uni-app 项目中，配置分包的步骤如下：</p><ol><li><p>在项目根目录中，创建分包的根目录，命名为 <code>subpkg</code></p></li><li><p>在 <code>pages.json</code> 中，和 <code>pages</code> 节点平级的位置声明 <code>subPackages</code> 节点，用来定义分包相关的结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;pages&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;path&quot;: &quot;pages/home/home&quot;,</span><br><span class="line">      &quot;style&quot;: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;path&quot;: &quot;pages/cate/cate&quot;,</span><br><span class="line">      &quot;style&quot;: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;path&quot;: &quot;pages/cart/cart&quot;,</span><br><span class="line">      &quot;style&quot;: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;path&quot;: &quot;pages/my/my&quot;,</span><br><span class="line">      &quot;style&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;subPackages&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;root&quot;: &quot;subpkg&quot;,</span><br><span class="line">      &quot;pages&quot;: []</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 <code>subpkg</code> 目录上鼠标右键，点击 <code>新建页面</code> 选项，并填写页面的相关信息：</p><p><img src="https://www.escook.cn/docs-uni-shop/assets/img/2-2.e5e761c8.png" alt="img"></p></li></ol><h5 id="3-2-4-点击轮播图跳转到商品详情页面"><a href="#3-2-4-点击轮播图跳转到商品详情页面" class="headerlink" title="3.2.4 点击轮播图跳转到商品详情页面"></a>3.2.4 点击轮播图跳转到商品详情页面</h5><p>将 &#96;&#96; 节点内的 <code>view</code> 组件，改造为 <code>navigator</code> 导航组件，并动态绑定 <code>url 属性</code> 的值。</p><ol><li><p>改造之前的 UI 结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;swiper-item v-for=&quot;(item, i) in swiperList&quot; :key=&quot;i&quot;&gt;</span><br><span class="line">  &lt;view class=&quot;swiper-item&quot;&gt;</span><br><span class="line">    &lt;!-- 动态绑定图片的 src 属性 --&gt;</span><br><span class="line">    &lt;image :src=&quot;item.image_src&quot;&gt;&lt;/image&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/swiper-item&gt;</span><br></pre></td></tr></table></figure></li><li><p>改造之后的 UI 结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;swiper-item v-for=&quot;(item, i) in swiperList&quot; :key=&quot;i&quot;&gt;</span><br><span class="line">    &lt;navigator class=&quot;swiper-item&quot; :url=&quot;&#x27;/subpkg/goods_detail/goods_detail?goods_id=&#x27; + item.goods_id&quot;&gt;</span><br><span class="line">      &lt;!-- 动态绑定图片的 src 属性 --&gt;</span><br><span class="line">      &lt;image :src=&quot;item.image_src&quot;&gt;&lt;/image&gt;</span><br><span class="line">    &lt;/navigator&gt;</span><br><span class="line">&lt;/swiper-item&gt;</span><br></pre></td></tr></table></figure></li></ol><h5 id="3-2-5-封装-uni-showMsg-方法"><a href="#3-2-5-封装-uni-showMsg-方法" class="headerlink" title="3.2.5 封装 uni.$showMsg() 方法"></a>3.2.5 封装 uni.$showMsg() 方法</h5><p>当数据请求失败之后，经常需要调用 <code>uni.showToast(&#123; /* 配置对象 */ &#125;)</code> 方法来提示用户。此时，可以在全局封装一个 <code>uni.$showMsg()</code> 方法，来简化 <code>uni.showToast()</code> 方法的调用。具体的改造步骤如下：</p><ol><li><p>在 <code>main.js</code> 中，为 <code>uni</code> 对象挂载自定义的 <code>$showMsg()</code> 方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 封装的展示消息提示的方法</span><br><span class="line">uni.$showMsg = function (title = &#x27;数据加载失败！&#x27;, duration = 1500) &#123;</span><br><span class="line">  uni.showToast(&#123;</span><br><span class="line">    title,</span><br><span class="line">    duration,</span><br><span class="line">    icon: &#x27;none&#x27;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>今后，在需要提示消息的时候，直接调用 <code>uni.$showMsg()</code> 方法即可：</p><p>​</p><p>​</p><p>​</p><p>​</p><p>​</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">async getSwiperList() &#123;</span><br><span class="line">   const &#123; data: res &#125; = await uni.$http.get(&#x27;/api/public/v1/home/swiperdata&#x27;)</span><br><span class="line">   if (res.meta.status !== 200) return uni.$showMsg()</span><br><span class="line">   this.swiperList = res.message</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-分类导航区域"><a href="#3-3-分类导航区域" class="headerlink" title="3.3 分类导航区域"></a>3.3 分类导航区域</h4><h5 id="3-3-1-获取分类导航的数据"><a href="#3-3-1-获取分类导航的数据" class="headerlink" title="3.3.1 获取分类导航的数据"></a>3.3.1 获取分类导航的数据</h5><p>实现思路：</p><ol><li>定义 data 数据</li><li>在 onLoad 中调用获取数据的方法</li><li>在 methods 中定义获取数据的方法</li></ol><p>示例代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      // 1. 分类导航的数据列表</span><br><span class="line">      navList: [],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad() &#123;</span><br><span class="line">    // 2. 在 onLoad 中调用获取数据的方法</span><br><span class="line">    this.getNavList()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 3. 在 methods 中定义获取数据的方法</span><br><span class="line">    async getNavList() &#123;</span><br><span class="line">      const &#123; data: res &#125; = await uni.$http.get(&#x27;/api/public/v1/home/catitems&#x27;)</span><br><span class="line">      if (res.meta.status !== 200) return uni.$showMsg()</span><br><span class="line">      this.navList = res.message</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-3-2-渲染分类导航的-UI-结构"><a href="#3-3-2-渲染分类导航的-UI-结构" class="headerlink" title="3.3.2 渲染分类导航的 UI 结构"></a>3.3.2 渲染分类导航的 UI 结构</h5><ol><li><p>定义如下的 UI 结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 分类导航区域 --&gt;</span><br><span class="line">&lt;view class=&quot;nav-list&quot;&gt;</span><br><span class="line">   &lt;view class=&quot;nav-item&quot; v-for=&quot;(item, i) in navList&quot; :key=&quot;i&quot;&gt;</span><br><span class="line">     &lt;image :src=&quot;item.image_src&quot; class=&quot;nav-img&quot;&gt;&lt;/image&gt;</span><br><span class="line">   &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></li><li><p>通过如下的样式美化页面结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.nav-list &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-around;</span><br><span class="line">  margin: 15px 0;</span><br><span class="line"></span><br><span class="line">  .nav-img &#123;</span><br><span class="line">    width: 128rpx;</span><br><span class="line">    height: 140rpx;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="3-3-2-点击第一项，切换到分类页面"><a href="#3-3-2-点击第一项，切换到分类页面" class="headerlink" title="3.3.2 点击第一项，切换到分类页面"></a>3.3.2 点击第一项，切换到分类页面</h5><ol><li><p>为 <code>nav-item</code> 绑定点击事件处理函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 分类导航区域 --&gt;</span><br><span class="line">&lt;view class=&quot;nav-list&quot;&gt;</span><br><span class="line">  &lt;view class=&quot;nav-item&quot; v-for=&quot;(item, i) in navList&quot; :key=&quot;i&quot; @click=&quot;navClickHandler(item)&quot;&gt;</span><br><span class="line">    &lt;image :src=&quot;item.image_src&quot; class=&quot;nav-img&quot;&gt;&lt;/image&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></li><li><p>定义 <code>navClickHandler</code> 事件处理函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// nav-item 项被点击时候的事件处理函数</span><br><span class="line">navClickHandler(item) &#123;</span><br><span class="line">  // 判断点击的是哪个 nav</span><br><span class="line">  if (item.name === &#x27;分类&#x27;) &#123;</span><br><span class="line">    uni.switchTab(&#123;</span><br><span class="line">      url: &#x27;/pages/cate/cate&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-4-楼层区域"><a href="#3-4-楼层区域" class="headerlink" title="3.4 楼层区域"></a>3.4 楼层区域</h4><h5 id="3-4-1-获取楼层数据"><a href="#3-4-1-获取楼层数据" class="headerlink" title="3.4.1 获取楼层数据"></a>3.4.1 获取楼层数据</h5><p>实现思路：</p><ol><li>定义 data 数据</li><li>在 onLoad 中调用获取数据的方法</li><li>在 methods 中定义获取数据的方法</li></ol><p>示例代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      // 1. 楼层的数据列表</span><br><span class="line">      floorList: [],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad() &#123;</span><br><span class="line">    // 2. 在 onLoad 中调用获取楼层数据的方法</span><br><span class="line">    this.getFloorList()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 3. 定义获取楼层列表数据的方法</span><br><span class="line">    async getFloorList() &#123;</span><br><span class="line">      const &#123; data: res &#125; = await uni.$http.get(&#x27;/api/public/v1/home/floordata&#x27;)</span><br><span class="line">      if (res.meta.status !== 200) return uni.$showMsg()</span><br><span class="line">      this.floorList = res.message</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-4-2-渲染楼层的标题"><a href="#3-4-2-渲染楼层的标题" class="headerlink" title="3.4.2 渲染楼层的标题"></a>3.4.2 渲染楼层的标题</h5><ol><li><p>定义如下的 UI 结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 楼层区域 --&gt;</span><br><span class="line">&lt;view class=&quot;floor-list&quot;&gt;</span><br><span class="line">  &lt;!-- 楼层 item 项 --&gt;</span><br><span class="line">  &lt;view class=&quot;floor-item&quot; v-for=&quot;(item, i) in floorList&quot; :key=&quot;i&quot;&gt;</span><br><span class="line">    &lt;!-- 楼层标题 --&gt;</span><br><span class="line">    &lt;image :src=&quot;item.floor_title.image_src&quot; class=&quot;floor-title&quot;&gt;&lt;/image&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></li><li><p>美化楼层标题的样式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.floor-title &#123;</span><br><span class="line">  height: 60rpx;</span><br><span class="line">  width: 100%;</span><br><span class="line">  display: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h5 id="3-4-3-渲染楼层里的图片"><a href="#3-4-3-渲染楼层里的图片" class="headerlink" title="3.4.3 渲染楼层里的图片"></a>3.4.3 渲染楼层里的图片</h5><ol><li><p>定义楼层图片区域的 UI 结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 楼层图片区域 --&gt;</span><br><span class="line">&lt;view class=&quot;floor-img-box&quot;&gt;</span><br><span class="line">  &lt;!-- 左侧大图片的盒子 --&gt;</span><br><span class="line">  &lt;view class=&quot;left-img-box&quot;&gt;</span><br><span class="line">    &lt;image :src=&quot;item.product_list[0].image_src&quot; :style=&quot;&#123;width: item.product_list[0].image_width + &#x27;rpx&#x27;&#125;&quot; mode=&quot;widthFix&quot;&gt;&lt;/image&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;!-- 右侧 4 个小图片的盒子 --&gt;</span><br><span class="line">  &lt;view class=&quot;right-img-box&quot;&gt;</span><br><span class="line">    &lt;view class=&quot;right-img-item&quot; v-for=&quot;(item2, i2) in item.product_list&quot; :key=&quot;i2&quot; v-if=&quot;i2 !== 0&quot;&gt;</span><br><span class="line">      &lt;image :src=&quot;item2.image_src&quot; mode=&quot;widthFix&quot; :style=&quot;&#123;width: item2.image_width + &#x27;rpx&#x27;&#125;&quot;&gt;&lt;/image&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>美化楼层图片区域的样式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.right-img-box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-wrap: wrap;</span><br><span class="line">  justify-content: space-around;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.floor-img-box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  padding-left: 10rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h5 id="3-4-4-点击楼层图片跳转到商品列表页"><a href="#3-4-4-点击楼层图片跳转到商品列表页" class="headerlink" title="3.4.4 点击楼层图片跳转到商品列表页"></a>3.4.4 点击楼层图片跳转到商品列表页</h5><ol><li><p>在 <code>subpkg</code> 分包中，新建 <code>goods_list</code> 页面</p><p><img src="https://www.escook.cn/docs-uni-shop/assets/img/2-3.de0b01ae.png" alt="img"></p></li><li><p>楼层数据请求成功之后，通过双层 <code>forEach</code> 循环，处理 URL 地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 获取楼层列表数据</span><br><span class="line">async getFloorList() &#123;</span><br><span class="line">  const &#123; data: res &#125; = await uni.$http.get(&#x27;/api/public/v1/home/floordata&#x27;)</span><br><span class="line">  if (res.meta.status !== 200) return uni.$showMsg()</span><br><span class="line"></span><br><span class="line">  // 通过双层 forEach 循环，处理 URL 地址</span><br><span class="line">  res.message.forEach(floor =&gt; &#123;</span><br><span class="line">    floor.product_list.forEach(prod =&gt; &#123;</span><br><span class="line">      prod.url = &#x27;/subpkg/goods_list/goods_list?&#x27; + prod.navigator_url.split(&#x27;?&#x27;)[1]</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  this.floorList = res.message</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>把图片外层的 <code>view</code> 组件，改造为 <code>navigator</code> 组件，并动态绑定 <code>url 属性</code> 的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 楼层图片区域 --&gt;</span><br><span class="line">&lt;view class=&quot;floor-img-box&quot;&gt;</span><br><span class="line">  &lt;!-- 左侧大图片的盒子 --&gt;</span><br><span class="line">  &lt;navigator class=&quot;left-img-box&quot; :url=&quot;item.product_list[0].url&quot;&gt;</span><br><span class="line">    &lt;image :src=&quot;item.product_list[0].image_src&quot; :style=&quot;&#123;width: item.product_list[0].image_width + &#x27;rpx&#x27;&#125;&quot; mode=&quot;widthFix&quot;&gt;&lt;/image&gt;</span><br><span class="line">  &lt;/navigator&gt;</span><br><span class="line">  &lt;!-- 右侧 4 个小图片的盒子 --&gt;</span><br><span class="line">  &lt;view class=&quot;right-img-box&quot;&gt;</span><br><span class="line">    &lt;navigator class=&quot;right-img-item&quot; v-for=&quot;(item2, i2) in item.product_list&quot; :key=&quot;i2&quot; v-if=&quot;i2 !== 0&quot; :url=&quot;item2.url&quot;&gt;</span><br><span class="line">      &lt;image :src=&quot;item2.image_src&quot; mode=&quot;widthFix&quot; :style=&quot;&#123;width: item2.image_width + &#x27;rpx&#x27;&#125;&quot;&gt;&lt;/image&gt;</span><br><span class="line">    &lt;/navigator&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="3-5-分支的合并与提交"><a href="#3-5-分支的合并与提交" class="headerlink" title="3.5 分支的合并与提交"></a>3.5 分支的合并与提交</h4><ol><li><p>将本地的 home 分支进行本地的 commit 提交：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;完成了 home 首页的开发&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>将本地的 home 分支推送到远程仓库进行保存：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin home</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>将本地的 home 分支合并到本地的 master 分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge home</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>删除本地的 home 分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d home</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;uni-app&quot;&gt;&lt;a href=&quot;#uni-app&quot; class=&quot;headerlink&quot; title=&quot;uni-app&quot;&gt;&lt;/a&gt;uni-app&lt;/h2&gt;&lt;h3 id=&quot;1-开发工具&quot;&gt;&lt;a href=&quot;#1-开发工具&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="资料" scheme="http://example.com/categories/%E8%B5%84%E6%96%99/"/>
    
    
    <category term="uni-app" scheme="http://example.com/tags/uni-app/"/>
    
  </entry>
  
  <entry>
    <title>初识(十一)</title>
    <link href="http://example.com/2022/11/06/%E5%88%9D%E8%AF%86-%E5%8D%81%E4%B8%80/"/>
    <id>http://example.com/2022/11/06/%E5%88%9D%E8%AF%86-%E5%8D%81%E4%B8%80/</id>
    <published>2022-11-06T03:53:29.000Z</published>
    <updated>2022-11-06T03:56:33.936Z</updated>
    
    <content type="html"><![CDATA[<h2 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h2><h3 id="1-小程序代码的构成"><a href="#1-小程序代码的构成" class="headerlink" title="1.小程序代码的构成"></a>1.小程序代码的构成</h3><h4 id="1-1-项目的基本组成结构"><a href="#1-1-项目的基本组成结构" class="headerlink" title="1.1 项目的基本组成结构"></a>1.1 项目的基本组成结构</h4><p>1.pages 用来存放所有小程序的页面，每个页面都是一个单独的文件夹</p><p>2.utils 用来存放工具性质的模块</p><p>3.app.js 整个小程序项目的入口文件</p><p>4.app.json 小程序项目的全局配置文件</p><p>5.app.wxss 小程序项目的全局样式文件</p><p>6.project.config.json 项目的配置文件</p><p>7.sitemap.json 用来配置小程序及其页面是否允许被微信索引</p><h4 id="1-2-小程序页面的组成部分"><a href="#1-2-小程序页面的组成部分" class="headerlink" title="1.2 小程序页面的组成部分"></a>1.2 小程序页面的组成部分</h4><p>每个页面由 4 个基本文件组成，它们分别是：</p><p> .js 文件（页面的脚本文件，存放页面的数据、事件处理函数等）</p><p> .json 文件（当前页面的配置文件，配置窗口的外观、表现等）</p><p> .wxml 文件（页面的模板结构文件） </p><p>.wxss 文件（当前页面的样式表文件）</p><h4 id="1-3-JSON-配置文件"><a href="#1-3-JSON-配置文件" class="headerlink" title="1.3 JSON 配置文件"></a>1.3 JSON 配置文件</h4><p>JSON 是一种数据格式，在实际开发中， JSON 总是以配置文件的形式出现。小程序项目中也不例外：</p><p>通过不同的 .json 配置文件，可以对小程序项目进行不同级别的配置。 小程序项目中有 4 种 json 配置文件，分别是：</p><p>项目根目录的 app.json 配置文件</p><p>项目根目录种的 project.config.json 配置文件</p><p>项目根目录中的 sitemap.json 配置文件</p><p>每个页面文件夹中的 .json 配置文件</p><h4 id="1-4-app-json-配置文件"><a href="#1-4-app-json-配置文件" class="headerlink" title="1.4 app.json 配置文件"></a>1.4 app.json 配置文件</h4><p>app.json 是当前小程序的全局配置，包括了小程序的所有页面路径、窗口外观、界面表现、底部tab 等。</p><p>Demo 项目里边的 app.json 配置内容如下：</p><p>pages ：用来记录当前小程序所有页面的路径 window ：全局定义</p><p>小程序所有页面的背景色、文字颜色等 style ：全局定义小程序组件所使用的样式版本</p><p>sitemapLocation ：用来指明 sitemap.json 的位置</p><h4 id="1-5-project-config-json-配置文件"><a href="#1-5-project-config-json-配置文件" class="headerlink" title="1.5 project.config.json 配置文件"></a>1.5 project.config.json 配置文件</h4><p>project.config.json 是项目配置文件，用来记录我们对小程序开发工具所做的个性化配置</p><p>setting: 保存了编译相关的配置</p><p>projectname: 保存的是项目名称</p><p>appid: 保存的是小程序的账号 ID</p><p>project.config.json 更多的是对微信开发者工具的配置, 而 app.json 是对项目代码功能层面上的配置.</p><h4 id="1-6-sitemap-json-配置文件"><a href="#1-6-sitemap-json-配置文件" class="headerlink" title="1.6 sitemap.json 配置文件"></a>1.6 sitemap.json 配置文件</h4><p>微信现已开放小程序内搜索，效果类似于 PC 网页的 SEO 。 sitemap.json 文件用来配置小程序页面是否允许微信索引。</p><p>当开发者允许微信索引时，微信会通过爬虫的形式，为小程序的页面内容建立索引。当用户的搜索关键字和页面的索引匹配成功的时候，小程序的页面将可能展示在搜索结果中。</p><p>注意： sitemap 的索引提示是默认开启的，如需要关闭 sitemap 的索引提示，可在小程序项目配置文件 project.config.json 的 setting 中配置字段 checkSiteMap 为 false。</p><h4 id="1-7-页面的-json-配置文件"><a href="#1-7-页面的-json-配置文件" class="headerlink" title="1.7 页面的 .json 配置文件"></a>1.7 页面的 .json 配置文件</h4><p>小程序中的每一个页面，可以使用 .json 文件来对本页面的窗口外观进行配置，页面中的配置项会覆盖 app.json 的 window 中相同的配置项, 当然, 这指的是当前页面被展示出来的时候。</p><h4 id="1-8-新建小程序页面"><a href="#1-8-新建小程序页面" class="headerlink" title="1.8 新建小程序页面"></a>1.8 新建小程序页面</h4><p>在 app.json-&gt;pages 中新增页面的存放路径，小程序开发中工具就可帮我们自动创建对应的页面文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.json 快速创建文件 </span></span><br><span class="line"><span class="string">&quot;pages&quot;</span>:[</span><br><span class="line">    <span class="string">&quot;pages/index/index&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pages/logs/logs&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pages/***/***&quot;</span></span><br><span class="line">  ],</span><br></pre></td></tr></table></figure><h4 id="1-9-修改项目首页"><a href="#1-9-修改项目首页" class="headerlink" title="1.9 修改项目首页"></a>1.9 修改项目首页</h4><p>只需要调整 app.json -&gt; pages 数组中页面路径的前后顺序，即可修改项目的首页。小程序会把排在第一位的页面，当作项目首页进行渲染。</p><h4 id="1-10-WXML"><a href="#1-10-WXML" class="headerlink" title="1.10 WXML"></a>1.10 WXML</h4><p>WXML 是小程序框架的标签语言,用来构建小程序页面的结构，其作用类似于网页开发中的 HTML。他们主要存在下面几点的差别:</p><p>1.标签名不同</p><ol><li>HTML（div） </li><li>WXML(view, text, image, navigator)</li></ol><p>2.属性节点不同</p><ol><li><a href="#" > </a> </li><li><navigator url=""></navigator></li></ol><p>3.提供了类似于 vue 中的模板语法</p><ol><li>数据绑定</li><li>列表渲染</li><li>条件渲染</li></ol><h4 id="1-11-WXSS"><a href="#1-11-WXSS" class="headerlink" title="1.11 WXSS"></a>1.11 WXSS</h4><p>WXSS (WeiXin Style Sheets) 是一套样式语言，用于描述 WXML 的组件样式，类似于网页开发中的</p><p>CSS 。他们主要存在下面几点的差别</p><p>① 新增了 rpx 尺寸单位</p><p>CSS 中需要手动进行像素单位换算，例如 rem</p><p>WXSS 在底层支持新的尺寸单位 rpx ，在不同大小的屏幕上小程序会自动进行换算</p><p>② 提供了全局的样式和局部样式</p><p>项目根目录中的 app.wxss 会作用于所有小程序页面</p><p>局部页面的 .wxss 样式仅对当前页面生效</p><p>③ WXSS 仅支持部分 CSS 选择器</p><p>.class 和 #id </p><p>element</p><p>并集选择器、后代选择器</p><p>::after 和 ::before 等伪类选择器</p><h4 id="1-12-js-文件的分类"><a href="#1-12-js-文件的分类" class="headerlink" title="1.12 js 文件的分类"></a>1.12 js 文件的分类</h4><p>小程序中的 JS 文件分为三大类，分别是：</p><p>① app.js: 是整个小程序项目的入口文件，通过调用 App() 函数来启动整个小程序</p><p>② 页面的 .js 文件: 是页面的入口文件，通过调用 Page() 函数来创建并运行页面</p><p>③ 普通的 .js 文件: 是普通的功能模块文件，用来封装公共的函数或属性供页面使用</p><h3 id="2-小程序的宿主环境"><a href="#2-小程序的宿主环境" class="headerlink" title="2. 小程序的宿主环境"></a>2. 小程序的宿主环境</h3><h4 id="2-1-宿主环境"><a href="#2-1-宿主环境" class="headerlink" title="2.1 宿主环境"></a>2.1 宿主环境</h4><p>宿主环境（host environment）指的是程序运行所必须的依赖环境。例如：</p><p>Android 系统和 iOS 系统是两个不同的宿主环境。安卓版的微信 App 是不能在 iOS 环境下运行</p><p>的，所以，Android 是安卓软件的宿主环境，脱离了宿主环境的软件是没有任何意义的！</p><p>小程序的宿主环境包含以下几部分内容</p><p>① 通信模型</p><p>② 运行机制</p><p>③ 组件</p><p>④ API</p><h4 id="2-2-通信模型"><a href="#2-2-通信模型" class="headerlink" title="2.2 通信模型"></a>2.2 通信模型</h4><p>小程序中通信的主体是渲染层和逻辑层，其中：</p><p>① WXML 模板和 WXSS 样式工作在渲染层</p><p>② JS 脚本工作在逻辑层</p><p>而所谓的通信模型指的是: </p><p>① 渲染层和逻辑层之间的通信</p><p>② 逻辑层和第三方服务器之间的通信</p><p>这两部分的通信都是通过微信客户端进行转发</p><h4 id="2-3-运行机制"><a href="#2-3-运行机制" class="headerlink" title="2.3 运行机制"></a>2.3 运行机制</h4><p>小程序的运行机制主要讲两部分</p><p>① 小程序启动的过程</p><p>1.把小程序的代码包下载到本地</p><p>2.解析 app.json 全局配置文件</p><p>3.执行 app.js 小程序入口文件，调用 App() 创建小程序实例</p><p>4.渲染小程序首页</p><p>5.小程序启动完成</p><p>② 某个页面渲染的过程</p><p>1.加载解析页面的 .json 配置文件</p><p>2.加载页面的 .wxml 模板和 .wxss 样式</p><p>3.执行页面的 .js 文件，调用 Page() 创建页面实例</p><p>4.页面渲染完成</p><h3 id="3-组件"><a href="#3-组件" class="headerlink" title="3. 组件"></a>3. 组件</h3><p>小程序中的组件也是由宿主环境提供的，开发者可以基于组件快速搭建出漂亮的页面结构。官方把小程</p><p>序的组</p><p>件分为了 9 大类，分别是：</p><p>① 视图容器 ② 基础内容 ③ 表单组件 ④ 导航组件 ⑤ 媒体组件 ⑥ map 地图组件 ⑦ canvas 画布组件</p><p>⑧ 开放能力 ⑨ 无障碍访问</p><p>常用的有以下3个 </p><h4 id="3-1-view"><a href="#3-1-view" class="headerlink" title="3.1.view"></a><strong>3.1.view</strong></h4><p>普通视图区域</p><p>类似于 HTML 中的 div，是一个块级元素</p><p>常用来实现页面的布局效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class=&quot;container1&quot;&gt; </span><br><span class="line">&lt;view&gt;A&lt;/view&gt; </span><br><span class="line">&lt;view&gt;B&lt;/view&gt; </span><br><span class="line">&lt;view&gt;C&lt;/view&gt; </span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.container1 &#123; </span><br><span class="line">display: flex; </span><br><span class="line">justify-content: space-around; </span><br><span class="line">align-items: flex-start; </span><br><span class="line">&#125;</span><br><span class="line">.container1 view &#123; </span><br><span class="line">width: 100px; </span><br><span class="line">height: 100px; </span><br><span class="line">line-height: 100px; </span><br><span class="line">text-align: center; </span><br><span class="line">background-color: yellowgreen; </span><br><span class="line">color: #fff; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-scroll-view"><a href="#3-2-scroll-view" class="headerlink" title="3.2.scroll-view"></a><strong>3.2.scroll-view</strong></h4><p>可滚动的视图区域</p><p>常用来实现滚动列表效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- scorll-y 允许纵向滚动 --&gt; </span><br><span class="line">&lt;!-- scorll-x 允许横向滚动 --&gt; </span><br><span class="line">&lt;scroll-view class=&quot;container1&quot; scroll-y&gt; </span><br><span class="line">&lt;view&gt;A&lt;/view&gt; </span><br><span class="line">&lt;view&gt;B&lt;/view&gt; </span><br><span class="line">&lt;view&gt;C&lt;/view&gt; </span><br><span class="line">&lt;/scroll-view&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">.container1 &#123; </span><br><span class="line">/* display: flex; </span><br><span class="line">justify-content: space-around; </span><br><span class="line">align-items: flex-start; */ </span><br><span class="line">border: 2px dashed lightgreen; </span><br><span class="line">/* 给父盒子添加固定高度，内部的元素就可以滚动 */ </span><br><span class="line">width: 100px; </span><br><span class="line">height: 130px; </span><br><span class="line">&#125;</span><br><span class="line">.container1 view &#123; </span><br><span class="line">width: 100px; </span><br><span class="line">height: 100px; </span><br><span class="line">line-height: 100px; </span><br><span class="line">text-align: center; </span><br><span class="line">color: #fff; </span><br><span class="line">&#125;</span><br><span class="line">.container1 view:nth-child(1) &#123; </span><br><span class="line">background-color: yellowgreen; </span><br><span class="line">&#125;</span><br><span class="line">.container1 view:nth-child(2) &#123; </span><br><span class="line">background-color: lightskyblue; </span><br><span class="line">&#125;</span><br><span class="line">.container1 view:nth-child(3) &#123; </span><br><span class="line">background-color: lightcoral; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-swiper-和-swiper-item"><a href="#3-3-swiper-和-swiper-item" class="headerlink" title="3.3.swiper 和 swiper-item"></a><strong>3.3.swiper 和 swiper-item</strong></h4><p>轮播图容器组件 和 轮播图 item 组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 轮播图的结构 --&gt;</span><br><span class="line">&lt;swiper class=&quot;swiper-container&quot;&gt;</span><br><span class="line">&lt;!-- 第一个轮播图 --&gt;</span><br><span class="line">&lt;swiper-item&gt; &lt;view class=&quot;item&quot;&gt;A&lt;/view&gt; &lt;/swiper-item&gt;</span><br><span class="line">&lt;!-- 第二个轮播图 --&gt;</span><br><span class="line">&lt;swiper-item&gt; &lt;view class=&quot;item&quot;&gt;B&lt;/view&gt; &lt;/swiper-item&gt;</span><br><span class="line">&lt;!-- 第三个轮播图 --&gt;</span><br><span class="line">&lt;swiper-item&gt; &lt;view class=&quot;item&quot;&gt;C&lt;/view&gt; &lt;/swiper-item&gt;</span><br><span class="line">&lt;/swiper&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.swiper-container &#123;</span><br><span class="line">height: 150px; </span><br><span class="line">&#125;</span><br><span class="line">.item &#123; </span><br><span class="line">height: 100%; </span><br><span class="line">line-height: 150px;</span><br><span class="line">text-align: center; </span><br><span class="line">&#125;</span><br><span class="line">swiper-item:nth-child(1) .item &#123; </span><br><span class="line">background-color: lightcoral; </span><br><span class="line">&#125;</span><br><span class="line">swiper-item:nth-child(2) .item &#123; </span><br><span class="line">background-color: lightseagreen; </span><br><span class="line">&#125;</span><br><span class="line">swiper-item:nth-child(3) .item &#123; </span><br><span class="line">background-color: lightpink; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>swiper 还有其他相应的属性, 如下: </p><p><strong>indicator-dots 是否显示面板指示点</strong></p><p><strong>indicator-color 指示点颜色</strong></p><p><strong>indicator-active-color 激活指示点颜色</strong></p><p><strong>autoplay 是否自动切换</strong></p><p><strong>interval 自动切换时间间隔</strong></p><p><strong>circular 是否采用衔接滑动</strong></p><h4 id="3-4-text-组件和-rich-text-组件"><a href="#3-4-text-组件和-rich-text-组件" class="headerlink" title="3.4 text 组件和 rich-text 组件"></a>3.4 text 组件和 rich-text 组件</h4><p>text 组件</p><p>文本组件</p><p>类似于 HTML 中的 span 标签，是一个行内元素</p><p>rich-text 组件</p><p>富文本组件 支持把 HTML 字符串渲染为 WXML 结构</p><p>通过 text 组件的 selectable 属性，实现长按选中文本内容的效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 只有在text组件中添加selectable 属性支持长按选中效果 --&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;text selectable&gt;手机号码支持长按选中效果：13333333333&lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>通过 rich-text 组件的 nodes 属性节点，把 HTML 字符串渲染为对应的 UI 结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- rich-text组件中添加 nodes节点可以把 HTML 字符串渲染为对应的 UI 结构 --&gt; </span><br><span class="line">&lt;rich-text nodes=&quot;&lt;h1 style=&#x27;color: red;&#x27;&gt;标题&lt;/h1&gt;&quot;&gt; &lt;/rich-text&gt;</span><br></pre></td></tr></table></figure><p>注意: 小程序默认是识别不了 HTML 的, 小程序默认只识别 WXML , 所以如果我们从服务器上获取到了包含HTML 字符串的数据, 并且想展示出来, 应该使用到 rich-text 组件的 nodes 属性。</p><h4 id="3-5-button-组件"><a href="#3-5-button-组件" class="headerlink" title="3.5 button 组件"></a>3.5 button 组件</h4><p>button 是按钮组件,它的功能比 HTML 中的 button 按钮丰富,我们可以通过 open-type 属性可以调用</p><p>微信提供的各种功能（客服、转发、获取用户授权、获取用户信息等）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 通过type属性指定按钮颜色类型 --&gt; </span><br><span class="line">&lt;button&gt;普通按钮&lt;/button&gt; </span><br><span class="line">&lt;button type=&quot;primary&quot;&gt;主色调按钮&lt;/button&gt; </span><br><span class="line">&lt;button type=&quot;warn&quot;&gt;警告按钮&lt;/button&gt; </span><br><span class="line">&lt;!-- 通过size属性指定按钮尺寸 --&gt; </span><br><span class="line">&lt;button size=&quot;mini&quot;&gt;普通按钮&lt;/button&gt; </span><br><span class="line">&lt;button size=&quot;mini&quot; type=&quot;primary&quot;&gt;主色调按钮&lt;/button&gt; </span><br><span class="line">&lt;button size=&quot;mini&quot; type=&quot;warn&quot;&gt;警告按钮&lt;/button&gt; </span><br><span class="line">&lt;!-- 通过plain属性指定按钮的镂空效果 --&gt; </span><br><span class="line">&lt;button plain&gt;普通按钮&lt;/button&gt; </span><br><span class="line">&lt;button plain type=&quot;primary&quot;&gt;主色调按钮&lt;/button&gt; </span><br><span class="line">&lt;button plain type=&quot;warn&quot;&gt;警告按钮&lt;/button&gt;</span><br></pre></td></tr></table></figure><h4 id="3-6-image-组件"><a href="#3-6-image-组件" class="headerlink" title="3.6 image 组件"></a>3.6 image 组件</h4><p>image 是图片组件(注意,不是 img 哦, 是 image ), 用来展示图片的, 它也是通过 src 属性来指明图片的路</p><p>径。</p><p>有一个属性叫做 mode , 它是用来控制图片的裁剪和缩放形式</p><p>scaleToFill ：(默认值)缩放模式，不保持纵横比缩放图片，使图片的宽高完全拉伸至填满image元素。</p><p>aspectFit：缩放模式，保持纵横比缩放图片，使图片的长边能完全显示出来可以完整的将图片显示出来。</p><p>aspectFill：缩放模式，保持纵横比缩放图片，只保证图片的短边能完全显示出来图片通常旨在水平或垂直方向是完整的，另一个方向将发生截取。</p><p>widthFix ：缩放模式，宽度不变，高度自动变化，保持原图宽高比不变。</p><p>heightFix ：缩放模式，高度不变，宽度自动变化，保持原图宽高比不变。</p><h4 id="3-7-小程序API-的3大分类"><a href="#3-7-小程序API-的3大分类" class="headerlink" title="3.7 小程序API 的3大分类"></a>3.7 小程序API 的3大分类</h4><p>小程序中的 API 是由宿主环境提供的，通过这些丰富的小程序 API ，开发者可以方便的调用微信提供</p><p>的能力，</p><p>例如：获取用户信息、本地存储、支付功能等。</p><p>小程序 API 分为3大类, 分别是: </p><p>① 事件监听 API</p><p>特点：以 on 开头，用来监听某些事件的触发</p><p>举例： wx.onWindowResize(function callback) 监听窗口尺寸变化的事件</p><p>② 同步 API</p><p>特点1：以 Sync 结尾的 API 都是同步 API</p><p>特点2：同步 API 的执行结果，可以通过函数返回值直接获取，如果执行出错会抛出异常</p><p>举例： wx.setStorageSync(‘key’, ‘value’) 向本地存储中写入内容</p><p>③ 异步 API</p><p>特点：类似于 jQuery 中的 $.ajax(options) 函数，需要通过 success、fail、complete 接收调</p><p>用的结果</p><p>举例： wx.request() 发起网络数据请求，通过 success 回调函数接收数据</p><h3 id="4-WXML-模板语法"><a href="#4-WXML-模板语法" class="headerlink" title="4. WXML 模板语法"></a>4. WXML 模板语法</h3><h4 id="4-1-数据绑定"><a href="#4-1-数据绑定" class="headerlink" title="4.1 数据绑定"></a>4.1 数据绑定</h4><p>小程序中, 数据绑定分为2个步骤: ① 在 data 中定义数据 ② 在 WXML 中使用数据</p><ol><li>在 data 中定义页面的数据 在页面对应的 .js 文件中，把数据定义到 data 对象中即可</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123; </span><br><span class="line">  <span class="comment">/** 页面的初始数据 */</span></span><br><span class="line">  <span class="attr">data</span>: &#123; </span><br><span class="line">    <span class="attr">info</span>: <span class="string">&#x27;Hello World&#x27;</span>, </span><br><span class="line">    <span class="comment">// 如果是短横线的形式声明数据，需要使用双引号包裹 </span></span><br><span class="line">    <span class="string">&quot;user-name&quot;</span>: <span class="string">&#x27;XX&#x27;</span> ,</span><br><span class="line">    <span class="attr">imgSrc</span>: <span class="string">&#x27;xxxxxx&#x27;</span>,</span><br><span class="line">    <span class="attr">randomNum</span>: <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span> <span class="comment">// 生成 10 以内的随机数</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/** 生命周期函数--监听页面加载 */</span></span><br><span class="line">  <span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123; &#125;, </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2.在 WXML 中使用数据</p><p>把data中的数据绑定到页面中渲染，使用 Mustache 语法（双大括号）将变量包起来即可。</p><p>语法格式为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 插值表达式/大胡子语法 --&gt; </span><br><span class="line">&lt;view&gt;&#123;&#123; info &#125;&#125;&lt;/view&gt;</span><br><span class="line">&lt;!-- 动态绑定数据 --&gt; </span><br><span class="line">&lt;image src=&quot;&#123;&#123; imgSrc &#125;&#125;&quot; mode=&quot;widthFix&quot;&gt;&lt;/image&gt;</span><br><span class="line">&lt;view&gt; &#123;&#123; randomNum &gt;= 5 ? &#x27;数字大于或等于5&#x27; : &#x27;数字小于5&#x27; &#125;&#125; &lt;/view&gt;</span><br></pre></td></tr></table></figure><h4 id="4-2-事件绑定"><a href="#4-2-事件绑定" class="headerlink" title="4.2 事件绑定"></a>4.2 事件绑定</h4><p>事件是渲染层到逻辑层的通讯方式。通过事件可以将用户在渲染层产生的行为，反馈到逻辑层进行业务</p><p>的处理。小程序中常用的事件如下：</p><p>类型: tap    绑定方法:bindtap 或 bind:tap    描述:手指触摸后马上离开，类似于 HTML 中的 click 事件</p><p>类型:input    绑定方法:bindinput 或 bind:input    描述:文本框的输入事件</p><p>类型:change   绑定方法:bindchange 或 bind:change    描述:状态改变时触发</p><p>当事件回调触发的时候，会收到一个事件对象 event ，它的详细属性如下表所示：</p><p>属性:type类型:String说明:事件类型</p><p>属性:timeStamp类型:Integer说明:页面打开到触发事件所经过的毫秒数</p><p>属性:target类型:Object说明:触发事件的组件的一些属性值集合</p><p>属性:currentTarget类型:Object说明:当前组件的一些属性值集合</p><p>属性:detail类型:Object说明:额外的信息</p><p>属性:touches类型:Array说明:触摸事件，当前停留在屏幕中的触摸点信息的数组</p><p>属性:changedTouches类型:Array说明:触摸事件，当前变化的触摸点信息的数组</p><p>关于 target 属性, 它经常会和 currentTarget 容易混淆</p><p>target 是触发该事件的源头组件currentTarget 则是当前事件所绑定的组件</p><p>e.target 指向的是触发事件的源头组件，因此， e.target 是内部的按钮组件</p><p>e.currentTarget 指向的是当前正在触发事件的那个组件，因此， e.currentTarget 是当前的 view组件</p><h5 id="4-2-1-bindtap-的使用"><a href="#4-2-1-bindtap-的使用" class="headerlink" title="4.2.1 bindtap 的使用"></a>4.2.1 bindtap 的使用</h5><p>① 通过 bindtap ，可以为组件绑定 tap 触摸事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- tap触摸事件 --&gt; </span><br><span class="line">&lt;button type=&quot;primary&quot; bindtap=&quot;onHandleTap&quot;&gt;按钮&lt;/button&gt; </span><br><span class="line">&lt;!-- +1按钮的事件 --&gt; </span><br><span class="line">&lt;view class=&quot;countBox&quot;&gt;&#123;&#123; count &#125;&#125;&lt;/view&gt; </span><br><span class="line">&lt;button bindtap=&quot;onAddHandle&quot;&gt;点我试试&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>② 在页面的 .js 文件中定义对应的事件处理函数，事件参数通过形参 event （一般简写成 e ） 来接收, 注意,事件处理函数需要和 data 平级。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123; </span><br><span class="line">  <span class="attr">data</span>: &#123; &#125;,</span><br><span class="line">  onHandleTap : <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="comment">// 事件对象e </span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e); </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onAddHandle</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="4-2-2-js-中访问-data-中的数据"><a href="#4-2-2-js-中访问-data-中的数据" class="headerlink" title="4.2.2 js 中访问 data 中的数据"></a>4.2.2 js 中访问 data 中的数据</h5><p>在 js 代码中, 如果想要访问 data中 的数据, 是通过 this.data.xxx 的方式进行访问</p><h5 id="4-2-3-js-中修改-data-中的数据"><a href="#4-2-3-js-中修改-data-中的数据" class="headerlink" title="4.2.3 js 中修改 data 中的数据"></a>4.2.3 js 中修改 data 中的数据</h5><p>通过调用 this.setData(dataObject) 方法，可以给页面 data 中的数据重新赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">onAddHandle</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; </span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123; </span><br><span class="line">    <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">count</span> + <span class="number">1</span> <span class="comment">// 在原来值基础上+1 </span></span><br><span class="line">  &#125;) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-2-4-事件传参"><a href="#4-2-4-事件传参" class="headerlink" title="4.2.4 事件传参"></a>4.2.4 事件传参</h5><p>小程序中的事件传参比较特殊，不能在绑定事件的同时为事件处理函数传递参数。</p><p>我们可以为组件提供 data-* 自定义属性传参，其中 * 代表的是参数的名字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">  事件传参 data-*自定义属性传参，*代表参数名字 </span><br><span class="line">info 会被解析为参数的数字 </span><br><span class="line">数值<span class="number">2</span> 会被解析为参数的值 </span><br><span class="line">  --&gt; </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;onBtnString&quot;</span> <span class="attr">data-info</span>=<span class="string">&quot;2&quot;</span>&gt;</span>事件传参-拼接字符串<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>info 会作为名字存储在事件对象的 target 中的 dataset 中, 2 会被解析为值在事件处理函数中，通过 event.target.dataset.info 即可获取到值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事件传参-拼接字符串 </span></span><br><span class="line">onBtnString (e) &#123; </span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123; </span><br><span class="line">    <span class="comment">// this.data.count就是旧值 </span></span><br><span class="line">    <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">count</span> + e.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">info</span> </span><br><span class="line">  &#125;) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-2-5-bindinput-的使用"><a href="#4-2-5-bindinput-的使用" class="headerlink" title="4.2.5 bindinput 的使用"></a>4.2.5 bindinput 的使用</h5><p>在小程序中，通过 input 事件来响应文本框的输入事件</p><p>① 通过 bindinput ，可以为文本框绑定输入事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;view <span class="keyword">class</span>=<span class="string">&quot;iptBox&quot;</span>&gt; </span><br><span class="line">  &lt;!-- input事件 --&gt; </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;ipt1&quot;</span> <span class="attr">bindinput</span>=<span class="string">&quot;inputValue&quot;</span> <span class="attr">focus</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span> </span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>② 在页面的 .js 文件中定义事件处理函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inputValue (e) &#123; </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e); </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">detail</span>.<span class="property">value</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-2-6-实现小程序中的双向数据绑定"><a href="#4-2-6-实现小程序中的双向数据绑定" class="headerlink" title="4.2.6 实现小程序中的双向数据绑定"></a>4.2.6 实现小程序中的双向数据绑定</h5><p>实现步骤：</p><p>① 定义数据</p><p>② 渲染结构, 绑定 data 中的数据</p><p>③ 美化样式</p><p>④ 监听 input 事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 页面的初始数据 */</span></span><br><span class="line"><span class="attr">data</span>: &#123; </span><br><span class="line">  <span class="attr">msg</span>: <span class="string">&#x27;请输入...&#x27;</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 渲染结构：将data中的 msg 绑定到输入框的 value 属性  input和data中的数据同步-双向数据绑定 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;iptBox&quot;</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; msg &#125;&#125;&quot;</span> <span class="attr">bindinput</span>=<span class="string">&quot;inputHandle&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ipt2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现input的数据和data数据同步 </span></span><br><span class="line"><span class="title function_">inputHandle</span>(<span class="params">e</span>) &#123; </span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123; </span><br><span class="line">    <span class="attr">msg</span>: e.<span class="property">detail</span>.<span class="property">value</span> </span><br><span class="line">  &#125;) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-条件渲染"><a href="#4-3-条件渲染" class="headerlink" title="4.3 条件渲染"></a>4.3 条件渲染</h4><p>在小程序中，使用 wx:if&#x3D;”“ 来判断是否需要渲染该代码块</p><p>也可以配合 wx:elif 和 wx:else 来添加 else 判断：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- wx:if wx:else-if wx:else 条件渲染 --&gt; </span><br><span class="line">&lt;view wx:if=&quot;&#123;&#123; type === 1 &#125;&#125;&quot; class=&quot;text&quot;&gt;男&lt;/view&gt; </span><br><span class="line">&lt;view wx:elif=&quot;&#123;&#123; type === 2 &#125;&#125;&quot; class=&quot;text&quot;&gt;女&lt;/view&gt; </span><br><span class="line">&lt;view wx:else&gt;保密&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>如果要一次性控制多个组件的展示与隐藏，可以使用一个 标签将多个组件包装起来，并在标签上使用 wx:if 控制属性，使用block标签进行包裹，只是包裹性值，不会再页面渲染，类似于template 标签示例如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;block wx:if=&quot;&#123;&#123; true &#125;&#125;&quot;&gt;</span><br><span class="line">  &lt;view&gt;显示&lt;/view&gt; </span><br><span class="line">  &lt;view&gt;多个&lt;/view&gt; </span><br><span class="line">  &lt;view&gt;组件&lt;/view&gt;</span><br><span class="line">&lt;/block&gt;</span><br></pre></td></tr></table></figure><p>注意： 并不是一个组件，它只是一个包裹性质的容器，不会在页面中做任何渲染。</p><h5 id="4-3-1-hidden"><a href="#4-3-1-hidden" class="headerlink" title="4.3.1 hidden"></a>4.3.1 hidden</h5><p>在小程序中，直接使用 hidden&#x3D;”“ 也能控制元素的显示与隐藏</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用 hidden=&quot;&#123;&#123; condition &#125;&#125;&quot; 也能控制元素的显示与隐藏 --&gt;</span><br><span class="line">&lt;view hidden=&quot;&#123;&#123; flag &#125;&#125;&quot;&gt;条件位 true 时，隐藏元素&lt;/view&gt;</span><br></pre></td></tr></table></figure><h5 id="4-3-2-wx-if-与-hidden-的对比"><a href="#4-3-2-wx-if-与-hidden-的对比" class="headerlink" title="4.3.2 wx:if 与 hidden 的对比"></a>4.3.2 wx:if 与 hidden 的对比</h5><p>① 运行方式不同</p><p>wx:if 以动态创建和移除元素的方式，控制元素的展示与隐藏</p><p>hidden 以切换样式的方式（ display: none&#x2F;block; ），控制元素的显示与隐藏</p><p>② 使用建议</p><p>频繁切换时，建议使用 hidden</p><p>控制条件复杂时，建议使用 wx:if 搭配 wx:elif 、 wx:else 进行展示与隐藏的切换</p><h4 id="4-4-列表渲染"><a href="#4-4-列表渲染" class="headerlink" title="4.4 列表渲染"></a>4.4 列表渲染</h4><p>在小程序中, 可以通过 wx:for 指定数组，进行循环渲染重复的组件结构，语法示例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123; </span><br><span class="line">  <span class="attr">arr1</span>: [ <span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;华为&#x27;</span>, <span class="string">&#x27;小米&#x27;</span> ] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 循环渲染模板语法 --&gt;</span><br><span class="line">&lt;view wx:for=&quot;&#123;&#123; arr1 &#125;&#125;&quot; class=&quot;text&quot;&gt;</span><br><span class="line">索引是 &#123;&#123; index &#125;&#125; 当前项是： &#123;&#123; item &#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>默认情况下，当前循环项的索引用 index 表示；当前循环项用 item 表示。</p><p>我们也可以手动指定索引和当前项的变量名</p><p>使用 wx:for-index 可以指定当前循环项的索引的变量名</p><p>使用 wx:for-item 可以指定当前项的变量名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 手动指定索引和当前项的变量名 --&gt;</span><br><span class="line">&lt;view wx:for=&quot;&#123;&#123; arr1 &#125;&#125;&quot; class=&quot;text&quot; wx:for-index=&quot;i&quot; wx:for-item=&quot;item&quot;&gt;</span><br><span class="line">索引是 &#123;&#123; i &#125;&#125; 当前项是： &#123;&#123; item &#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>小程序在实现列表渲染时，也建议为渲染出来的列表项指定唯一的 key 值，从而提高渲染的效率，示例代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 手动指定索引和当前项的变量名 --&gt;</span><br><span class="line">&lt;view wx:key=&quot;index&quot; wx:for=&quot;&#123;&#123; arr1 &#125;&#125;&quot; class=&quot;text&quot; wx:for-index=&quot;i&quot; wx:for-item=&quot;item&quot;&gt; </span><br><span class="line">索引是 &#123;&#123; i &#125;&#125; 当前项是： &#123;&#123; item &#125;&#125; </span><br><span class="line">&lt;/view&gt; </span><br><span class="line">&lt;!-- wx:key 提高渲染效率 --&gt; </span><br><span class="line">&lt;view wx:key=&quot;id&quot; wx:for=&quot;&#123;&#123; arr2 &#125;&#125;&quot; class=&quot;text1&quot;&gt; </span><br><span class="line">当前项是： &#123;&#123; item.username &#125;&#125; </span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><h4 id="4-5-rpx"><a href="#4-5-rpx" class="headerlink" title="4.5 rpx"></a>4.5 rpx</h4><h5 id="4-5-1-什么是-rpx-尺寸单位"><a href="#4-5-1-什么是-rpx-尺寸单位" class="headerlink" title="4.5.1 什么是 rpx 尺寸单位"></a>4.5.1 什么是 rpx 尺寸单位</h5><p>rpx （ responsive pixel ）是微信小程序独有的，用来解决屏适配的尺寸单位。</p><h5 id="4-5-2-rpx-的实现原理"><a href="#4-5-2-rpx-的实现原理" class="headerlink" title="4.5.2 rpx 的实现原理"></a>4.5.2 rpx 的实现原理</h5><p>rpx 的实现原理非常简单：鉴于不同设备屏幕的大小不同，为了实现屏幕的自动适配， rpx 把所有设</p><p>备的屏幕，在宽度上等分为 750 份, 1份就是1 rpx , 所以:</p><p>在较小的设备上，1 rpx 所代表的宽度较小</p><p>在较大的设备上，1 rpx 所代表的宽度较大</p><p>小程序在不同设备上运行的时候，会自动把 rpx 的样式单位换算成对应的像素单位来渲染，从而实现</p><p>屏幕适配。</p><h5 id="4-5-3-rpx-与-px-之间的单位换算"><a href="#4-5-3-rpx-与-px-之间的单位换算" class="headerlink" title="4.5.3 rpx 与 px 之间的单位换算"></a>4.5.3 rpx 与 px 之间的单位换算</h5><p>在 iPhone6 上， CSS 像素屏幕宽度为375 px ，共有 750 个物理像素，等分为 750rpx 。则：</p><p>750 rpx &#x3D; 375 px &#x3D; 750 物理像素</p><p>1 rpx &#x3D; 0.5 px &#x3D; 1物理像素</p><h3 id="5-全局配置"><a href="#5-全局配置" class="headerlink" title="5. 全局配置"></a>5. 全局配置</h3><h4 id="5-1-window"><a href="#5-1-window" class="headerlink" title="5.1 window"></a>5.1 window</h4><p>导航栏 - 顶部导航栏区域</p><p>背景区 - 默认不可见，下拉才显示</p><p>页面主体区 - 页面主体用来显示 wxml 中的布局</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;window&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span> </span><br><span class="line">  <span class="comment">// 下拉loading的样式，仅支持dark/light </span></span><br><span class="line">  <span class="attr">&quot;backgroundTextStyle&quot;</span><span class="punctuation">:</span><span class="string">&quot;light&quot;</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="comment">// 配置导航栏背景色,仅支持16进制的颜色 </span></span><br><span class="line">  <span class="attr">&quot;navigationBarBackgroundColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#fff&quot;</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="comment">// 导航栏标题文本 </span></span><br><span class="line">  <span class="attr">&quot;navigationBarTitleText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;微信读书&quot;</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="comment">// 导航栏标题颜色，仅支持 black/white </span></span><br><span class="line">  <span class="attr">&quot;navigationBarTextStyle&quot;</span><span class="punctuation">:</span><span class="string">&quot;black&quot;</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="comment">// 开启下拉刷新 </span></span><br><span class="line">  <span class="attr">&quot;enablePullDownRefresh&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 下拉窗口的背景色 </span></span><br><span class="line">  <span class="attr">&quot;backgroundColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#efefef&quot;</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="comment">// 上拉触底的距离：默认50像素，单位省去,我们会在触发了上拉触底事件时获取下一页的数据</span></span><br><span class="line">  <span class="attr">&quot;onReachBottomDistance&quot;</span><span class="punctuation">:</span> <span class="number">50</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h4 id="5-2-tabBar"><a href="#5-2-tabBar" class="headerlink" title="5.2 tabBar"></a>5.2 tabBar</h4><p>tabBar 是移动端应用常见的页面效果，用于实现多页面的快速切换。小程序中通常将其分为：</p><p>底部 tabBar</p><p>顶部 tabBar</p><p>注意：tabBar 中只能配置最少 2 个、最多 5 个 tab 页签，当渲染顶部 tabBar 时，不显示 icon ，只显示文本。</p><p>tabBar 的 6 个组成部分</p><p>① backgroundColor ： tabBar 的背景色</p><p>② selectedIconPath ：选中时的图片路径</p><p>③ borderStyle：tabBar 上边框的颜色</p><p>④ iconPath ：未选中时的图片路径</p><p>⑤ selectedColor：tab 上的文字选中时的颜色</p><p>⑥ color：tab 上文字的默认（未选中）颜色</p><h5 id="5-2-1-tabBar-节点的配置项"><a href="#5-2-1-tabBar-节点的配置项" class="headerlink" title="5.2.1 tabBar 节点的配置项"></a>5.2.1 tabBar 节点的配置项</h5><p>pagePathString必填页面路径，页面必须在pages中预先定义</p><p>testString必填tab上显示的文字</p><p>iconPathString选填未选中时的图片路径</p><p>selectedIconPathString 选填选中时的图片路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;tabBar&quot;</span>: &#123; </span><br><span class="line">  <span class="string">&quot;list&quot;</span>: [ </span><br><span class="line">    &#123; </span><br><span class="line">      <span class="string">&quot;pagePath&quot;</span>: <span class="string">&quot;pages/home/home&quot;</span>, </span><br><span class="line">      <span class="string">&quot;text&quot;</span>: <span class="string">&quot;首页&quot;</span>, </span><br><span class="line">      <span class="string">&quot;iconPath&quot;</span>: <span class="string">&quot;/images/tabs/home.png&quot;</span>, </span><br><span class="line">      <span class="string">&quot;selectedIconPath&quot;</span>: <span class="string">&quot;/images/tabs/home-active.png&quot;</span> </span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">      <span class="string">&quot;pagePath&quot;</span>: <span class="string">&quot;pages/message/message&quot;</span>, </span><br><span class="line">      <span class="string">&quot;text&quot;</span>: <span class="string">&quot;消息&quot;</span>, </span><br><span class="line">      <span class="string">&quot;iconPath&quot;</span>: <span class="string">&quot;/images/tabs/message.png&quot;</span>, </span><br><span class="line">      <span class="string">&quot;selectedIconPath&quot;</span>: <span class="string">&quot;/images/tabs/message-active.png&quot;</span> </span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="6-网络数据请求"><a href="#6-网络数据请求" class="headerlink" title="6.网络数据请求"></a>6.网络数据请求</h3><h4 id="6-1-小程序中网络数据请求的限制"><a href="#6-1-小程序中网络数据请求的限制" class="headerlink" title="6.1 小程序中网络数据请求的限制"></a>6.1 小程序中网络数据请求的限制</h4><p>出于安全性方面的考虑，小程序官方对数据接口的请求做出了如下</p><p>两个限制：</p><p>① 只能请求 HTTPS 类型的接口</p><p>② 必须将接口的域名添加到信任列表中</p><h4 id="6-2-配置-request-合法域名"><a href="#6-2-配置-request-合法域名" class="headerlink" title="6.2 配置 request 合法域名"></a>6.2 配置 request 合法域名</h4><p>需求描述：假设在自己的微信小程序中，希望请求 <a href="https://www.escook.cn/">https://www.escook.cn/</a> 域名下的接口</p><p>配置步骤：登录微信小程序管理后台 -&gt; 开发 -&gt; 开发设置 -&gt; 服务器域名 -&gt; 修改 request 合法域名</p><p>注意事项：</p><p>① 域名只支持 https 协议</p><p>② 域名不能使用 IP 地址或 localhost </p><p>③ 域名必须经过 ICP 备案</p><p>④ 服务器域名一个月内最多可申请 5 次修改</p><h4 id="6-3-发起-GET-请求"><a href="#6-3-发起-GET-请求" class="headerlink" title="6.3 发起 GET 请求"></a>6.3 发起 GET 请求</h4><p>调用微信小程序提供的 wx.request() 方法，可以发起 GET 数据请求，示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发起GET请求 </span></span><br><span class="line">onTapGet () &#123; </span><br><span class="line">  wx.<span class="title function_">request</span>(&#123; </span><br><span class="line">    <span class="comment">// 请求地址，必须是以https://开头 </span></span><br><span class="line">    <span class="comment">// 必须是配置在request合法域名 </span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;https://xxxxxx&#x27;</span>, </span><br><span class="line">    <span class="comment">// 请求方式 </span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, </span><br><span class="line">    <span class="comment">// 请求参数 </span></span><br><span class="line">    <span class="attr">data</span>: &#123; </span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">22</span> </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 请求成功的回调 </span></span><br><span class="line">    <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123; </span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res) </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h4 id="6-4-发起-POST-请求"><a href="#6-4-发起-POST-请求" class="headerlink" title="6.4 发起 POST 请求"></a>6.4 发起 POST 请求</h4><p>调用微信小程序提供的 wx.request() 方法，可以发起 GET 数据请求，示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发起GET请求 </span></span><br><span class="line">onTapGet () &#123; </span><br><span class="line">  wx.<span class="title function_">request</span>(&#123; </span><br><span class="line">    <span class="comment">// 请求地址，必须是以https://开头 </span></span><br><span class="line">    <span class="comment">// 必须是配置在request合法域名 </span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;https://xxxxxx&#x27;</span>, </span><br><span class="line">    <span class="comment">// 请求方式 </span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>, </span><br><span class="line">    <span class="comment">// 请求参数 </span></span><br><span class="line">    <span class="attr">data</span>: &#123; </span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">22</span> </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 请求成功的回调 </span></span><br><span class="line">    <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123; </span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res) </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h4 id="6-5-在页面刚加载时请求数据"><a href="#6-5-在页面刚加载时请求数据" class="headerlink" title="6.5 在页面刚加载时请求数据"></a>6.5 在页面刚加载时请求数据</h4><p>在很多情况下，我们需要在页面刚加载的时候，自动请求一些初始化的数据。此时需要在页面的onLoad 事件中调用获取数据的函数，示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** 生命周期函数--监听页面加载--初始化页面的数据 */</span> </span><br><span class="line"><span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123; </span><br><span class="line">  <span class="comment">// 通过 this 关键字 调用上述两个方法 </span></span><br><span class="line">  <span class="comment">// 可以自动发起请求，而不需要点击事件来触发 </span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">onTapGet</span>() </span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">onTapPost</span>() </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--pages/home/home.wxml--&gt; </span><br><span class="line">&lt;!-- 轮播图区域 --&gt; </span><br><span class="line">&lt;swiper indicator-dots circular autoplay&gt; </span><br><span class="line">&lt;swiper-item wx:for=&quot;&#123;&#123; swiperList&#125;&#125;&quot; wx:key=&quot;id&quot;&gt; </span><br><span class="line">&lt;image src=&quot;&#123;&#123; item.image &#125;&#125;&quot;&gt;&lt;/image&gt; </span><br><span class="line">&lt;/swiper-item&gt; </span><br><span class="line">&lt;/swiper&gt; </span><br><span class="line">&lt;!-- 九宫格区域 --&gt; </span><br><span class="line">&lt;view class=&quot;gird-list&quot;&gt; </span><br><span class="line">&lt;view class=&quot;gird-item&quot; wx:for=&quot;&#123;&#123;girdList&#125;&#125;&quot; wx:key=&quot;id&quot;&gt; </span><br><span class="line">&lt;image src=&quot;&#123;&#123; item.icon &#125;&#125;&quot;&gt;&lt;/image&gt; </span><br><span class="line">&lt;text&gt;&#123;&#123; item.name &#125;&#125;&lt;/text&gt; </span><br><span class="line">&lt;/view&gt; </span><br><span class="line">&lt;/view&gt; </span><br><span class="line">&lt;!-- 图片区域 --&gt; </span><br><span class="line">&lt;view class=&quot;img-box&quot;&gt; </span><br><span class="line">&lt;image src=&quot;/images/link-01.png&quot;&gt;&lt;/image&gt; </span><br><span class="line">&lt;image src=&quot;/images/link-02.png&quot;&gt;&lt;/image&gt; </span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">/* pages/home/home.wxss */ </span><br><span class="line">swiper &#123; </span><br><span class="line">height: 350rpx; </span><br><span class="line">&#125;</span><br><span class="line">swiper image &#123; </span><br><span class="line">width: 100%; </span><br><span class="line">height: 100%; </span><br><span class="line">&#125;</span><br><span class="line">.gird-list &#123; </span><br><span class="line">display: flex; </span><br><span class="line">flex-wrap: wrap;</span><br><span class="line">    border-left: 1rpx solid #efefef; </span><br><span class="line">    border-top: 1rpx solid #efefef; </span><br><span class="line">&#125;</span><br><span class="line">.gird-item &#123; </span><br><span class="line">display: flex; </span><br><span class="line">box-sizing: border-box; </span><br><span class="line">flex-direction: column; </span><br><span class="line">align-items: center; </span><br><span class="line">justify-content: center; </span><br><span class="line">border-right: 1rpx solid #efefef; </span><br><span class="line">border-bottom: 1rpx solid #efefef; </span><br><span class="line">width: 33.33%; </span><br><span class="line">height: 200rpx;</span><br><span class="line">&#125;</span><br><span class="line">.gird-item image &#123; </span><br><span class="line">width: 60rpx; </span><br><span class="line">height: 60rpx; </span><br><span class="line">&#125;</span><br><span class="line">.gird-item text &#123; </span><br><span class="line">font-size: 24rpx; </span><br><span class="line">margin-top: 10rpx;</span><br><span class="line">&#125;</span><br><span class="line">.img-box &#123; </span><br><span class="line">display: flex; </span><br><span class="line">justify-content: space-around; </span><br><span class="line">padding: 20rpx 10rpx; </span><br><span class="line">&#125;</span><br><span class="line">.img-box image &#123; </span><br><span class="line">width: 45%; </span><br><span class="line">height: 256rpx; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** 页面的初始数据 */</span> </span><br><span class="line"><span class="attr">data</span>: &#123; </span><br><span class="line">  <span class="comment">// 存放轮播图数据的列表 </span></span><br><span class="line">  <span class="attr">swiperList</span>: [], </span><br><span class="line">  <span class="comment">// 存放九宫格的数据 </span></span><br><span class="line">  <span class="attr">girdList</span>: [] </span><br><span class="line"> &#125;,</span><br><span class="line"><span class="comment">/*** 生命周期函数--监听页面加载 */</span></span><br><span class="line"><span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123; </span><br><span class="line">  <span class="comment">// 初始化页面，调用方法 </span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getSwiperList</span>() </span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getGirdList</span>() </span><br><span class="line">&#125;,</span><br><span class="line">  <span class="comment">// 获取轮播图数据的方法 </span></span><br><span class="line">getSwiperList () &#123;</span><br><span class="line">  <span class="comment">// 发起请求</span></span><br><span class="line">  wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;https://xxx&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// console.log(res)</span></span><br><span class="line">      <span class="comment">// 修改data中的数据</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">swiperList</span>: res.<span class="property">data</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 获取九宫格数据的方法</span></span><br><span class="line">getGirdList () &#123;</span><br><span class="line">  wx.<span class="title function_">request</span>(&#123; </span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;https:xxx&#x27;</span>, </span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, </span><br><span class="line">    <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// console.log(res) </span></span><br><span class="line">      <span class="comment">// 修改data中的数据 </span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123; </span><br><span class="line">        <span class="attr">girdList</span>: res.<span class="property">data</span> </span><br><span class="line">      &#125;) </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;) </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="7-首页导航"><a href="#7-首页导航" class="headerlink" title="7.  首页导航"></a>7.  首页导航</h3><h4 id="7-1-声明式导航"><a href="#7-1-声明式导航" class="headerlink" title="7.1 声明式导航"></a>7.1 声明式导航</h4><ol><li>导航到 tabBar 页面</li></ol><p>tabBar 页面指的是被配置为 tabBar 的页面。</p><p>在使用 组件跳转到指定的 tabBar 页面时，需要指定 url 属性和 open-type 属性，其中：</p><p>url 表示要跳转的页面的地址，必须以 &#x2F; 开头</p><p>open-type 表示跳转的方式，必须为 switchTab</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 声明式导航 --&gt; </span><br><span class="line">&lt;!--导航到 tabBar页面的方法： url必须以“/”根路径开头 并且必须配置open-type属性值为switchTab --&gt; </span><br><span class="line">&lt;navigator url=&quot;/pages/message/message&quot; open-type=&quot;switchTab&quot;&gt;导航到消息页面 &lt;/navigator&gt;</span><br></pre></td></tr></table></figure><ol><li>导航到非 tabBar 页面</li></ol><p>非 tabBar 页面指的是没有被配置为 tabBar 的页面。</p><p>在使用 组件跳转到普通的非 tabBar 页面时，则需要指定 url 属性和 open-type 属性，其中：</p><p>url 表示要跳转的页面的地址，必须以 &#x2F; 开头</p><p>open-type 表示跳转的方式，必须为 navigate</p><p>为了方便, 非 tabBar 页码的跳转时 open-type 也可以省略</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--导航到非tabBar页面 也就是没有被配置为tabBar的页面 url必须以“/”根路径开头 如果配置了open-type属性，值为navigate,也可省略不写 --&gt; </span><br><span class="line">&lt;navigator url=&quot;/pages/info/info&quot; open-type=&quot;navigate&quot;&gt;跳转到info页面 &lt;/navigator&gt; </span><br><span class="line">&lt;navigator url=&quot;/pages/info/info&quot; &gt;跳转到info页面&lt;/navigator&gt;</span><br></pre></td></tr></table></figure><ol><li>后退导航</li></ol><p>如果要后退到上一页面或多级页面，则需要指定 open-type 属性和 delta 属性，其中：</p><p>open-type 的值必须是 navigateBack ，表示要进行后退导航</p><p>delta 的值必须是数字，表示要后退的层级</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--后退导航 open-type属性值为：navigateBack 结合delta属性：表示后退的层级，默认为1，为1时该属性可省略不写 --&gt; &lt;navigator open-type=&quot;navigateBack&quot; delta=&quot;1&quot;&gt;后退&lt;/navigator&gt; </span><br><span class="line">&lt;navigator open-type=&quot;navigateBack&quot;&gt;后退&lt;/navigator&gt;</span><br></pre></td></tr></table></figure><p>注意：为了简便，如果只是后退到上一页面，则可以省略 delta 属性，因为其默认值就是 1</p><p>tabBar 页面是不能实现后退的效果的. 因为, 当我们跳转到 tabBar 页面，会关闭其他所有非</p><p>tabBar 页面,所以当处于 tabBar 页面时, 无页面可退</p><h4 id="7-2-编程式导航"><a href="#7-2-编程式导航" class="headerlink" title="7.2 编程式导航"></a>7.2 编程式导航</h4><ol><li>导航到 tabBar 页面</li></ol><p>调用 wx.switchTab(Object object) 方法，可以跳转到 tabBar 页面。其中 Object 参数对象的属性列表如下</p><p>属性 类型 是否必选说明</p><p>url string 是 需要跳转的 tabBar 页面的路径，路径后不能带参数</p><p>success function 否 接口调用成功的回调函数</p><p>fail function 否 接口调用失败的回调函数</p><p>complete function 否接口调用结束的回调函数（调用成功、失败都会执行）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--编程式导航 跳转至tabBar页面 --&gt; </span><br><span class="line">&lt;button bindtap=&quot;gotoMessage&quot;&gt;跳转到messae页面&lt;/button&gt; </span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*通过编程式导航 跳转至tabBar页面 message页面 */</span></span><br><span class="line">gotoMessage () &#123; </span><br><span class="line">wx.<span class="title function_">switchTab</span>(&#123; </span><br><span class="line"><span class="comment">// 代表要跳转的路径 </span></span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;/pages/message/message&#x27;</span>, </span><br><span class="line">&#125;) </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ol><li>导航到非 tabBar 页面</li></ol><p>调用 wx.navigateTo(Object object) 方法，可以跳转到非 tabBar 的页面。</p><p>其中 Object 参数对象的属性列表, 如下：</p><p>属性 类型 是否必选说明</p><p>url string 是 需要跳转的 tabBar 页面的路径，路径后不能带参数</p><p>success function 否 接口调用成功的回调函数</p><p>fail function 否 接口调用失败的回调函数</p><p>complete function 否接口调用结束的回调函数（调用成功、失败都会执行）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 编程式导航 跳转至非 tabBar页面 --&gt; </span><br><span class="line">&lt;button bindtap=&quot;gotoInfo&quot;&gt;跳转到Info页面&lt;/button&gt; </span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*通过编程式导航 跳转至非tabBar页面 Info页面 */</span></span><br><span class="line">gotoInfo () &#123; </span><br><span class="line">    wx.<span class="title function_">navigateTo</span>(&#123; </span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/pages/info/info&#x27;</span>, </span><br><span class="line">   &#125;) </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ol><li>后退导航</li></ol><p>调用 wx.navigateBack(Object object) 方法，可以返回上一页面或多级页面。</p><p>其中 Object 参数对象可选的, 属性列表如下：</p><p>属性 类型 是否必选说明</p><p>deltanumber是 返回的页面数，如果 delta 大于现有页面数，则返回到首页默认1</p><p>success function 否 接口调用成功的回调函数</p><p>fail function 否 接口调用失败的回调函数</p><p>complete function 否接口调用结束的回调函数（调用成功、失败都会执行）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 通过编程式导航实现后退导航 --&gt;</span><br><span class="line">&lt;button bindtap=&quot;goBack&quot;&gt;编程式导航实现后退&lt;/button&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 通过编程式导航实现后退导航*/</span></span><br><span class="line">goBack () &#123; </span><br><span class="line">  <span class="comment">// 如果不传递参数就是返回上一页 </span></span><br><span class="line">  <span class="comment">// 如果要传递参数则是传递 delta数字型， 代表返回的层级。 </span></span><br><span class="line">  wx.<span class="title function_">navigateBack</span>() </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>注意：</p><p>tabBar 页面是不能实现后退的效果的. 因为, 当我们跳转到 tabBar 页面，会关闭其他所有非</p><p>tabBar 页面,所以当处于 tabBar 页面时, 无页面可退</p><h4 id="7-3-导航传参"><a href="#7-3-导航传参" class="headerlink" title="7.3 导航传参"></a>7.3 导航传参</h4><ol><li>声明式导航传参</li></ol><p>navigator 组件的 url 属性用来指定将要跳转到的页面的路径。同时，路径的后面还可以携带参数：</p><p>参数与路径之间使用 ? 分隔</p><p>参数键与参数值用 &#x3D; 相连</p><p>不同参数用 &amp; 分隔</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--声明式导航传参 参数与路径之间使用 ? 分隔 参数键与参数值用 = 相连 不同参数用 &amp; 分隔 --&gt; </span><br><span class="line">&lt;navigator url=&quot;/pages/info/info?name=zs&amp;age=20&quot;&gt;跳转至info页面&lt;/navigator&gt;</span><br></pre></td></tr></table></figure><ol><li>编程式导航传参</li></ol><p>调用 wx.navigateTo(Object object) 方法跳转页面时，也可以携带参数，代码示例如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--编程式导航传参 --&gt;</span><br><span class="line">&lt;button bindtap=&quot;gotoInfo2&quot;&gt;跳转到info页面&lt;/button&gt; </span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*编程式导航传递参数 */</span></span><br><span class="line">  gotoInfo2 () &#123; </span><br><span class="line">    wx.<span class="title function_">navigateTo</span>(&#123; </span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/pages/info/info?name=李&amp;gender=男&#x27;</span>, </span><br><span class="line">    &#125;) </span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><ol><li>在 onLoad 中接收导航参数</li></ol><p>通过声明式导航传参或编程式导航传参所携带的参数，可以直接在 onLoad 事件中直接获取到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** 页面的初始数据*/</span> </span><br><span class="line"><span class="attr">data</span>: &#123; </span><br><span class="line">  <span class="comment">// 导航传递的参数 </span></span><br><span class="line">  <span class="attr">query</span>: &#123;&#125; </span><br><span class="line">&#125;, </span><br><span class="line"><span class="comment">/*** 生命周期函数--监听页面加载 */</span></span><br><span class="line"><span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123; </span><br><span class="line">  <span class="comment">// 通过声明式导航和编程式导航 都可以 </span></span><br><span class="line">  <span class="comment">// 在onLoad声明周期函数中获取传递的参数 </span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(options); </span><br><span class="line">  <span class="comment">// 将导航传递的参数转存在data中 </span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123; </span><br><span class="line">    <span class="attr">query</span>: options </span><br><span class="line">  &#125;) </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="8-页面事件"><a href="#8-页面事件" class="headerlink" title="8. 页面事件"></a>8. 页面事件</h3><h4 id="8-1-下拉刷新事件"><a href="#8-1-下拉刷新事件" class="headerlink" title="8.1 下拉刷新事件"></a>8.1 下拉刷新事件</h4><ol><li>什么是下拉刷新</li></ol><p>下拉刷新是移动端的专有名词，指的是通过手指在屏幕上的下拉滑动操作，从而重新加载页面数据的行</p><p>为。</p><ol><li>启用下拉刷新</li></ol><p>启用下拉刷新有两种方式：</p><p>① 全局开启下拉刷新</p><p>在 app.json 的 window 节点中，将 enablePullDownRefresh 设置为 true</p><p>② 局部开启下拉刷新</p><p>在页面的 .json 配置文件中，将 enablePullDownRefresh 设置为 true</p><p>在实际开发中，推荐使用第 2 种方式，为需要的页面单独开启下拉刷新的效果。</p><ol><li>配置下拉刷新窗口的样式</li></ol><p>在全局或页面的 .json 配置文件中，通过 backgroundColor 和 backgroundTextStyle 来配置下拉</p><p>刷新窗口</p><p>的样式，其中：</p><p>backgroundColor 用来配置下拉刷新窗口的背景颜色，仅支持16 进制的颜色值</p><p>backgroundTextStyle 用来配置下拉刷新 loading 的样式，仅支持 dark 和 light</p><ol><li>监听页面的下拉刷新事件</li></ol><p>在页面的 .js 文件中，通过 onPullDownRefresh() 函数即可监听当前页面的下拉刷新事件。</p><p>例如，在页面的 wxml 中有如下的 UI 结构，点击按钮可以让 count 值自增 +1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt; count的值为： &#123;&#123;count&#125;&#125; &lt;/view&gt;</span><br><span class="line">&lt;button bindtap=&quot;addCount&quot;&gt;+1&lt;/button&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="comment">/** * 页面的初始数据 */</span> </span><br><span class="line">  <span class="attr">data</span>: &#123; </span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span> </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 点击按钮 count自增加1事件 </span></span><br><span class="line">  addCount () &#123; </span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123; </span><br><span class="line">      <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">count</span> +<span class="number">1</span> </span><br><span class="line">    &#125;) </span><br><span class="line">  &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在触发页面的下拉刷新事件的时候，如果要把 count 的值重置为 0</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** 页面相关事件处理函数--监听用户下拉动作 */</span> </span><br><span class="line"><span class="attr">onPullDownRefresh</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; </span><br><span class="line">  <span class="comment">// 触发了下拉刷新事件就会立即调用该方法 </span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;触发了下拉刷新&quot;</span>); </span><br><span class="line">  <span class="comment">// 触发了下拉刷洗就将data中的count重置为0 </span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span> </span><br><span class="line">  &#125;) </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ol><li>停止下拉刷新的效果</li></ol><p>当处理完下拉刷新后，下拉刷新的 loading 效果会一直显示，不会主动消失，所以需要手动隐藏下拉</p><p>刷新的loading 效果。此时，调用 wx.stopPullDownRefresh() 可以停止当前页面的下拉刷新。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** 页面相关事件处理函数--监听用户下拉动作 */</span> </span><br><span class="line"><span class="attr">onPullDownRefresh</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; </span><br><span class="line">  wx.<span class="title function_">request</span>(&#123; </span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, </span><br><span class="line">    <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123; </span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">XXX</span>: res.<span class="property">data</span></span><br><span class="line">        <span class="comment">// 数值处理完毕，就可以关闭下拉刷新的事件了 </span></span><br><span class="line">        wx.<span class="title function_">stopPullDownRefresh</span>() </span><br><span class="line">      &#125;) </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;) </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="8-2-上拉触底事件"><a href="#8-2-上拉触底事件" class="headerlink" title="8.2 上拉触底事件"></a>8.2 上拉触底事件</h4><ol><li>什么是上拉触底</li></ol><p>上拉触底是移动端的专有名词，通过手指在屏幕上的上拉滑动操作，从而加载更多数据的行为。</p><ol><li>监听页面的上拉触底事件</li></ol><p>在页面的 .js 文件中，通过 onReachBottom() 函数即可监听当前页面的上拉触底事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** 页面上拉触底事件的处理函数 */</span></span><br><span class="line"><span class="attr">onReachBottom</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">/*上拉触底事件不需要开启，直接监听就可以 </span></span><br><span class="line"><span class="comment">  在全局配置的window节点中或者页面的配置文件中可设置触底距离： </span></span><br><span class="line"><span class="comment">  上拉触底的距离：默认50像素，单位省去,我们会在触发了上拉触底事件时获取下一页的数据 </span></span><br><span class="line"><span class="comment">  &quot;onReachBottomDistance&quot;: 50 */</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;触发了上拉触底事件&quot;</span>); </span><br><span class="line">  <span class="comment">/*在上拉触底事件中，需要做节流处理 防止频繁触发该事件导致频繁发起请求 */</span> </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ol><li>配置上拉触底距离</li></ol><p>上拉触底距离指的是触发上拉触底事件时，滚动条距离页面底部的距离。</p><p>可以在全局或页面的 .json 配置文件中，通过 onReachBottomDistance 节点来配置上拉触底的距</p><p>离。小程序默认的触底距离是 50px ，在实际开发中，可以根据自己的需求修改这个默认值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--pages/contact/contact.wxml--&gt;</span><br><span class="line">&lt;view class=&quot;num-item&quot; wx:for=&quot;&#123;&#123;colorList&#125;&#125;&quot; wx:key=&quot;index&quot; style=&quot;background-color: rgba(&#123;&#123;item&#125;&#125;);&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/view&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/* pages/contact/contact.wxss */</span><br><span class="line">.num-item &#123;</span><br><span class="line">  border: 1rpx solid #efefef;</span><br><span class="line">  border-radius: 8rpx;</span><br><span class="line">  line-height: 200rpx;</span><br><span class="line">  height: 200rpx;</span><br><span class="line">  margin: 15rpx;</span><br><span class="line">  text-align: center;</span><br><span class="line">  text-shadow: 0rpx 0rpx 5rpx #fff;</span><br><span class="line">  box-shadow: 1rpx 1rpx 5rpx #efefef;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages/contact/contact.js</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">colorList</span>: [],</span><br><span class="line">    <span class="attr">isLoading</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">getColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 展示loading</span></span><br><span class="line">    wx.<span class="title function_">showLoading</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;数据加载中...&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 开启节流阀</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">isLoading</span>: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 发起网络请求</span></span><br><span class="line">    wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;https://applet-base-api-t.itheima.net/api/color&#x27;</span>,</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">&#123; data: res &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">          <span class="comment">// 使用展开运算符获取到每一个数据，再将数据进行拼接</span></span><br><span class="line">          <span class="attr">colorList</span>: [...<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">colorList</span>, ...res.<span class="property">data</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 无论成功与否都会调用该方法</span></span><br><span class="line">      <span class="attr">complete</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 隐藏loading效果</span></span><br><span class="line">        wx.<span class="title function_">hideLoading</span>()</span><br><span class="line">        <span class="comment">// 关闭节流阀</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">          <span class="attr">isLoading</span>: <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">onLoad</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getColor</span>()</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面上拉触底事件的处理函数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">onReachBottom</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">isLoading</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getColor</span>()</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="9-生命周期"><a href="#9-生命周期" class="headerlink" title="9. 生命周期"></a>9. 生命周期</h3><h4 id="9-1-生命周期函数的分类"><a href="#9-1-生命周期函数的分类" class="headerlink" title="9.1 生命周期函数的分类"></a>9.1 生命周期函数的分类</h4><p>小程序中的生命周期函数分为两类，分别是：</p><p>① 应用的生命周期函数</p><p>特指小程序从启动 -&gt; 运行 -&gt; 销毁期间依次调用的那些函数</p><p>② 页面的生命周期函数</p><p>特指小程序中，每个页面从加载 -&gt; 渲染 -&gt; 销毁期间依次调用的那些函数</p><p>小程序的应用生命周期函数需要在 app.js 中进行声明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/*** 当小程序初始化完成时，会触发 onLaunch（全局只触发一次） */</span><br><span class="line">onLaunch: function () &#123;</span><br><span class="line">  console.log(&quot;onLaunch&quot;) </span><br><span class="line">&#125;,</span><br><span class="line">/*** 当小程序启动，或从后台进入前台显示，会触发 onShow * 前台：手机打开该小程序就处于前台运行 * 后台：手机回到主页，且未关闭小程序，此时小程序就处于后台运行 */</span><br><span class="line">onShow: function (options) &#123;</span><br><span class="line">  console.log(&quot;onShow&quot;)</span><br><span class="line">&#125;,</span><br><span class="line">/*** 当小程序从前台进入后台，会触发 onHide */</span><br><span class="line">onHide: function () &#123;</span><br><span class="line">    console.log(&quot;onHide&quot;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>小程序的页面生命周期函数需要在页面的 .js 文件中进行声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** 生命周期函数--监听页面加载,一个页面只调用一次 */</span></span><br><span class="line"><span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123; &#125;,</span><br><span class="line"><span class="comment">/*** 生命周期函数--监听页面初次渲染完成，一个页面只调用一次 */</span></span><br><span class="line"><span class="attr">onReady</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;,</span><br><span class="line"><span class="comment">/*** 生命周期函数--监听页面显示 */</span></span><br><span class="line"><span class="attr">onShow</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;,</span><br><span class="line"><span class="comment">/*** 生命周期函数--监听页面隐藏 */</span></span><br><span class="line"><span class="attr">onHide</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;,</span><br><span class="line"><span class="comment">/*** 生命周期函数--监听页面卸载，一个页面只调用一次 */</span></span><br><span class="line"><span class="attr">onUnload</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;,</span><br></pre></td></tr></table></figure><h3 id="10-wxs"><a href="#10-wxs" class="headerlink" title="10.wxs"></a>10.wxs</h3><h4 id="10-1-wxs-的应用场景"><a href="#10-1-wxs-的应用场景" class="headerlink" title="10.1 wxs 的应用场景"></a>10.1 wxs 的应用场景</h4><p>wxml 中无法调用在页面的 .js 中定义的函数（不包括事件绑定），但是， wxml 中可以调用 wxs 中</p><p>定义的函数。因此，小程序中 wxs 的典型应用场景就是“过滤器”。</p><h4 id="10-2-wxs-和-JavaScript-的关系"><a href="#10-2-wxs-和-JavaScript-的关系" class="headerlink" title="10.2 wxs 和 JavaScript 的关系"></a>10.2 wxs 和 JavaScript 的关系</h4><p>虽然 wxs 的语法类似于 JavaScript ，但是 wxs 和 JavaScript 是完全不同的两种语言：</p><p>① wxs 有自己的数据类型</p><p>number 数值类型、 string 字符串类型、 boolean 布尔类型、 object 对象类型、</p><p>function 函数类型、 array 数组类型、 date 日期类型、 regexp 正则</p><p>② wxs 不支持类似于 ES6 及以上的语法形式</p><p>不支持： let 、 const 、解构赋值、展开运算符、箭头函数、对象属性简写、etc…</p><p>支持： var 定义变量、普通 function 函数等类似于 ES5 的语法</p><p>③ wxs 遵循 CommonJS 规范</p><p>module 对象</p><p>require() 函数</p><p>module.exports 对象</p><h4 id="10-3-基础语法"><a href="#10-3-基础语法" class="headerlink" title="10.3 基础语法"></a>10.3 基础语法</h4><ol><li>内嵌 wxs 脚本</li></ol><p>wxs 代码可以编写在 wxml 文件中的 标签内，就像 Javascript 代码可以编写在 html 文件中的 标</p><p>签内一样。</p><p>wxml 文件中的每个 标签，必须提供 module 属性，用来指定当前 wxs 的模块名称，方便在</p><p>wxml 中访问模块中的成员：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 定义一个文本，调用wxs中的方法 --&gt;</span><br><span class="line">&lt;view&gt;&#123;&#123; m1.toUpper(username) &#125;&#125;&lt;/view&gt;</span><br><span class="line">&lt;!-- 定义一个wxs的标签，并指定module模块名称 --&gt;</span><br><span class="line">&lt;wxs module=&quot;m1&quot;&gt;</span><br><span class="line">&lt;!-- 向外暴露一个方法 --&gt;</span><br><span class="line">module.exports.toUpper = function(str) &#123;</span><br><span class="line">return str.toUpperCase() </span><br><span class="line">&#125; </span><br><span class="line">&lt;/wxs&gt;</span><br></pre></td></tr></table></figure><ol><li>外联的 wxs 脚本</li></ol><p>wxs 代码还可以编写在以 .wxs 为后缀名的文件内，就像 Javascript 代码可以编写在以 .js 为后缀名的文件中一样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.定义方法 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toLower</span>(<span class="params">str</span>) &#123; </span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">toLowerCase</span>() </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.暴露成员 </span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; </span><br><span class="line">  <span class="attr">toLower</span>: toLower </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 wxml 中引入外联的 wxs 脚本时，必须为 标签添加 module 和 src 属性，其中：</p><p>module 用来指定模块的名称</p><p>src 用来指定要引入的脚本的路径，且必须是相对路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 1.使用外联式引入外部的wxs文件 --&gt;</span><br><span class="line">&lt;wxs module=&quot;m2&quot; src=&quot;../../utils/tools.wxs&quot;&gt;&lt;/wxs&gt; </span><br><span class="line">&lt;!-- 2.调用 m2 模块的方法 --&gt;</span><br><span class="line">&lt;view&gt;&#123;&#123; m2.toLower(country) &#125;&#125;&lt;/view&gt;</span><br></pre></td></tr></table></figure><h4 id="10-4-WXS-的特点"><a href="#10-4-WXS-的特点" class="headerlink" title="10.4 WXS 的特点"></a>10.4 WXS 的特点</h4><ol><li>与 JavaScript 不同</li></ol><p>为了降低 wxs （ WeiXin Script ）的学习成本， wxs 语言在设计时借大量鉴了 JavaScript 的语</p><p>法。但是本质上， wxs 和 JavaScript 是完全不同的两种语言！</p><ol><li>不能作为组件的事件回调</li></ol><p>wxs 典型的应用场景就是“过滤器”，经常配合 Mustache 语法进行使用，例如：</p><p>但是，在 wxs 中定义的函数不能作为组件的事件回调函数。例如，下面的用法是错误的：</p><ol><li>隔离性</li></ol><p>隔离性指的是 wxs 的运行环境和其他 JavaScript 代码是隔离的。体现在如下两方面：</p><p>① wxs 不能调用 js 中定义的函数</p><p>② wxs 不能调用小程序提供的 API</p><ol><li>性能好</li></ol><p>在 iOS 设备上，小程序内的 WXS 会比 JavaScript 代码快 2 ~ 20 倍 </p><p>在 Android 设备上，二者的运行效率无差异</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--pages/home/home.wxml--&gt;</span><br><span class="line">&lt;!-- 轮播图 --&gt;</span><br><span class="line">&lt;swiper indicator-dots circular autoplay&gt;</span><br><span class="line">  &lt;swiper-item wx:for=&quot;&#123;&#123; swiperList &#125;&#125;&quot; wx:key=&quot;id&quot;&gt;</span><br><span class="line">    &lt;image src=&quot;&#123;&#123;item.image&#125;&#125;&quot;&gt;&lt;/image&gt;</span><br><span class="line">  &lt;/swiper-item&gt;</span><br><span class="line">&lt;/swiper&gt;</span><br><span class="line">&lt;!-- 九宫格 --&gt;</span><br><span class="line">&lt;view class=&quot;gird-list&quot;&gt;</span><br><span class="line">  &lt;navigator class=&quot;gird-item&quot; wx:for=&quot;&#123;&#123;girdList&#125;&#125;&quot; wx:key=&quot;id&quot; url=&quot;/pages/shopList/shopList?id=&#123;&#123;item.id&#125;&#125;&amp;title=&#123;&#123;item.name&#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;image src=&quot;&#123;&#123;item.icon&#125;&#125;&quot;&gt;&lt;/image&gt;</span><br><span class="line">    &lt;text&gt;&#123;&#123;item.name&#125;&#125;&lt;/text&gt;</span><br><span class="line">  &lt;/navigator&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;!-- 图片 --&gt;</span><br><span class="line">&lt;view class=&quot;img-box&quot;&gt;</span><br><span class="line">  &lt;image src=&quot;/images/link-01.png&quot;&gt;&lt;/image&gt;</span><br><span class="line">  &lt;image src=&quot;/images/link-02.png&quot;&gt;&lt;/image&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages/home/home.js</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">swiperList</span>: [],</span><br><span class="line">    <span class="attr">girdList</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">onLoad</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getSwiperList</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getGirdList</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 轮播图</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">getSwiperList</span>(<span class="params"></span>) &#123;</span><br><span class="line">    wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;https://applet-base-api-t.itheima.net/slides&#x27;</span>,</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">          <span class="attr">swiperList</span>: res.<span class="property">data</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 九宫格</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">getGirdList</span>(<span class="params"></span>) &#123;</span><br><span class="line">    wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;https://applet-base-api-t.itheima.net/categories&#x27;</span>,</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">          <span class="attr">girdList</span>: res.<span class="property">data</span></span><br><span class="line">        &#125;)</span><br><span class="line">        wx.<span class="title function_">stopPullDownRefresh</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面相关事件处理函数--监听用户下拉动作</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">onPullDownRefresh</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getGirdList</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// pages/shopList/shopList.wxml</span><br><span class="line">&lt;view wx:for=&quot;&#123;&#123;shopList&#125;&#125;&quot; wx:key=&quot;index&quot; class=&quot;shop-item&quot;&gt;</span><br><span class="line">  &lt;view class=&quot;thumb&quot;&gt;</span><br><span class="line">    &lt;image src=&quot;&#123;&#123;item.images[0]&#125;&#125;&quot;&gt;&lt;/image&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view class=&quot;info&quot;&gt;</span><br><span class="line">    &lt;text class=&quot;shop-title&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/text&gt;</span><br><span class="line">    &lt;text&gt;电话：&#123;&#123;tools.splitPhone(item.phone)&#125;&#125;&lt;/text&gt;</span><br><span class="line">    &lt;text&gt;地址：&#123;&#123;item.address&#125;&#125;&lt;/text&gt;</span><br><span class="line">    &lt;text&gt;营业时间：&#123;&#123;item.businessHours&#125;&#125;&lt;/text&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;wxs module=&quot;tools&quot; src=&quot;../../utils/tools.wxs&quot;&gt;&lt;/wxs&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">/* pages/shopList/shopList.wxss */</span><br><span class="line">page &#123;</span><br><span class="line">  background: #efefef;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.shop-item &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  padding: 15rpx;</span><br><span class="line">  margin: 15rpx;</span><br><span class="line">  border: 1px solid #efefef;</span><br><span class="line">  border-radius: 10rpx;</span><br><span class="line">  background: #fff;</span><br><span class="line">  box-shadow: 1rpx 1rpx 15rpx #ddd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.thumb image &#123;</span><br><span class="line">  width: 250rpx;</span><br><span class="line">  height: 250rpx;</span><br><span class="line">  display: block;</span><br><span class="line">  margin-right: 10rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.info &#123;</span><br><span class="line">  margin-left: 10rpx;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  font-size: 24rpx;</span><br><span class="line">  /* font-weight: 700; */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.shop-title &#123;</span><br><span class="line">  /* font-size: 32rpx; */</span><br><span class="line">  font-weight: 700;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages/shopList/shopList.js</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">query</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">shopList</span>: [],</span><br><span class="line">    <span class="attr">page</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">pageSize</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">total</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">isLoading</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">getShopList</span>(<span class="params"></span>) &#123;</span><br><span class="line">    wx.<span class="title function_">showLoading</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;数据加载中...&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">isLoading</span>: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">`https://applet-base-api-t.itheima.net/categories/<span class="subst">$&#123;<span class="variable language_">this</span>.data.query.id&#125;</span>/shops`</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">_page</span>: <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">page</span>,</span><br><span class="line">        <span class="attr">_limit</span>: <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">pageSize</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">          <span class="attr">shopList</span>: [...<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">shopList</span>, ...res.<span class="property">data</span>],</span><br><span class="line">          <span class="attr">total</span>: res.<span class="property">header</span>[<span class="string">&#x27;X-Total-Count&#x27;</span>] - <span class="number">0</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">        wx.<span class="title function_">stopPullDownRefresh</span>()</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">complete</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        wx.<span class="title function_">hideLoading</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">          <span class="attr">isLoading</span>: <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">onLoad</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">query</span>: options</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getShopList</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面初次渲染完成</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">onReady</span>(<span class="params"></span>) &#123;</span><br><span class="line">    wx.<span class="title function_">setNavigationBarTitle</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">query</span>.<span class="property">title</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面相关事件处理函数--监听用户下拉动作</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">onPullDownRefresh</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="comment">// 重置页码为1 </span></span><br><span class="line">      <span class="attr">page</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="comment">// 清空原有数据，否则我们获取的数据会被追加在末尾 </span></span><br><span class="line">      <span class="attr">shopList</span>: [],</span><br><span class="line">      <span class="comment">// 清空总数 </span></span><br><span class="line">      <span class="attr">total</span>: <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getShopList</span>()</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面上拉触底事件的处理函数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">onReachBottom</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">shopList</span>.<span class="property">length</span> &gt;= <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">total</span>) <span class="keyword">return</span> wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;没有更多了...&#x27;</span>,</span><br><span class="line">      <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">isLoading</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">page</span>: <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">page</span> + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getShopList</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="11-组件"><a href="#11-组件" class="headerlink" title="11. 组件"></a>11. 组件</h3><h4 id="11-1-创建组件"><a href="#11-1-创建组件" class="headerlink" title="11.1 创建组件"></a>11.1 创建组件</h4><p>① 在项目的根目录中，鼠标右键，创建 components -&gt; test 文件夹</p><p>② 在新建的 components -&gt; test 文件夹上，鼠标右键，点击“新建 Component ” </p><p>③ 键入组件的名称之后回车，会自动生成组件对应的 4 个文件，后缀名分别为 .js ， .json ， .wxml 和 .wxss</p><h4 id="11-2-局部引用组件"><a href="#11-2-局部引用组件" class="headerlink" title="11.2 局部引用组件"></a>11.2 局部引用组件</h4><p>在页面的 .json 配置文件中引用组件的方式，叫做“局部引用”。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> </span><br><span class="line">  <span class="attr">&quot;usingComponents&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">    <span class="attr">&quot;my-test1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/components/test/test&quot;</span> </span><br><span class="line">  <span class="punctuation">&#125;</span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>其中 my-test1 就是组件使用时的标签名, 而 &#x2F;components&#x2F;test&#x2F;test 就是组件的路径</p><h4 id="11-3-全局引用组件"><a href="#11-3-全局引用组件" class="headerlink" title="11.3 全局引用组件"></a>11.3 全局引用组件</h4><p>在 app.json 全局配置文件中引用组件的方式，叫做“全局引用”。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;usingComponents&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">  <span class="attr">&quot;my-test2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/components/test2/test2&quot;</span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="11-4-组件和页面的区别"><a href="#11-4-组件和页面的区别" class="headerlink" title="11.4 组件和页面的区别"></a>11.4 组件和页面的区别</h4><p>从表面来看，组件和页面都是由 .js 、 .json 、 .wxml 和 .wxss 这四个文件组成的。但是，组件和页面的 .js 与 .json 文件有明显的不同：</p><p>1.组件的 .json 文件中需要声明 “component”: true 属性</p><p>2.组件的 .js 文件中调用的是 Component() 函数</p><p>​整个程序启动调用的是 App()</p><p>​某个页面的渲染调用的是 Page()</p><p>​某个组件的渲染调用的是 Component()</p><p>3.组件的事件处理函数需要定义到 methods 节点中</p><h4 id="11-5-组件的样式"><a href="#11-5-组件的样式" class="headerlink" title="11.5 组件的样式"></a>11.5 组件的样式</h4><h5 id="11-5-1-组件样式隔离"><a href="#11-5-1-组件样式隔离" class="headerlink" title="11.5.1 组件样式隔离"></a>11.5.1 组件样式隔离</h5><p>默认情况下，自定义组件的样式只对当前组件生效，不会影响到组件之外的 UI 结构</p><p>​组件 A 的样式不会影响组件 C 的样式</p><p>​组件 A 的样式不会影响小程序页面的样式</p><p>​小程序页面的样式不会影响组件 A 和 C 的样式</p><p>组件样式的隔离性的好处有：</p><p>① 防止外界的样式影响组件内部的样式</p><p>② 防止组件的样式破坏外界的样式</p><h5 id="11-5-2-组件样式隔离的注意点"><a href="#11-5-2-组件样式隔离的注意点" class="headerlink" title="11.5.2 组件样式隔离的注意点"></a>11.5.2 组件样式隔离的注意点</h5><p>app.wxss 中的全局样式对组件无效</p><p>只有 class 选择器会有样式隔离效果， id 选择器、属性选择器、标签选择器不受样式隔离的影</p><p>响</p><p>建议：在组件和引用组件的页面中建议使用 class 选择器，不要使用 id、属性、标签选择器！因为在绝</p><p>大多数情况下, 我们希望组件的样式是隔离开的</p><h5 id="11-5-3-修改组件的样式隔离选项"><a href="#11-5-3-修改组件的样式隔离选项" class="headerlink" title="11.5.3 修改组件的样式隔离选项"></a>11.5.3 修改组件的样式隔离选项</h5><p>默认情况下，自定义组件的样式隔离特性能够防止组件内外样式互相干扰的问题。</p><p>但有时，我们希望在外界能够控制组件内部的样式，此时，可以通过 styleIsolation 修改组件的样式隔离选项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在组件的.js 文件中新增加如下配置</span></span><br><span class="line"><span class="title class_">Component</span>(&#123; </span><br><span class="line">  <span class="attr">options</span>: &#123; </span><br><span class="line">    <span class="comment">// 默认值isolated: 代表启动样式隔离 </span></span><br><span class="line">    <span class="comment">// apply-shared: 代表页面wxss样式将影响自定义组件 </span></span><br><span class="line">    <span class="comment">// shared: 代表双向的影响 </span></span><br><span class="line">    <span class="attr">styleIsolation</span>: <span class="string">&#x27;isolated&#x27;</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 或在组件的.json 文件中新增加如下配置 </span></span><br><span class="line">&#123; </span><br><span class="line">  <span class="string">&quot;styleIsolation&quot;</span>: <span class="string">&quot;isolated&quot;</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11-5-4-styleIsolation-的可选值"><a href="#11-5-4-styleIsolation-的可选值" class="headerlink" title="11.5.4 styleIsolation 的可选值"></a>11.5.4 styleIsolation 的可选值</h5><p>可选值默认值描述</p><p>isolated是表示启用样式隔离，在自定义组件内外，使用class指定的样式将不会互相影响</p><p>apply-shared否表示页面wxss样式将影响到自定义组件 ，但自定义组件wxss中指定的样式不会影响页面</p><p>shared否表示页面wxss样式将影响到自定义组件，自定义组件wxss中指定的样式也会影响页面和其他设置了apply-shared或shared的自定义组件</p><h4 id="11-6-组件的数据、方法和属性"><a href="#11-6-组件的数据、方法和属性" class="headerlink" title="11.6 组件的数据、方法和属性"></a>11.6 组件的数据、方法和属性</h4><h5 id="11-6-1-data-数据"><a href="#11-6-1-data-数据" class="headerlink" title="11.6.1 data 数据"></a>11.6.1 data 数据</h5><p>在小程序组件中，用于组件模板渲染的私有数据，需要定义到 data 节点中</p><h5 id="11-6-2-methods-方法"><a href="#11-6-2-methods-方法" class="headerlink" title="11.6.2 methods 方法"></a>11.6.2 methods 方法</h5><p>在小程序组件中，事件处理函数和自定义方法需要定义到 methods 节点中</p><h5 id="11-6-3-properties-属性"><a href="#11-6-3-properties-属性" class="headerlink" title="11.6.3 properties 属性"></a>11.6.3 properties 属性</h5><p>在小程序组件中， properties 是组件的对外属性，用来接收外界(父组件)传递到组件中的数据</p><p>当子组件接收到父组件传递过来的数据, 就可以通过判断父组件传递的数据，来控制事件的处理</p><h5 id="11-6-4-data-和-properties-的区别"><a href="#11-6-4-data-和-properties-的区别" class="headerlink" title="11.6.4 data 和 properties 的区别"></a>11.6.4 data 和 properties 的区别</h5><p>在小程序的组件中， properties 属性和 data 数据的用法相同，它们都是可读可写的，只不过：</p><p>​data 更倾向于存储组件的私有数据</p><p>​properties 更倾向于存储外界传递到组件中的数据</p><p>​所以, 也不太建议修改 properties 数据,</p><p>​如果要修改 properties 的数据, 最好通过子组件通信给父组件的方式实现</p><h5 id="11-6-5-修改-properties-的值"><a href="#11-6-5-修改-properties-的值" class="headerlink" title="11.6.5 修改 properties 的值"></a>11.6.5 修改 properties 的值</h5><p>由于 data 数据和 properties 属性在本质上没有任何区别，因此 properties 属性的值也可以用于页面渲染，或使用 setData 为 properties 中的属性重新赋值</p><h3 id="12-数据监听器"><a href="#12-数据监听器" class="headerlink" title="12.数据监听器"></a>12.数据监听器</h3><p>数据监听器用于监听和响应任何属性和数据字段的变化，从而执行特定的操作。它的作用类似于 vue 中的 watch 侦听器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Components</span>(&#123; </span><br><span class="line">  <span class="comment">// observers: 观察者 </span></span><br><span class="line">  <span class="attr">observers</span>: &#123; </span><br><span class="line">    <span class="string">&#x27;字段A， 字段B&#x27;</span>: <span class="keyword">function</span>(<span class="params">字段A的新值， 字段B的新值</span>) &#123; </span><br><span class="line">      <span class="comment">// do something </span></span><br><span class="line">    &#125; </span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>监听对象属性的变化</p><p>数据监听器支持监听对象中单个或多个属性的变化</p><p>方式1: 普通方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Components</span>(&#123; </span><br><span class="line">  <span class="comment">// observers: 观察者 </span></span><br><span class="line">  <span class="attr">observers</span>: &#123; </span><br><span class="line">    <span class="string">&#x27;对象.属性A， 对象.属性B&#x27;</span>: <span class="keyword">function</span>(<span class="params">属性A的新值， 属性B的新值</span>) &#123;</span><br><span class="line">      <span class="comment">// 触发此侦听器的 3 种情况： </span></span><br><span class="line">      <span class="comment">// 【为属性A赋值】：使用setData 设置this.data.对象.属性A 时触发 </span></span><br><span class="line">      <span class="comment">// 【为属性B赋值】：使用setData 设置this.data.对象.属性B 时触发 </span></span><br><span class="line">      <span class="comment">// 【为对象赋值】：使用setData 设置this.data.对象 时触发 </span></span><br><span class="line">   &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>方式2: 通配符方式, 监听对象中所有属性的变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">observers</span>: &#123;</span><br><span class="line">  <span class="string">&#x27;_rgb.**&#x27;</span>: <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">fullColor</span>:<span class="string">`<span class="subst">$&#123;obj.r&#125;</span>, <span class="subst">$&#123;obj.g&#125;</span>, <span class="subst">$&#123;obj.b&#125;</span>`</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-纯数据字段"><a href="#13-纯数据字段" class="headerlink" title="13. 纯数据字段"></a>13. 纯数据字段</h3><p>概念：纯数据字段指的是那些不用于界面渲染的 data 字段。</p><p>应用场景：例如有些情况下，某些 data 中的字段既不会展示在界面上，也不会传递给其他组件，仅仅在当前组件内部使用。带有这种特性的 data 字段适合被设置为纯数据字段。例如之前控制上拉加载更多的节流阀 isLoading 这种类型的数据。</p><p>使用纯数据的好处:纯数据字段有助于提升页面更新的性能。</p><p>因为在小程序中， data 中声明的数据，会具备一个响应式的效果，系统的底层会对数据进行值变化的监听，如果，该数据只是纯数据，没有必要进行响应式的监听，因此定义为纯数据能够提高页面的性能。</p><h4 id="13-1-使用规则"><a href="#13-1-使用规则" class="headerlink" title="13.1 使用规则"></a>13.1 使用规则</h4><p>在 Component 构造器的 options 节点中，指定 pureDataPattern 为一个 正则表达式 ，字段名符合</p><p>这个正则</p><p>表达式的字段将会被视为纯数据字段</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="comment">// 指定所有_开头的数据字段为 纯数据字段</span></span><br><span class="line">    <span class="attr">pureDataPattern</span>: <span class="regexp">/^_/</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="literal">true</span>,<span class="comment">// 普通数据字段</span></span><br><span class="line">    <span class="attr">_b</span>: <span class="literal">true</span><span class="comment">// 纯数据字段</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="14-组件的生命周期"><a href="#14-组件的生命周期" class="headerlink" title="14.组件的生命周期"></a>14.组件的生命周期</h3><h4 id="14-1-组件自身的声明周期"><a href="#14-1-组件自身的声明周期" class="headerlink" title="14.1 组件自身的声明周期"></a>14.1 组件自身的声明周期</h4><p>在小程序组件中，最重要的生命周期函数是 created 、 attached 、 ready 、 detached。</p><p>① 组件实例刚被创建好的时候， created 生命周期函数会被触发</p><p>此时调用 setData 不会有效果</p><p>通常在这个生命周期函数中，只应该用于给组件的 this 添加一些自定义的属性字段</p><p>② 在组件完全初始化完毕、进入页面节点树后， attached 生命周期函数会被触发</p><p>此时， this.data 已被初始化完毕</p><p>这个生命周期很有用，绝大多数初始化的工作可以在这个时机进行（例如发请求获取初始数据）</p><p>③ 在组件离开页面节点树后， detached 生命周期函数会被触发</p><p>退出一个页面时，会触发页面内每个自定义组件的 detached 生命周期函数</p><p>此时适合做一些清理性质的工作,例如,清除定时器</p><p>④ 代表组件渲染完成的生命周期函数为 ready</p><p>可以操作页面</p><h5 id="lifetimes-节点"><a href="#lifetimes-节点" class="headerlink" title="lifetimes 节点"></a>lifetimes 节点</h5><p>在小程序组件中，生命周期函数可以直接定义在 Component 构造器的第一级参数中，也可以在</p><p>lifetimes 字段内进行声明（这是推荐的方式，其优先级最高）</p><h4 id="14-2-组件所在页面的生命周期"><a href="#14-2-组件所在页面的生命周期" class="headerlink" title="14.2 组件所在页面的生命周期"></a>14.2 组件所在页面的生命周期</h4><p>自定义组件的行为依赖于页面状态的变化，此时就需要用到组件所在页面的生命周期。</p><p>组件所在页面的生命周期函数有如下 3 个，分别是：</p><p>声明周期函数参数描述</p><p>show无组件所在的页面被展示是执行</p><p>hide无组件所在的页面被隐藏是执行</p><p>resizeObject Size组件所在的页面尺寸变化是执行</p><h5 id="14-2-1-pageLifetimes-节点"><a href="#14-2-1-pageLifetimes-节点" class="headerlink" title="14.2.1  pageLifetimes 节点"></a>14.2.1  pageLifetimes 节点</h5><p>组件所在页面的生命周期函数，需要定义在 pageLifetimes 节点中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="comment">// 组件在页面的生命周期函数在该节点定义</span></span><br><span class="line">  <span class="attr">pageLifetimes</span>: &#123;</span><br><span class="line">    show () &#123;&#125;,<span class="comment">// 页面被展示</span></span><br><span class="line">    hide () &#123;&#125;, <span class="comment">// 页面被隐藏</span></span><br><span class="line">    resize () &#123;&#125; <span class="comment">// 页面尺寸变化</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="15-插槽"><a href="#15-插槽" class="headerlink" title="15.插槽"></a>15.插槽</h3><p>插槽：在自定义组件的 wxml 结构中，可以提供一个 节点（插槽），用于承载组件使用者提供的 wxml 结构。</p><h4 id="15-1启用-多个插槽"><a href="#15-1启用-多个插槽" class="headerlink" title="15.1启用 多个插槽"></a>15.1启用 多个插槽</h4><p>在小程序的自定义组件中，需要使用多 插槽时，可以在组件的 .js 文件中，通过如下方式进行启用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">multipleSolts</span>: <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 在组件定义时的选项中启用多 slot支持</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">properties</span>: &#123; <span class="comment">/* ...*/</span> &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123; <span class="comment">/* ...*/</span> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>一旦开启了多个插槽的配置, 就意味着在组件内部可能会有多个标签, 那我们在定义这多个标签的时候,</p><p>需要给每一个起名字.而组件使用者在填充的时候, 需要指明填充哪一个</p><h4 id="15-2定义-多个插槽"><a href="#15-2定义-多个插槽" class="headerlink" title="15.2定义 多个插槽"></a>15.2定义 多个插槽</h4><p>可以在组件的 .wxml 中使用多个 标签，以不同的 name 来区分不同的插槽。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class=&quot;wrapper&quot;&gt;</span><br><span class="line">&lt;!-- name 为 before 的第一个 插槽 --&gt;</span><br><span class="line">&lt;slot name=&quot;before&quot;&gt;&lt;/slot&gt;</span><br><span class="line">&lt;view&gt;这是一段固定的文本内容&lt;/view&gt;</span><br><span class="line">&lt;!-- name 为 after 的第一个 插槽 --&gt;</span><br><span class="line">&lt;slot name=&quot;after&quot;&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>在使用带有多个插槽的自定义组件时，需要用 slot 属性来将节点插入到不同的中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 组件的使用者 --&gt;</span><br><span class="line">&lt;component-tag-name&gt;</span><br><span class="line">&lt;!-- 这部分内容将被放置在组件的&lt;slot&gt;的位置上 --&gt;</span><br><span class="line">&lt;view slot=&quot;before&quot;&gt;这是通过插槽填充的内容,name为before&lt;/view&gt;</span><br><span class="line">&lt;view slot=&quot;after&quot;&gt;这是通过插槽填充的内容,name为after&lt;/view&gt;</span><br><span class="line">&lt;/component-tag-name&gt;</span><br></pre></td></tr></table></figure><h3 id="16-父子组件之间的通信"><a href="#16-父子组件之间的通信" class="headerlink" title="16.父子组件之间的通信"></a>16.父子组件之间的通信</h3><h4 id="16-1-父子组件之间通信的-3-种方式"><a href="#16-1-父子组件之间通信的-3-种方式" class="headerlink" title="16.1 父子组件之间通信的 3 种方式"></a>16.1 父子组件之间通信的 3 种方式</h4><p>① 属性绑定</p><p>用于父组件向子组件的指定属性设置数据，仅能设置 JSON 兼容的数据(只能传递数据，不能传递方法) </p><p>② 事件绑定</p><p>用于子组件向父组件传递数据，可以传递任意数据(包括数据和方法) </p><p>③ 获取组件实例</p><p>父组件还可以通过 this.selectComponent() 获取子组件实例对象</p><p>这样就可以直接访问子组件的任意数据和方法</p><h4 id="16-2-属性绑定"><a href="#16-2-属性绑定" class="headerlink" title="16.2 属性绑定"></a>16.2 属性绑定</h4><p>属性绑定用于实现父向子传值，而且只能传递普通类型的数据，无法将方法传递给子组件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data: &#123; </span><br><span class="line">// 父组件中的data节点</span><br><span class="line">count: 0</span><br><span class="line">&#125;</span><br><span class="line">// 父组件的wxml结构</span><br><span class="line">&lt;my-test3 count=&quot;&#123;&#123;count&#125;&#125;&quot;&gt;&lt;/my-test3&gt;</span><br><span class="line">&lt;view&gt;------&lt;/view&gt;</span><br><span class="line">&lt;view&gt;父组件中，count值为 &#123;&#123;count&#125;&#125;&lt;/view&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 子组件的properties 节点</span><br><span class="line">properties: &#123;</span><br><span class="line">count: Number</span><br><span class="line">&#125;</span><br><span class="line">// 子组件的wxml结构</span><br><span class="line">&lt;text&gt;子组件中， count值为：&#123;&#123;count&#125;&#125;&lt;/text&gt;</span><br></pre></td></tr></table></figure><h4 id="16-3-事件绑定"><a href="#16-3-事件绑定" class="headerlink" title="16.3 事件绑定"></a>16.3 事件绑定</h4><p>事件绑定用于实现子向父传值，可以传递任何类型的数据。使用步骤如下：</p><p>① 在子组件的 js 中，在特定的时机通过调用 this.triggerEvent (‘自定义事件名称’, { &#x2F;* 参数对象*&#x2F; })产生一个自定义事件, 并且可以带上事件参数对象. </p><p>② 在父组件的 wxml 中的子组件标签中，使用 bind :自定义事件名称&#x3D;”事件处理函数”监听自定义事件。</p><p>③ 在父组件的 js 中，定义一个函数，这个函数即将通过自定义事件的形式，传递给子组件</p><p>④ 在父组件的 事件处理函数中，通过 e.detail 获取到子组件传递过来的数据</p><h4 id="16-4-获取组件实例"><a href="#16-4-获取组件实例" class="headerlink" title="16.4 获取组件实例"></a>16.4 获取组件实例</h4><p>可在父组件里调用 this.selectComponent(“id或class选择器”) ，获取子组件的实例对象，从而直接访问子组件的任意数据和方法。调用时需要传入一个选择器，例如 this.selectComponent(“.my- component”) 。</p><h3 id="17-behaviors"><a href="#17-behaviors" class="headerlink" title="17. behaviors"></a>17. behaviors</h3><h4 id="17-1-什么是-behaviors"><a href="#17-1-什么是-behaviors" class="headerlink" title="17.1 什么是 behaviors"></a>17.1 什么是 behaviors</h4><p>behaviors 是小程序中，用于实现组件间代码共享的特性，类似于 Vue.js 中的 “mixins” 。</p><h4 id="17-2-behaviors-的工作方式"><a href="#17-2-behaviors-的工作方式" class="headerlink" title="17.2 behaviors 的工作方式"></a>17.2 behaviors 的工作方式</h4><p>每个 behaviors 可以包含一组属性、数据、生命周期函数和方法。组件引用它时，它的属性、数据和</p><p>方法会被合并到组件中。</p><p>每个组件可以引用多个 behaviors ， behaviors 也可以引用其它 behaviors 。</p><p>只有当组件共享的代码就可以使用 behaviors 来共享，如果是组件私有的代码，就不需要放在</p><p>behaviors 中</p><h4 id="17-3-创建-behaviors"><a href="#17-3-创建-behaviors" class="headerlink" title="17.3 创建 behaviors"></a>17.3 创建 behaviors</h4><p>调用 Behavior(Object object) 方法即可创建一个共享的 behavior 实例对象，供所有的组件使</p><p>用：</p><p>创建一个文件夹 behaviors</p><p>新建 js 文件 my-behavior.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用 Behavior()方法， 创建实例对象 </span></span><br><span class="line"><span class="comment">// 并使用 module.exports 将 behavior 实例对象共享出去 </span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Behavior</span>(&#123; </span><br><span class="line">  <span class="comment">// 属性节点 </span></span><br><span class="line">  <span class="attr">properties</span>: &#123;&#125;, </span><br><span class="line">  <span class="comment">// 私有数据节点 </span></span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">username</span>: <span class="string">&#x27;zs&#x27;</span> &#125;,</span><br><span class="line">  <span class="comment">// 事件处理函数和自定义方法节点 </span></span><br><span class="line">  <span class="attr">methods</span>: &#123;&#125;, </span><br><span class="line">  <span class="comment">// 其他节点... </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="17-4-导入并使用-behavior"><a href="#17-4-导入并使用-behavior" class="headerlink" title="17.4 导入并使用 behavior"></a>17.4 导入并使用 behavior</h4><p>在组件中，使用 require() 方法导入需要的 behavior ，挂载后即可访问 behavior 中的数据或方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.使用 required() 导入需要的自定义 behavior 模块</span></span><br><span class="line"><span class="keyword">const</span> myBehavior = required(<span class="string">&quot;../../behaviors/my-behavior&quot;</span>) </span><br><span class="line"><span class="comment">// 2.将导入的behavior 实例对象， 挂载在 behaviors 数组节点中， 即可生效 </span></span><br><span class="line"><span class="title class_">Component</span>(&#123; </span><br><span class="line">  <span class="comment">// 在组件内部 与data节点平级的位置定义该属性，挂载behavior模块 </span></span><br><span class="line">  <span class="attr">behaviors</span>: [myBehavior] </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 3.在子组件中使用behavior中的东西 </span></span><br><span class="line">&lt;view&gt;在组件中共享的behavior是： &#123;&#123;username&#125;&#125;&lt;/view&gt;</span><br></pre></td></tr></table></figure><h3 id="18-使用-npm-包"><a href="#18-使用-npm-包" class="headerlink" title="18 使用 npm 包"></a>18 使用 npm 包</h3><h4 id="18-1-小程序对-npm-的支持与限制"><a href="#18-1-小程序对-npm-的支持与限制" class="headerlink" title="18.1 小程序对 npm 的支持与限制"></a>18.1 小程序对 npm 的支持与限制</h4><p>目前，小程序中已经支持使用 npm 安装第三方包，从而来提高小程序的开发效率。</p><p>但是，在小程序中使用 npm 包有如下 3 个限制：</p><p>① 不支持依赖于 Node.js 内置库的包</p><p>② 不支持依赖于浏览器内置对象的包</p><p>③ 不支持依赖于 C++ 插件的包</p><h4 id="18-2-Vant-Weapp"><a href="#18-2-Vant-Weapp" class="headerlink" title="18.2 Vant Weapp"></a>18.2 Vant Weapp</h4><p>Vant Weapp 是有赞前端团队开源的一套小程序 UI 组件库，助力开发者快速搭建小程序应用。它所使用的是 MIT 开源许可协议。</p><h5 id="18-2-1-安装-Vant-组件库"><a href="#18-2-1-安装-Vant-组件库" class="headerlink" title="18.2.1 安装 Vant 组件库"></a>18.2.1 安装 Vant 组件库</h5><p>在小程序项目中，安装 Vant 组件库主要分为如下几 步：</p><p>① 首先要初始化 package.json 文件</p><p>在项目根目录执行 npm init -y  ，-y 意思是快速下载，不必询问，都是 yes </p><p>② 通过 npm 安装（建议指定版本为@1.3.3）,下载到了项目根目录下的 node-modules </p><p>npm i @vant&#x2F;<a href="mailto:&#119;&#101;&#x61;&#112;&#112;&#x40;&#x31;&#46;&#x33;&#46;&#x33;">&#119;&#101;&#x61;&#112;&#112;&#x40;&#x31;&#46;&#x33;&#46;&#x33;</a> -S –production </p><p>③ 构建 npm 包 ，使用 npm 模块</p><p>④ 修改 app.json </p><p>将 app.json 中的 “style”: “v2” 去除，小程序的新版基础组件强行加上了许多样式，难以去除，不关闭将造成部分组件样式混乱。</p><h5 id="18-2-2-使用-Vant-组件"><a href="#18-2-2-使用-Vant-组件" class="headerlink" title="18.2.2 使用 Vant 组件"></a>18.2.2 使用 Vant 组件</h5><p>安装完 Vant 组件库之后，可以在 app.json 的 usingComponents 节点中引入需要的组件，即可在wxml 中</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.json </span></span><br><span class="line"><span class="attr">&quot;usingComponents&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;van-button&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@vant/weapp/bitton/index&quot;</span> <span class="punctuation">&#125;</span><span class="comment">// 页面的.wxml 结构 &lt;van-button type=&quot;primary&quot;&gt;按钮&lt;/van-button&gt;</span></span><br></pre></td></tr></table></figure><h5 id="18-2-3-定制全局主题样式"><a href="#18-2-3-定制全局主题样式" class="headerlink" title="18.2.3 定制全局主题样式"></a>18.2.3 定制全局主题样式</h5><p>在 app.wxss 中，写入 CSS 变量，即可对全局生效</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* app.wxss */</span> </span><br><span class="line"><span class="attr">page</span>: &#123; </span><br><span class="line">  <span class="comment">/* 定制警告按钮的背景颜色 和边框颜色*/</span> </span><br><span class="line">  --button-danger-background-<span class="attr">color</span>: #c00000;</span><br><span class="line">  --button-danger-border-<span class="attr">color</span>: #d60000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="18-3-API-Promise"><a href="#18-3-API-Promise" class="headerlink" title="18.3 API Promise"></a>18.3 API Promise</h4><p>API Promise 化，指的是通过额外的配置，将官方提供的、基于回调函数的异步 API ，升级改造为基于 Promise 的异步 API ，从而提高代码的可读性、维护性，避免回调地狱的问题。</p><p>在小程序中，实现 API Promise 化主要依赖于 miniprogram-api-promise 这个第三方的 npm 包。</p><p>1.安装构建</p><p>npm i –save <a href="mailto:&#x6d;&#105;&#110;&#105;&#x70;&#x72;&#111;&#103;&#114;&#x61;&#x6d;&#45;&#x61;&#x70;&#105;&#x2d;&#112;&#114;&#111;&#109;&#105;&#115;&#x65;&#x40;&#49;&#x2e;&#48;&#46;&#x34;">&#x6d;&#105;&#110;&#105;&#x70;&#x72;&#111;&#103;&#114;&#x61;&#x6d;&#45;&#x61;&#x70;&#105;&#x2d;&#112;&#114;&#111;&#109;&#105;&#115;&#x65;&#x40;&#49;&#x2e;&#48;&#46;&#x34;</a></p><p>2.导入并执行代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在小程序入口文件中（app.js),只需要调用一次 promisifyAll()方法 </span></span><br><span class="line"><span class="comment">// 即可实现异步API 的Promise化 </span></span><br><span class="line"><span class="comment">// 按需导入一个方法 </span></span><br><span class="line"><span class="keyword">import</span> &#123; promisifyAll &#125; <span class="keyword">from</span> <span class="string">&#x27;miniprogram-api-promise&#x27;</span> </span><br><span class="line"><span class="comment">// 声明一个常量，为一个空对象， </span></span><br><span class="line"><span class="comment">// 并在wx顶级对象下添加一个属性p也指向该空对象，使所有成员都可以使用该对象 </span></span><br><span class="line"><span class="keyword">const</span> wxp = wx.<span class="property">p</span> = &#123;&#125; </span><br><span class="line"><span class="comment">// promisify all wx&#x27;s api </span></span><br><span class="line"><span class="comment">// 参数1： wx顶级对象 </span></span><br><span class="line"><span class="comment">// 参数2： wxp指向一个空对象 </span></span><br><span class="line"><span class="title function_">promisifyAll</span>(wx, wxp)</span><br></pre></td></tr></table></figure><p>解释上述代码: </p><p>promisifyAll : 做的事就是将 wx 拥有的属性方法都copy并改造了一份给了 wxp 这个对象</p><p>然而, wxp 只是当前 js 文件的一个常量，只能在当前文件使用</p><p>因此：我们在 wx 上挂载一个属性 p 让他和 wxp 指向同一个空对象</p><p>在其他页面或者组件就可以通过全局对象 wx 点出 p 来访问到 wxp</p><p>此时 wx.p 发起异步的请求时，得到的是一个 promise 对象</p><p>那么我们就可以使用 async&#x2F;await 简化Promise语法</p><h3 id="19-全局数据共享"><a href="#19-全局数据共享" class="headerlink" title="19 全局数据共享"></a>19 全局数据共享</h3><p>全局数据共享（又叫做：状态管理）是为了解决组件之间数据共享的问题。</p><p>开发中常用的全局数据共享方案有： Vuex 、 Redux 、 MobX 等。</p><p>在小程序中，可使用 mobx-miniprogram 配合 mobx-miniprogram-bindings 实现全局数据共享。</p><p>其中：</p><p>mobx-miniprogram 用来创建 Store 实例对象</p><p>mobx-miniprogram-bindings 用来把 Store 中的共享数据或方法，绑定到组件或页面中使用</p><p>1.安装MobX</p><p>npm install –save <a href="mailto:&#x6d;&#x6f;&#98;&#120;&#x2d;&#x6d;&#105;&#x6e;&#x69;&#x70;&#x72;&#x6f;&#103;&#x72;&#x61;&#x6d;&#64;&#52;&#x2e;&#49;&#x33;&#x2e;&#x32;">&#x6d;&#x6f;&#98;&#120;&#x2d;&#x6d;&#105;&#x6e;&#x69;&#x70;&#x72;&#x6f;&#103;&#x72;&#x61;&#x6d;&#64;&#52;&#x2e;&#49;&#x33;&#x2e;&#x32;</a> <a href="mailto:&#109;&#111;&#98;&#120;&#x2d;&#x6d;&#105;&#110;&#105;&#x70;&#114;&#x6f;&#103;&#114;&#x61;&#x6d;&#x2d;&#x62;&#x69;&#110;&#x64;&#105;&#110;&#103;&#115;&#64;&#x31;&#46;&#x32;&#x2e;&#x31;">&#109;&#111;&#98;&#120;&#x2d;&#x6d;&#105;&#110;&#105;&#x70;&#114;&#x6f;&#103;&#114;&#x61;&#x6d;&#x2d;&#x62;&#x69;&#110;&#x64;&#105;&#110;&#103;&#115;&#64;&#x31;&#46;&#x32;&#x2e;&#x31;</a></p><p>2.创建 MobX 的 Store 实例</p><p>在项目根目录下新建store文件夹，并且新建 store.js 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按需导入第三方包的方法observable, action </span></span><br><span class="line"><span class="keyword">import</span> &#123; observable, action &#125; <span class="keyword">from</span> <span class="string">&#x27;mobx-miniprogram&#x27;</span> </span><br><span class="line"><span class="comment">// 创建 Store实例对象,并将其导出 </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="title function_">observable</span>(&#123; </span><br><span class="line">  <span class="comment">// 数据字段 numA: 1, numB: 2, </span></span><br><span class="line">  <span class="comment">// 计算属性 </span></span><br><span class="line">  <span class="comment">// 在计算属性的方法前，必须加 get修饰符，代表sum的值是只读的，无法进行修改 </span></span><br><span class="line">  <span class="comment">// 计算属性sum 依赖于numA和numB的值，因此sum函数的返回值就是最终的值 </span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">sum</span>() &#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">numA</span> + <span class="variable language_">this</span>.<span class="property">numB</span> </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 定义actions方法, 用来修改 store中的数据 </span></span><br><span class="line">  <span class="attr">updateNum1</span>: <span class="title function_">action</span>(<span class="keyword">function</span> (<span class="params">step</span>) &#123; </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">numA</span> += step</span><br><span class="line">    &#125;), </span><br><span class="line">  <span class="attr">updateNum2</span>: <span class="title function_">action</span>(<span class="keyword">function</span>(<span class="params">step</span>) &#123; </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">numB</span> += step </span><br><span class="line">  &#125;) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3.在页面中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.首先 导入第三方包，将数据绑定到页面 </span></span><br><span class="line"><span class="keyword">import</span> &#123; createStoreBindings &#125; <span class="keyword">from</span> <span class="string">&#x27;mobx-miniprogram-bindings&#x27;</span> </span><br><span class="line"><span class="comment">// 2.其次 在页面的js文件的头部区域导入容器的数据 </span></span><br><span class="line"><span class="keyword">import</span> &#123; store &#125; <span class="keyword">from</span> <span class="string">&#x27;../../store/store&#x27;</span> </span><br><span class="line"><span class="comment">// 3. 绑定操作：将仓库的东西绑定到当前的页面中，在页面的js文件的Page方法中 </span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="comment">// 上面周期函数--监听页面的加载 </span></span><br><span class="line">  <span class="attr">onLoad</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; </span><br><span class="line">    <span class="comment">// 调用createStoreBindings方法 </span></span><br><span class="line">    <span class="comment">// 参数1： 绑定给谁：当前页面this </span></span><br><span class="line">    <span class="comment">// 参数2： 对象&#123; store(容器)， fields(数据)， actions(修改方法) </span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">storeBindings</span> = <span class="title function_">createStoreBindings</span>(<span class="variable language_">this</span>, &#123; </span><br><span class="line">      <span class="comment">// 映射容器的实例 </span></span><br><span class="line">      store, </span><br><span class="line">      <span class="comment">// 映射容器的数据字段 </span></span><br><span class="line">      <span class="attr">fields</span>: [<span class="string">&#x27;numA&#x27;</span>, <span class="string">&#x27;numB&#x27;</span>, <span class="string">&#x27;sum&#x27;</span>], </span><br><span class="line">      <span class="comment">// 映射容器修改的方法 </span></span><br><span class="line">      <span class="attr">actions</span>: [<span class="string">&#x27;updateNum1&#x27;</span>] </span><br><span class="line">    &#125;) </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 生命周期函数--监听页面的卸载 </span></span><br><span class="line">  <span class="attr">onUnload</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; </span><br><span class="line">    <span class="comment">// 使用this.storeBindings，得到调用createStoreBindings方法的返回值 </span></span><br><span class="line">    <span class="comment">//调用destroyStoreBindings 方法，进行清理销毁的工作 </span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">storeBindings</span>.<span class="title function_">destroyStoreBindings</span>() </span><br><span class="line">  &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用仓库中的数据 --&gt;</span><br><span class="line">&lt;view&gt;&#123;&#123;numA&#125;&#125; + &#123;&#123;numB&#125;&#125; = &#123;&#123;sum&#125;&#125;&lt;/view&gt;</span><br><span class="line">&lt;van-button type=&quot;primary&quot; bindtap=&quot;btnHnadler1&quot;&gt;numA+1&lt;/van-button&gt;</span><br></pre></td></tr></table></figure><p>监听函数btnHandler1的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 页面的js文件中的 tap事件处理函数 </span></span><br><span class="line">btnHnadler1 (e) &#123; </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e) </span><br><span class="line">  <span class="comment">// 使用仓库中的方法，并传递数据 </span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">updateNum1</span>(e.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">step</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.在组件中使用</p><p>1.新建组件文件夹以及组件文件 numbers </p><p>2.全局注册这个组件</p><p>3.在 message 页面中使用子组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//组件的 js 文件</span></span><br><span class="line"><span class="keyword">import</span> &#123; storeBindingsBehavior &#125; <span class="keyword">from</span> <span class="string">&#x27;mobx-miniprogram-bindings&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; store &#125; <span class="keyword">from</span> <span class="string">&#x27;../../store/store&#x27;</span></span><br><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">behaviors</span>: [storeBindingsBehavior],</span><br><span class="line">  <span class="attr">storeBindings</span>: &#123;</span><br><span class="line">    store,</span><br><span class="line">    <span class="attr">fields</span>: &#123;</span><br><span class="line">      <span class="attr">numA</span>: <span class="string">&#x27;numA&#x27;</span>,</span><br><span class="line">      <span class="attr">numB</span>: <span class="string">&#x27;numB&#x27;</span>,</span><br><span class="line">      <span class="attr">sum</span>: <span class="string">&#x27;sum&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">      <span class="attr">updateNum2</span>: <span class="string">&#x27;updateNum2&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//组件的wxml</span><br><span class="line">&lt;view&gt;&#123;&#123;numA&#125;&#125;+&#123;&#123;numB&#125;&#125;=&#123;&#123;sum&#125;&#125;&lt;/view&gt;</span><br><span class="line">&lt;van-button type=&quot;primary&quot; bindtap=&quot;btnHandler2&quot; data-step=&quot;&#123;&#123;1&#125;&#125;&quot;&gt;numB+1&lt;/van-button&gt;</span><br><span class="line">&lt;van-button type=&quot;primary&quot; bindtap=&quot;btnHandler2&quot; data-step=&quot;&#123;&#123;-1&#125;&#125;&quot;&gt;numB-1&lt;/van-button&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//事件处理函数 btnHandler2</span></span><br><span class="line">btnHnadler2 (e) &#123; </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e) </span><br><span class="line">  <span class="comment">// 使用仓库中的方法，并传递数据 </span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">updateNum2</span>(e.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">step</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="20-分包"><a href="#20-分包" class="headerlink" title="20 分包"></a>20 分包</h3><p>分包指的是把一个完整的小程序项目，按照需求划分为不同的子包，在构建时打包成不同的分包，用户在使用时按需进行加载。</p><p>对小程序进行分包的好处主要有以下两点：</p><p>可以优化小程序首次启动的下载时间</p><p>在多团队共同开发时可以更好的解耦协作</p><p>1.分包前项目的构成</p><p>分包前，小程序项目中所有的页面和资源都被打包到了一起，导致整个项目体积过大，影响小程序首次启动的下载时间。</p><p>2.分包后 项目的构成</p><p>分包后，小程序项目由 1 个主包 + 多个分包组成：</p><p>主包：一般只包含项目的启动页面或 TabBar 页面、以及所有分包都需要用到的一些公共资源</p><p>分包：只包含和当前分包有关的页面和私有资源</p><p>3.分包的加载规则</p><p>① 在小程序启动时，默认会下载主包并启动主包内页面</p><p>tabBar 页面需要放到主包中</p><p>② 当用户进入分包内某个页面时，客户端会把对应分包下载下来，下载完成后再进行展示</p><p>非 tabBar 页面可以按照功能的不同，划分为不同的分包之后，进行按需下载</p><p>4.分包的体积限制</p><p>目前，小程序分包的大小有以下两个限制：</p><p>整个小程序所有分包大小不超过 16M （主包 + 所有分包）</p><p>单个分包&#x2F;主包大小不能超过 2M</p><h4 id="20-1使用分包"><a href="#20-1使用分包" class="headerlink" title="20.1使用分包"></a>20.1使用分包</h4><p>1.配置方法</p><p>在 app.json 配置文件中, 新增 subpackages 的节点, 将希望放到分包的页面,写入 subpackages 数组的元素中。</p><p>2.打包原则</p><p>① 小程序会按 subpackages 的配置进行分包， subpackages 之外的目录将被打包到主包中</p><p>② 主包也可以有自己的 pages （即最外层的 pages 字段）</p><p>③ tabBar 页面必须在主包内</p><p>④ 分包之间不能互相嵌套</p><p>3.引用原则</p><p>① 主包无法引用分包内的私有资源</p><p>② 分包之间不能相互引用私有资源</p><p>③ 分包可以引用主包内的公共资源</p><h4 id="20-2独立分包"><a href="#20-2独立分包" class="headerlink" title="20.2独立分包"></a>20.2独立分包</h4><p>独立分包本质上也是分包，只不过它比较特殊，可以独立于主包和其他分包而单独运行。</p><p>1.独立分包和普通分包的区别</p><p>最主要的区别：是否依赖于主包才能运行</p><p>普通分包必须依赖于主包才能运行</p><p>独立分包可以在不下载主包的情况下，独立运行</p><p>2.独立分包的应用场景</p><p>开发者可以按需，将某些具有一定功能独立性的页面配置到独立分包中。原因如下：</p><p>当小程序从普通的分包页面启动时，需要首先下载主包</p><p>而独立分包不依赖主包即可运行，可以很大程度上提升分包页面的启动速度</p><p>注意：一个小程序中可以有多个独立分包。</p><p>3.独立分包的配置方法</p><p>和普通分包对比, 独立分包就是在 subpackages 数组的某个元素中, 配置 independent 为true即可</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;subPackages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;root&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pkgA&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;pages/cat/cat&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="string">&quot;pages/dog/dog&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;root&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pkgB&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;pages/apple/apple&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>4.引用原则</p><p>独立分包和普通分包以及主包之间，是相互隔绝的，不能相互引用彼此的资源！例如：</p><p>① 主包无法引用独立分包内的私有资源</p><p>② 独立分包之间，不能相互引用私有资源</p><p>③ 独立分包和普通分包之间，不能相互引用私有资源</p><p>④ 特别注意：独立分包中不能引用主包内的公共资源</p><h4 id="20-3-分包预下载"><a href="#20-3-分包预下载" class="headerlink" title="20.3 分包预下载"></a>20.3 分包预下载</h4><p>分包预下载指的是：在进入小程序的某个页面时，由框架自动预下载可能需要的分包，从而提升进入后续分包页面时的启动速度。</p><p> 1.配置分包的预下载</p><p>预下载分包的行为，会在进入指定的页面时触发。在 app.json 中，使用 preloadRule 节点定义分包的预下载规则</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> </span><br><span class="line">  分包预下载的规则 </span><br><span class="line">  <span class="attr">&quot;preloadRule&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">  触发分包预下载的页面路径 </span><br><span class="line">  <span class="attr">&quot;page/concact/concact&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">    network 表示在指定的网络模式下进行预下载 </span><br><span class="line">    可选值有： all(不限网络)和wifi(仅 wifi 模式下进行预下载) </span><br><span class="line">    默认值为： wifi </span><br><span class="line">    <span class="attr">&quot;network&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span><span class="punctuation">,</span> </span><br><span class="line">    packages 表示进入页面后， 预下载哪些分包 </span><br><span class="line">    可以通过root 或name 指定预下载哪些分包 </span><br><span class="line">    <span class="attr">&quot;packages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;pkgA&quot;</span><span class="punctuation">]</span> </span><br><span class="line"><span class="punctuation">&#125;</span> </span><br><span class="line">  <span class="punctuation">&#125;</span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>2.分包预下载的限制</p><p>同一个分包中的页面享有共同的预下载大小限额 2M</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;微信小程序&quot;&gt;&lt;a href=&quot;#微信小程序&quot; class=&quot;headerlink&quot; title=&quot;微信小程序&quot;&gt;&lt;/a&gt;微信小程序&lt;/h2&gt;&lt;h3 id=&quot;1-小程序代码的构成&quot;&gt;&lt;a href=&quot;#1-小程序代码的构成&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="资料" scheme="http://example.com/categories/%E8%B5%84%E6%96%99/"/>
    
    
    <category term="微信小程序" scheme="http://example.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>初识(十)</title>
    <link href="http://example.com/2022/11/06/%E5%88%9D%E8%AF%86-%E5%8D%81/"/>
    <id>http://example.com/2022/11/06/%E5%88%9D%E8%AF%86-%E5%8D%81/</id>
    <published>2022-11-06T03:51:31.000Z</published>
    <updated>2022-11-06T03:56:20.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="webpack基本使用"><a href="#webpack基本使用" class="headerlink" title="webpack基本使用"></a>webpack基本使用</h1><p><strong>Webpack 是一个静态资源打包工具。</strong></p><p>它会以一个或多个文件作为打包的入口，将我们整个项目所有文件编译组合成一个或多个文件输出出去。</p><p>输出的文件就是编译好的文件，就可以在浏览器段运行了。</p><p>我们将 <code>Webpack</code> 输出的文件叫做 <code>bundle</code>。</p><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><p>Webpack 本身功能是有限的:</p><ul><li>开发模式：仅能编译 JS 中的 <code>ES Module</code> 语法</li><li>生产模式：能编译 JS 中的 <code>ES Module</code> 语法，还能压缩 JS 代码</li></ul><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="1-资源目录"><a href="#1-资源目录" class="headerlink" title="1. 资源目录"></a>1. 资源目录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">webpack_code # 项目根目录（所有指令必须在这个目录运行）</span><br><span class="line">    └── src # 项目源码目录</span><br><span class="line">        ├── js # js文件目录</span><br><span class="line">        │   ├── count.js</span><br><span class="line">        │   └── sum.js</span><br><span class="line">        └── main.js # 项目主文件</span><br></pre></td></tr></table></figure><h3 id="2-创建文件"><a href="#2-创建文件" class="headerlink" title="2. 创建文件"></a>2. 创建文件</h3><ul><li>count.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export default function sum(...args) &#123;</span><br><span class="line">  return args.reduce((p, c) =&gt; p + c, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>sum.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export default function sum(...args) &#123;</span><br><span class="line">  return args.reduce((p, c) =&gt; p + c, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>main.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import count from &quot;./js/count&quot;;</span><br><span class="line">import sum from &quot;./js/sum&quot;;</span><br><span class="line"></span><br><span class="line">console.log(count(2, 1));</span><br><span class="line">console.log(sum(1, 2, 3, 4));</span><br></pre></td></tr></table></figure><h3 id="3-下载依赖"><a href="#3-下载依赖" class="headerlink" title="3. 下载依赖"></a>3. 下载依赖</h3><p>打开终端，来到项目根目录。运行以下指令：</p><ul><li>初始化<code>package.json</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>此时会生成一个基础的 <code>package.json</code> 文件。</p><p><strong>需要注意的是 package.json 中 name 字段不能叫做 webpack, 否则下一步会报错</strong></p><ul><li>下载依赖</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack webpack-cli -D</span><br></pre></td></tr></table></figure><h3 id="4-启用-Webpack"><a href="#4-启用-Webpack" class="headerlink" title="4. 启用 Webpack"></a>4. 启用 Webpack</h3><p>执行命令如果报错，可以考虑尝试把node_modules文件夹删掉，重新安装依赖包，然后重试</p><ul><li>开发模式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack ./src/main.js --mode=development</span><br></pre></td></tr></table></figure><ul><li>生产模式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack ./src/main.js --mode=production</span><br></pre></td></tr></table></figure><p><code>npx webpack</code>: 是用来运行本地安装 <code>Webpack</code> 包的。</p><p><code>./src/main.js</code>: 指定 <code>Webpack</code> 从 <code>main.js</code> 文件开始打包，不但会打包 <code>main.js</code>，还会将其依赖也一起打包进来。</p><p><code>--mode=xxx</code>：指定模式（环境）。</p><h3 id="5-观察输出文件"><a href="#5-观察输出文件" class="headerlink" title="5. 观察输出文件"></a>5. 观察输出文件</h3><p>默认 <code>Webpack</code> 会将文件打包输出到 <code>dist</code> 目录下，我们查看 <code>dist</code> 目录下文件情况就好了</p><h1 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h1><p>在开始使用 <code>Webpack</code> 之前，我们需要对 <code>Webpack</code> 的配置有一定的认识。</p><h2 id="5-大核心概念"><a href="#5-大核心概念" class="headerlink" title="5 大核心概念"></a>5 大核心概念</h2><ol><li>entry（入口）</li></ol><p>指示 Webpack 从哪个文件开始打包</p><ol><li>output（输出）</li></ol><p>指示 Webpack 打包完的文件输出到哪里去，如何命名等</p><ol><li>loader（加载器）</li></ol><p>webpack 本身只能处理 js、json 等资源，其他资源需要借助 loader，Webpack 才能解析</p><ol><li>plugins（插件）</li></ol><p>扩展 Webpack 的功能</p><ol><li>mode（模式）</li></ol><p>主要由两种模式：</p><ul><li>开发模式：development</li><li>生产模式：production</li></ul><h2 id="准备-Webpack-配置文件"><a href="#准备-Webpack-配置文件" class="headerlink" title="准备 Webpack 配置文件"></a>准备 Webpack 配置文件</h2><p>在项目根目录下新建文件：<code>webpack.config.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  // 入口</span><br><span class="line">  entry: &quot;&quot;,</span><br><span class="line">  // 输出</span><br><span class="line">  output: &#123;&#125;,</span><br><span class="line">  // 加载器</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [],</span><br><span class="line">  &#125;,</span><br><span class="line">  // 插件</span><br><span class="line">  plugins: [],</span><br><span class="line">  // 模式</span><br><span class="line">  mode: &quot;&quot;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Webpack 是基于 Node.js 运行的，所以采用 Common.js 模块化规范</p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><ol><li>配置文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// Node.js的核心模块，专门用来处理文件路径</span><br><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // 入口</span><br><span class="line">  // 相对路径和绝对路径都行</span><br><span class="line">  entry: &quot;./src/main.js&quot;,</span><br><span class="line">  // 输出</span><br><span class="line">  output: &#123;</span><br><span class="line">    // path: 文件输出目录，必须是绝对路径</span><br><span class="line">    // path.resolve()方法返回一个绝对路径</span><br><span class="line">    // __dirname 当前文件的文件夹绝对路径</span><br><span class="line">    path: path.resolve(__dirname, &quot;dist&quot;),</span><br><span class="line">    // filename: 输出文件名</span><br><span class="line">    filename: &quot;main.js&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  // 加载器</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [],</span><br><span class="line">  &#125;,</span><br><span class="line">  // 插件</span><br><span class="line">  plugins: [],</span><br><span class="line">  // 模式</span><br><span class="line">  mode: &quot;development&quot;, // 开发模式</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>运行指令</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><h1 id="处理样式资源"><a href="#处理样式资源" class="headerlink" title="处理样式资源"></a>处理样式资源</h1><p>Webpack 本身是不能识别样式资源的，所以我们需要借助 Loader 来帮助 Webpack 解析样式资源</p><p>我们找 Loader 都应该去官方文档中找到对应的 Loader，然后使用</p><p>官方文档找不到的话，可以从社区 Github 中搜索查询</p><p><a href="https://webpack.docschina.org/loaders/">Webpack 官方 Loader 文档</a></p><h2 id="处理-Css-资源"><a href="#处理-Css-资源" class="headerlink" title="处理 Css 资源"></a>处理 Css 资源</h2><h3 id="1-下载包"><a href="#1-下载包" class="headerlink" title="1. 下载包"></a>1. 下载包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i css-loader style-loader -D</span><br></pre></td></tr></table></figure><p>注意：需要下载两个 loader</p><h3 id="2-功能介绍"><a href="#2-功能介绍" class="headerlink" title="2. 功能介绍"></a>2. 功能介绍</h3><ul><li><code>css-loader</code>：负责将 Css 文件编译成 Webpack 能识别的模块</li><li><code>style-loader</code>：会动态创建一个 Style 标签，里面放置 Webpack 中 Css 模块内容</li></ul><h3 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &quot;./src/main.js&quot;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &quot;dist&quot;),</span><br><span class="line">    filename: &quot;main.js&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">    </span><br><span class="line">    // +新增</span><br><span class="line">      &#123;</span><br><span class="line">        // 用来匹配 .css 结尾的文件</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        // use 数组里面 Loader 执行顺序是从右到左</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [],</span><br><span class="line">  mode: &quot;development&quot;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-添加-Css-资源"><a href="#4-添加-Css-资源" class="headerlink" title="4. 添加 Css 资源"></a>4. 添加 Css 资源</h3><ul><li>src&#x2F;css&#x2F;index.css</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.box1 &#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background-color: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>src&#x2F;main.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import count from &quot;./js/count&quot;;</span><br><span class="line">import sum from &quot;./js/sum&quot;;</span><br><span class="line"></span><br><span class="line">// +新增</span><br><span class="line">// 引入 Css 资源，Webpack才会对其打包</span><br><span class="line">import &quot;./css/index.css&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(count(2, 1));</span><br><span class="line">console.log(sum(1, 2, 3, 4));</span><br></pre></td></tr></table></figure><ul><li>public&#x2F;index.html</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;webpack5&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello Webpack5&lt;/h1&gt;</span><br><span class="line">    &lt;!-- 准备一个使用样式的 DOM 容器 --&gt;</span><br><span class="line">    &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;!-- 引入打包后的js文件，才能看到效果 --&gt;</span><br><span class="line">    &lt;script src=&quot;../dist/main.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="5-运行指令"><a href="#5-运行指令" class="headerlink" title="5. 运行指令"></a>5. 运行指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><h2 id="处理-Less-资源"><a href="#处理-Less-资源" class="headerlink" title="处理 Less 资源"></a>处理 Less 资源</h2><h3 id="1-下载包-1"><a href="#1-下载包-1" class="headerlink" title="1. 下载包"></a>1. 下载包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i less-loader less -D</span><br></pre></td></tr></table></figure><h3 id="2-功能介绍-1"><a href="#2-功能介绍-1" class="headerlink" title="2. 功能介绍"></a>2. 功能介绍</h3><ul><li><code>less-loader</code>：负责将 Less 文件编译成 Css 文件</li></ul><h3 id="3-配置-1"><a href="#3-配置-1" class="headerlink" title="3. 配置"></a>3. 配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &quot;./src/main.js&quot;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &quot;dist&quot;),</span><br><span class="line">    filename: &quot;main.js&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // 用来匹配 .css 结尾的文件</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        // use 数组里面 Loader 执行顺序是从右到左</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      </span><br><span class="line">      // +新增</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.less$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;less-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [],</span><br><span class="line">  mode: &quot;development&quot;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-添加-Less-资源"><a href="#4-添加-Less-资源" class="headerlink" title="4. 添加 Less 资源"></a>4. 添加 Less 资源</h3><ul><li>src&#x2F;css&#x2F;index.less</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.box2 &#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background-color: deeppink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>src&#x2F;main.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import count from &quot;./js/count&quot;;</span><br><span class="line">import sum from &quot;./js/sum&quot;;</span><br><span class="line">// 引入资源，Webpack才会对其打包</span><br><span class="line">import &quot;./css/index.css&quot;;</span><br><span class="line"></span><br><span class="line">// +新增</span><br><span class="line">import &quot;./css/index.less&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(count(2, 1));</span><br><span class="line">console.log(sum(1, 2, 3, 4));</span><br></pre></td></tr></table></figure><ul><li>public&#x2F;index.html</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;webpack5&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello Webpack5&lt;/h1&gt;</span><br><span class="line">    &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;../dist/main.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="5-运行指令-1"><a href="#5-运行指令-1" class="headerlink" title="5. 运行指令"></a>5. 运行指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><h2 id="处理样式资源less、sass、styl汇总"><a href="#处理样式资源less、sass、styl汇总" class="headerlink" title="处理样式资源less、sass、styl汇总"></a>处理样式资源less、sass、styl汇总</h2><h3 id="1-下载包-2"><a href="#1-下载包-2" class="headerlink" title="1. 下载包"></a>1. 下载包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i less-loader less sass-loader sass stylus-loader stylus -D</span><br></pre></td></tr></table></figure><h3 id="2-功能介绍-2"><a href="#2-功能介绍-2" class="headerlink" title="2. 功能介绍"></a>2. 功能介绍</h3><ul><li>负责将样式文件编译成 Css 文件</li></ul><h3 id="3-配置-2"><a href="#3-配置-2" class="headerlink" title="3. 配置"></a>3. 配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &quot;./src/main.js&quot;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &quot;dist&quot;),</span><br><span class="line">    filename: &quot;main.js&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // 用来匹配 .css 结尾的文件</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        // use 数组里面 Loader 执行顺序是从右到左</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.less$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;less-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.s[ac]ss$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;sass-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      </span><br><span class="line">      // +新增</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.styl$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;stylus-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [],</span><br><span class="line">  mode: &quot;development&quot;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-添加-Styl-资源"><a href="#4-添加-Styl-资源" class="headerlink" title="4. 添加 Styl 资源"></a>4. 添加 Styl 资源</h3><ul><li>src&#x2F;css&#x2F;index.less</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.box2 &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: deeppink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>src&#x2F;css&#x2F;index.sass</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/* 可以省略大括号、分号、冒号 */</span><br><span class="line">.box3</span><br><span class="line">  width: 100px</span><br><span class="line">  height: 100px</span><br><span class="line">  background-color: hotpink</span><br></pre></td></tr></table></figure><ul><li>src&#x2F;css&#x2F;index.scss</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.box4 &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: lightpink;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>src&#x2F;css&#x2F;index.styl</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/* 可以省略大括号、分号、冒号 */</span><br><span class="line">.box5 </span><br><span class="line">  width 100px </span><br><span class="line">  height 100px </span><br><span class="line">  background-color pink</span><br></pre></td></tr></table></figure><ul><li>src&#x2F;main.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import &#123; add &#125; from &quot;./math&quot;;</span><br><span class="line">import count from &quot;./js/count&quot;;</span><br><span class="line">import sum from &quot;./js/sum&quot;;</span><br><span class="line">// 引入资源，Webpack才会对其打包</span><br><span class="line">import &quot;./css/index.css&quot;;</span><br><span class="line"></span><br><span class="line">// +新增</span><br><span class="line">import &quot;./css/index.less&quot;;</span><br><span class="line">import &quot;./css/index.sass&quot;;</span><br><span class="line">import &quot;./css/index.scss&quot;;</span><br><span class="line">import &quot;./css/index.styl&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console.log(count(2, 1));</span><br><span class="line">console.log(sum(1, 2, 3, 4));</span><br></pre></td></tr></table></figure><ul><li>public&#x2F;index.html</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;webpack5&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello Webpack5&lt;/h1&gt;</span><br><span class="line">    &lt;!-- 准备一个使用样式的 DOM 容器 --&gt;</span><br><span class="line">    &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">    // +新增</span><br><span class="line">    &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box3&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box4&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box5&quot;&gt;&lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &lt;script src=&quot;../dist/main.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="5-运行指令-2"><a href="#5-运行指令-2" class="headerlink" title="5. 运行指令"></a>5. 运行指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><h1 id="处理图片资源"><a href="#处理图片资源" class="headerlink" title="处理图片资源"></a>处理图片资源</h1><p>过去在 Webpack4 时，我们处理图片资源通过 <code>file-loader</code> 和 <code>url-loader</code> 进行处理</p><p>现在 Webpack5 已经将两个 Loader 功能内置到 Webpack 里了，我们只需要简单配置即可处理图片资源</p><h2 id="1-配置"><a href="#1-配置" class="headerlink" title="1. 配置"></a>1. 配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &quot;./src/main.js&quot;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &quot;dist&quot;),</span><br><span class="line">    filename: &quot;main.js&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // 用来匹配 .css 结尾的文件</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        // use 数组里面 Loader 执行顺序是从右到左</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.less$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;less-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.s[ac]ss$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;sass-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.styl$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;stylus-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      </span><br><span class="line">      // +新增</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(png|jpe?g|gif|webp)$/,</span><br><span class="line">        type: &quot;asset&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [],</span><br><span class="line">  mode: &quot;development&quot;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-添加图片资源"><a href="#2-添加图片资源" class="headerlink" title="2. 添加图片资源"></a>2. 添加图片资源</h2><ul><li>src&#x2F;images&#x2F;1.jpeg</li><li>src&#x2F;images&#x2F;2.png</li><li>src&#x2F;images&#x2F;3.gif</li></ul><h2 id="3-使用图片资源"><a href="#3-使用图片资源" class="headerlink" title="3. 使用图片资源"></a>3. 使用图片资源</h2><ul><li>src&#x2F;less&#x2F;index.less</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.box2 &#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background-image: url(&quot;../images/1.jpeg&quot;);</span><br><span class="line">  background-size: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>src&#x2F;sass&#x2F;index.sass</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.box3</span><br><span class="line">  width: 100px</span><br><span class="line">  height: 100px</span><br><span class="line">  background-image: url(&quot;../images/2.png&quot;)</span><br><span class="line">  background-size: cover</span><br></pre></td></tr></table></figure><ul><li>src&#x2F;styl&#x2F;index.styl</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.box5</span><br><span class="line">  width 100px</span><br><span class="line">  height 100px</span><br><span class="line">  background-image url(&quot;../images/3.gif&quot;)</span><br><span class="line">  background-size cover</span><br></pre></td></tr></table></figure><h2 id="4-运行指令"><a href="#4-运行指令" class="headerlink" title="4. 运行指令"></a>4. 运行指令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><h2 id="5-输出资源情况"><a href="#5-输出资源情况" class="headerlink" title="5. 输出资源情况"></a>5. 输出资源情况</h2><p>此时如果查看 dist 目录的话，会发现多了三张图片资源</p><p>因为 Webpack 会将所有打包好的资源输出到 dist 目录下</p><ul><li>为什么样式资源没有呢？</li></ul><p>因为经过 <code>style-loader</code> 的处理，样式资源打包到 main.js 里面去了，所以没有额外输出出来</p><h2 id="6-对图片资源进行优化"><a href="#6-对图片资源进行优化" class="headerlink" title="6. 对图片资源进行优化"></a>6. 对图片资源进行优化</h2><p>将小于某个大小的图片转化成 data URI 形式（Base64 格式）</p><p><a href="https://webpack.docschina.org/configuration/module/#ruleparserdataurlcondition">参考Webpack 官方文档</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &quot;./src/main.js&quot;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &quot;dist&quot;),</span><br><span class="line">    filename: &quot;main.js&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // 用来匹配 .css 结尾的文件</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        // use 数组里面 Loader 执行顺序是从右到左</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.less$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;less-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.s[ac]ss$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;sass-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.styl$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;stylus-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(png|jpe?g|gif|webp)$/,</span><br><span class="line">        type: &quot;asset&quot;,</span><br><span class="line">        </span><br><span class="line">        // +新增</span><br><span class="line">        parser: &#123;</span><br><span class="line">          dataUrlCondition: &#123;</span><br><span class="line">            maxSize: 10 * 1024 // 小于10kb的图片会被base64处理</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [],</span><br><span class="line">  mode: &quot;development&quot;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>优点：减少请求数量</li><li>缺点：体积变得更大</li></ul><p>此时输出的图片文件就只有两张，有一张图片以 data URI 形式内置到 js 中了 （注意：需要将上次打包生成的文件清空，再重新打包才有效果）</p><h1 id="修改输出资源的名称和路径"><a href="#修改输出资源的名称和路径" class="headerlink" title="修改输出资源的名称和路径"></a>修改输出资源的名称和路径</h1><h2 id="1-配置-1"><a href="#1-配置-1" class="headerlink" title="1. 配置"></a>1. 配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &quot;./src/main.js&quot;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &quot;dist&quot;),</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    filename: &quot;static/js/main.js&quot;, // 将 js 文件输出到 static/js 目录中+新增</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // 用来匹配 .css 结尾的文件</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        // use 数组里面 Loader 执行顺序是从右到左</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.less$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;less-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.s[ac]ss$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;sass-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.styl$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;stylus-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(png|jpe?g|gif|webp)$/,</span><br><span class="line">        type: &quot;asset&quot;,</span><br><span class="line">        parser: &#123;</span><br><span class="line">          dataUrlCondition: &#123;</span><br><span class="line">            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;, </span><br><span class="line">        </span><br><span class="line">        // +新增</span><br><span class="line">        generator: &#123;</span><br><span class="line">          // 将图片文件输出到 static/imgs 目录中</span><br><span class="line">          // 将图片文件命名 [hash:8][ext][query]</span><br><span class="line">          // [hash:8]: hash值取8位</span><br><span class="line">          // [ext]: 使用之前的文件扩展名</span><br><span class="line">          // [query]: 添加之前的query参数</span><br><span class="line">          filename: &quot;static/imgs/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [],</span><br><span class="line">  mode: &quot;development&quot;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-修改-index-html"><a href="#2-修改-index-html" class="headerlink" title="2. 修改 index.html"></a>2. 修改 index.html</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;webpack5&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello Webpack5&lt;/h1&gt;</span><br><span class="line">    &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box3&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box4&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box5&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;!-- 修改 js 资源路径 --&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;script src=&quot;../dist/static/js/main.js&quot;&gt;&lt;/script&gt;// +新增</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="3-运行指令"><a href="#3-运行指令" class="headerlink" title="3. 运行指令"></a>3. 运行指令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><h1 id="自动清空上次打包资源"><a href="#自动清空上次打包资源" class="headerlink" title="自动清空上次打包资源"></a>自动清空上次打包资源</h1><h2 id="1-配置-2"><a href="#1-配置-2" class="headerlink" title="1. 配置"></a>1. 配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &quot;./src/main.js&quot;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &quot;dist&quot;),</span><br><span class="line">    filename: &quot;static/js/main.js&quot;,</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    clean: true, // 自动将上次打包目录资源清空+新增</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // 用来匹配 .css 结尾的文件</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        // use 数组里面 Loader 执行顺序是从右到左</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.less$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;less-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.s[ac]ss$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;sass-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.styl$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;stylus-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(png|jpe?g|gif|webp)$/,</span><br><span class="line">        type: &quot;asset&quot;,</span><br><span class="line">        parser: &#123;</span><br><span class="line">          dataUrlCondition: &#123;</span><br><span class="line">            maxSize: 40 * 1024, // 小于40kb的图片会被base64处理</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          // 将图片文件输出到 static/imgs 目录中</span><br><span class="line">          // 将图片文件命名 [hash:8][ext][query]</span><br><span class="line">          // [hash:8]: hash值取8位</span><br><span class="line">          // [ext]: 使用之前的文件扩展名</span><br><span class="line">          // [query]: 添加之前的query参数</span><br><span class="line">          filename: &quot;static/imgs/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [],</span><br><span class="line">  mode: &quot;development&quot;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-运行指令"><a href="#2-运行指令" class="headerlink" title="2. 运行指令"></a>2. 运行指令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><h1 id="处理字体图标资源"><a href="#处理字体图标资源" class="headerlink" title="处理字体图标资源"></a>处理字体图标资源</h1><h2 id="1-下载字体图标文件"><a href="#1-下载字体图标文件" class="headerlink" title="1. 下载字体图标文件"></a>1. 下载字体图标文件</h2><ol><li>打开<a href="https://www.iconfont.cn/">阿里巴巴矢量图标库open in new window</a></li><li>选择想要的图标添加到购物车，统一下载到本地</li></ol><h2 id="2-添加字体图标资源"><a href="#2-添加字体图标资源" class="headerlink" title="2. 添加字体图标资源"></a>2. 添加字体图标资源</h2><ul><li>src&#x2F;fonts&#x2F;iconfont.ttf</li><li>src&#x2F;fonts&#x2F;iconfont.woff</li><li>src&#x2F;fonts&#x2F;iconfont.woff2</li><li>src&#x2F;css&#x2F;iconfont.css<ul><li>注意字体文件路径需要修改</li></ul></li><li>src&#x2F;main.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import &#123; add &#125; from &quot;./math&quot;;</span><br><span class="line">import count from &quot;./js/count&quot;;</span><br><span class="line">import sum from &quot;./js/sum&quot;;</span><br><span class="line">// 引入资源，Webpack才会对其打包</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import &quot;./css/iconfont.css&quot;;// +新增</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import &quot;./css/index.css&quot;;</span><br><span class="line">import &quot;./css/index.less&quot;;</span><br><span class="line">import &quot;./css/index.sass&quot;;</span><br><span class="line">import &quot;./css/index.scss&quot;;</span><br><span class="line">import &quot;./css/index.styl&quot;;</span><br><span class="line"></span><br><span class="line">console.log(count(2, 1));</span><br><span class="line">console.log(sum(1, 2, 3, 4));</span><br></pre></td></tr></table></figure><ul><li>public&#x2F;index.html</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;webpack5&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello Webpack5&lt;/h1&gt;</span><br><span class="line">    &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box3&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box4&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box5&quot;&gt;&lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">    // +新增</span><br><span class="line">    &lt;!-- 使用字体图标 --&gt;</span><br><span class="line">    &lt;i class=&quot;iconfont icon-aixin&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;i class=&quot;iconfont icon-bianji&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;i class=&quot;iconfont icon-caidan&quot;&gt;&lt;/i&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &lt;script src=&quot;../dist/static/js/main.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="3-配置-3"><a href="#3-配置-3" class="headerlink" title="3. 配置"></a>3. 配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &quot;./src/main.js&quot;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &quot;dist&quot;),</span><br><span class="line">    filename: &quot;static/js/main.js&quot;, // 将 js 文件输出到 static/js 目录中</span><br><span class="line">    clean: true, // 自动将上次打包目录资源清空</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // 用来匹配 .css 结尾的文件</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        // use 数组里面 Loader 执行顺序是从右到左</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.less$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;less-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.s[ac]ss$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;sass-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.styl$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;stylus-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(png|jpe?g|gif|webp)$/,</span><br><span class="line">        type: &quot;asset&quot;,</span><br><span class="line">        parser: &#123;</span><br><span class="line">          dataUrlCondition: &#123;</span><br><span class="line">            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          // 将图片文件输出到 static/imgs 目录中</span><br><span class="line">          // 将图片文件命名 [hash:8][ext][query]</span><br><span class="line">          // [hash:8]: hash值取8位</span><br><span class="line">          // [ext]: 使用之前的文件扩展名</span><br><span class="line">          // [query]: 添加之前的query参数</span><br><span class="line">          filename: &quot;static/imgs/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      </span><br><span class="line">      // +新增</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(ttf|woff2?)$/,</span><br><span class="line">        type: &quot;asset/resource&quot;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          filename: &quot;static/media/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [],</span><br><span class="line">  mode: &quot;development&quot;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>type: &quot;asset/resource&quot;</code>和<code>type: &quot;asset&quot;</code>的区别：</p><ol><li><code>type: &quot;asset/resource&quot;</code> 相当于<code>file-loader</code>, 将文件转化成 Webpack 能识别的资源，其他不做处理</li><li><code>type: &quot;asset&quot;</code> 相当于<code>url-loader</code>, 将文件转化成 Webpack 能识别的资源，同时小于某个大小的资源会处理成 data URI 形式</li></ol><h2 id="4-运行指令-1"><a href="#4-运行指令-1" class="headerlink" title="4. 运行指令"></a>4. 运行指令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><h1 id="处理其他资源"><a href="#处理其他资源" class="headerlink" title="处理其他资源"></a>处理其他资源</h1><p>开发中可能还存在一些其他资源，如音视频等，我们也一起处理了</p><h2 id="1-配置-3"><a href="#1-配置-3" class="headerlink" title="1. 配置"></a>1. 配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &quot;./src/main.js&quot;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &quot;dist&quot;),</span><br><span class="line">    filename: &quot;static/js/main.js&quot;, // 将 js 文件输出到 static/js 目录中</span><br><span class="line">    clean: true, // 自动将上次打包目录资源清空</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // 用来匹配 .css 结尾的文件</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        // use 数组里面 Loader 执行顺序是从右到左</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.less$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;less-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.s[ac]ss$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;sass-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.styl$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;stylus-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(png|jpe?g|gif|webp)$/,</span><br><span class="line">        type: &quot;asset&quot;,</span><br><span class="line">        parser: &#123;</span><br><span class="line">          dataUrlCondition: &#123;</span><br><span class="line">            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          // 将图片文件输出到 static/imgs 目录中</span><br><span class="line">          // 将图片文件命名 [hash:8][ext][query]</span><br><span class="line">          // [hash:8]: hash值取8位</span><br><span class="line">          // [ext]: 使用之前的文件扩展名</span><br><span class="line">          // [query]: 添加之前的query参数</span><br><span class="line">          filename: &quot;static/imgs/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">        test: /\.(ttf|woff2?|map4|map3|avi)$/,//+新增</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        type: &quot;asset/resource&quot;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          filename: &quot;static/media/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [],</span><br><span class="line">  mode: &quot;development&quot;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>就是在处理字体图标资源基础上增加其他文件类型，统一处理即可</p><h2 id="2-运行指令-1"><a href="#2-运行指令-1" class="headerlink" title="2. 运行指令"></a>2. 运行指令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><h1 id="处理-js-资源"><a href="#处理-js-资源" class="headerlink" title="处理 js 资源"></a>处理 js 资源</h1><p>有人可能会问，js 资源 Webpack 不能已经处理了吗，为什么我们还要处理呢？</p><p>原因是 Webpack 对 js 处理是有限的，只能编译 js 中 ES 模块化语法，不能编译其他语法，导致 js 不能在 IE 等浏览器运行，所以我们希望做一些兼容性处理。</p><p>其次开发中，团队对代码格式是有严格要求的，我们不能由肉眼去检测代码格式，需要使用专业的工具来检测。</p><ul><li>针对 js 兼容性处理，我们使用 Babel 来完成</li><li>针对代码格式，我们使用 Eslint 来完成</li></ul><p>我们先完成 Eslint，检测代码格式无误后，在由 Babel 做代码兼容性处理</p><h2 id="Eslint"><a href="#Eslint" class="headerlink" title="Eslint"></a>Eslint</h2><p>可组装的 JavaScript 和 JSX 检查工具。</p><p>这句话意思就是：它是用来检测 js 和 jsx 语法的工具，可以配置各项功能</p><p>我们使用 Eslint，关键是写 Eslint 配置文件，里面写上各种 rules 规则，将来运行 Eslint 时就会以写的规则对代码进行检查</p><h3 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1. 配置文件"></a>1. 配置文件</h3><p>配置文件由很多种写法：</p><ul><li><code>.eslintrc.*</code>：新建文件，位于项目根目录<code>.eslintrc``.eslintrc.js``.eslintrc.json</code>区别在于配置格式不一样</li><li><code>package.json</code> 中 <code>eslintConfig</code>：不需要创建文件，在原有文件基础上写</li></ul><p>ESLint 会查找和自动读取它们，所以以上配置文件只需要存在一个即可</p><h3 id="2-具体配置"><a href="#2-具体配置" class="headerlink" title="2.具体配置"></a>2.具体配置</h3><p>我们以 <code>.eslintrc.js</code> 配置文件为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  // 解析选项</span><br><span class="line">  parserOptions: &#123;&#125;,</span><br><span class="line">  // 具体检查规则</span><br><span class="line">  rules: &#123;&#125;,</span><br><span class="line">  // 继承其他规则</span><br><span class="line">  extends: [],</span><br><span class="line">  // ...</span><br><span class="line">  // 其他规则详见：https://eslint.bootcss.com/docs/user-guide/configuring</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>parserOptions 解析选项</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">parserOptions: &#123;</span><br><span class="line">  ecmaVersion: 6, // ES 语法版本</span><br><span class="line">  sourceType: &quot;module&quot;, // ES 模块化</span><br><span class="line">  ecmaFeatures: &#123; // ES 其他特性</span><br><span class="line">    jsx: true // 如果是 React 项目，就需要开启 jsx 语法</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>rules 具体规则</li></ol><ul><li><code>&quot;off&quot;</code> 或 <code>0</code> - 关闭规则</li><li><code>&quot;warn&quot;</code> 或 <code>1</code> - 开启规则，使用警告级别的错误：<code>warn</code> (不会导致程序退出)</li><li><code>&quot;error&quot;</code> 或 <code>2</code> - 开启规则，使用错误级别的错误：<code>error</code> (当被触发的时候，程序会退出)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rules: &#123;</span><br><span class="line">  semi: &quot;error&quot;, // 禁止使用分号</span><br><span class="line">  &#x27;array-callback-return&#x27;: &#x27;warn&#x27;, // 强制数组方法的回调函数中有 return 语句，否则警告</span><br><span class="line">  &#x27;default-case&#x27;: [</span><br><span class="line">    &#x27;warn&#x27;, // 要求 switch 语句中有 default 分支，否则警告</span><br><span class="line">    &#123; commentPattern: &#x27;^no default$&#x27; &#125; // 允许在最后注释 no default, 就不会有警告了</span><br><span class="line">  ],</span><br><span class="line">  eqeqeq: [</span><br><span class="line">    &#x27;warn&#x27;, // 强制使用 === 和 !==，否则警告</span><br><span class="line">    &#x27;smart&#x27; // https://eslint.bootcss.com/docs/rules/eqeqeq#smart 除了少数情况下不会有警告</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多规则详见：<a href="https://eslint.bootcss.com/docs/rules/">规则文档open in new window</a></p><ol><li>extends 继承</li></ol><p>开发中一点点写 rules 规则太费劲了，所以有更好的办法，继承现有的规则。</p><p>现有以下较为有名的规则：</p><ul><li><a href="https://eslint.bootcss.com/docs/rules/">Eslint 官方的规则open in new window</a>：<code>eslint:recommended</code></li><li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/@vue/cli-plugin-eslint">Vue Cli 官方的规则open in new window</a>：<code>plugin:vue/essential</code></li><li><a href="https://github.com/facebook/create-react-app/tree/main/packages/eslint-config-react-app">React Cli 官方的规则open in new window</a>：<code>react-app</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 例如在React项目中，我们可以这样写配置</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  extends: [&quot;react-app&quot;],</span><br><span class="line">  rules: &#123;</span><br><span class="line">    // 我们的规则会覆盖掉react-app的规则</span><br><span class="line">    // 所以想要修改规则直接改就是了</span><br><span class="line">    eqeqeq: [&quot;warn&quot;, &quot;smart&quot;],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-在-Webpack-中使用"><a href="#3-在-Webpack-中使用" class="headerlink" title="3. 在 Webpack 中使用"></a>3. 在 Webpack 中使用</h3><ol><li>下载包</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i eslint-webpack-plugin eslint -D</span><br></pre></td></tr></table></figure><ol><li>定义 Eslint 配置文件</li></ol><ul><li>.eslintrc.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  // 继承 Eslint 规则</span><br><span class="line">  extends: [&quot;eslint:recommended&quot;],</span><br><span class="line">  env: &#123;</span><br><span class="line">    node: true, // 启用node中全局变量</span><br><span class="line">    browser: true, // 启用浏览器中全局变量</span><br><span class="line">  &#125;,</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    ecmaVersion: 6,</span><br><span class="line">    sourceType: &quot;module&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  rules: &#123;</span><br><span class="line">    &quot;no-var&quot;: 2, // 不能使用 var 定义变量</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>修改 js 文件代码</li></ol><ul><li>main.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import count from &quot;./js/count&quot;;</span><br><span class="line">import sum from &quot;./js/sum&quot;;</span><br><span class="line">// 引入资源，Webpack才会对其打包</span><br><span class="line">import &quot;./css/iconfont.css&quot;;</span><br><span class="line">import &quot;./css/index.css&quot;;</span><br><span class="line">import &quot;./less/index.less&quot;;</span><br><span class="line">import &quot;./sass/index.sass&quot;;</span><br><span class="line">import &quot;./sass/index.scss&quot;;</span><br><span class="line">import &quot;./styl/index.styl&quot;;</span><br><span class="line"></span><br><span class="line">// +新增</span><br><span class="line">var result1 = count(2, 1);</span><br><span class="line">console.log(result1);</span><br><span class="line">var result2 = sum(1, 2, 3, 4);</span><br><span class="line">console.log(result2);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>配置</li></ol><ul><li>webpack.config.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const ESLintWebpackPlugin = require(&quot;eslint-webpack-plugin&quot;);// +新增</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &quot;./src/main.js&quot;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &quot;dist&quot;),</span><br><span class="line">    filename: &quot;static/js/main.js&quot;, // 将 js 文件输出到 static/js 目录中</span><br><span class="line">    clean: true, // 自动将上次打包目录资源清空</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // 用来匹配 .css 结尾的文件</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        // use 数组里面 Loader 执行顺序是从右到左</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.less$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;less-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.s[ac]ss$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;sass-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.styl$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;stylus-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(png|jpe?g|gif|webp)$/,</span><br><span class="line">        type: &quot;asset&quot;,</span><br><span class="line">        parser: &#123;</span><br><span class="line">          dataUrlCondition: &#123;</span><br><span class="line">            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          // 将图片文件输出到 static/imgs 目录中</span><br><span class="line">          // 将图片文件命名 [hash:8][ext][query]</span><br><span class="line">          // [hash:8]: hash值取8位</span><br><span class="line">          // [ext]: 使用之前的文件扩展名</span><br><span class="line">          // [query]: 添加之前的query参数</span><br><span class="line">          filename: &quot;static/imgs/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(ttf|woff2?)$/,</span><br><span class="line">        type: &quot;asset/resource&quot;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          filename: &quot;static/media/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">  </span><br><span class="line">  //+新增</span><br><span class="line">    new ESLintWebpackPlugin(&#123;</span><br><span class="line">      // 指定检查文件的根目录</span><br><span class="line">      context: path.resolve(__dirname, &quot;src&quot;),</span><br><span class="line">    &#125;),</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  ],</span><br><span class="line">  mode: &quot;development&quot;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>运行指令</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><h3 id="4-VSCode-Eslint-插件"><a href="#4-VSCode-Eslint-插件" class="headerlink" title="4. VSCode Eslint 插件"></a>4. VSCode Eslint 插件</h3><p>打开 VSCode，下载 Eslint 插件，即可不用编译就能看到错误，可以提前解决</p><p>但是此时就会对项目所有文件默认进行 Eslint 检查了，我们 dist 目录下的打包后文件就会报错。但是我们只需要检查 src 下面的文件，不需要检查 dist 下面的文件。</p><p>所以可以使用 Eslint 忽略文件解决。在项目根目录新建下面文件:</p><ul><li><code>.eslintignore</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 忽略dist目录下所有文件</span><br><span class="line">dist</span><br></pre></td></tr></table></figure><h2 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h2><p>JavaScript 编译器。</p><p>主要用于将 ES6 语法编写的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中</p><h3 id="1-配置文件-1"><a href="#1-配置文件-1" class="headerlink" title="1.配置文件"></a>1.配置文件</h3><p>配置文件由很多种写法：</p><ul><li><code>babel.config.*</code>：新建文件，位于项目根目录<code>babel.config.js``babel.config.json</code></li><li><code>.babelrc.*</code>：新建文件，位于项目根目录<code>.babelrc``.babelrc.js``.babelrc.json</code></li><li><code>package.json</code> 中 <code>babel</code>：不需要创建文件，在原有文件基础上写</li></ul><p>Babel 会查找和自动读取它们，所以以上配置文件只需要存在一个即可</p><h3 id="2-具体配置-1"><a href="#2-具体配置-1" class="headerlink" title="2.具体配置"></a>2.具体配置</h3><p>我们以 <code>babel.config.js</code> 配置文件为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  // 预设</span><br><span class="line">  presets: [],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>presets 预设</li></ol><p>简单理解：就是一组 Babel 插件, 扩展 Babel 功能</p><ul><li><code>@babel/preset-env</code>: 一个智能预设，允许您使用最新的 JavaScript。</li><li><code>@babel/preset-react</code>：一个用来编译 React jsx 语法的预设</li><li><code>@babel/preset-typescript</code>：一个用来编译 TypeScript 语法的预设</li></ul><h3 id="3-在-Webpack-中使用（练习）"><a href="#3-在-Webpack-中使用（练习）" class="headerlink" title="3.在 Webpack 中使用（练习）"></a>3.在 Webpack 中使用（练习）</h3><p>下载包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-loader @babel/core @babel/preset-env -D</span><br></pre></td></tr></table></figure><p>定义 Babel 配置文件</p><ul><li>babel.config.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  presets: [&quot;@babel/preset-env&quot;],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>配置</p><ul><li>webpack.config.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line">const ESLintWebpackPlugin = require(&quot;eslint-webpack-plugin&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &quot;./src/main.js&quot;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &quot;dist&quot;),</span><br><span class="line">    filename: &quot;static/js/main.js&quot;, // 将 js 文件输出到 static/js 目录中</span><br><span class="line">    clean: true, // 自动将上次打包目录资源清空</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // 用来匹配 .css 结尾的文件</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        // use 数组里面 Loader 执行顺序是从右到左</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.less$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;less-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.s[ac]ss$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;sass-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.styl$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;stylus-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(png|jpe?g|gif|webp)$/,</span><br><span class="line">        type: &quot;asset&quot;,</span><br><span class="line">        parser: &#123;</span><br><span class="line">          dataUrlCondition: &#123;</span><br><span class="line">            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          // 将图片文件输出到 static/imgs 目录中</span><br><span class="line">          // 将图片文件命名 [hash:8][ext][query]</span><br><span class="line">          // [hash:8]: hash值取8位</span><br><span class="line">          // [ext]: 使用之前的文件扩展名</span><br><span class="line">          // [query]: 添加之前的query参数</span><br><span class="line">          filename: &quot;static/imgs/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(ttf|woff2?)$/,</span><br><span class="line">        type: &quot;asset/resource&quot;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          filename: &quot;static/media/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      </span><br><span class="line">      // +新增</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        exclude: /node_modules/, // 排除node_modules代码不编译</span><br><span class="line">        loader: &quot;babel-loader&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new ESLintWebpackPlugin(&#123;</span><br><span class="line">      // 指定检查文件的根目录</span><br><span class="line">      context: path.resolve(__dirname, &quot;src&quot;),</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  mode: &quot;development&quot;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>运行指令</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><h1 id="处理-Html-资源"><a href="#处理-Html-资源" class="headerlink" title="处理 Html 资源"></a>处理 Html 资源</h1><h2 id="1-下载包-3"><a href="#1-下载包-3" class="headerlink" title="1. 下载包"></a>1. 下载包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i html-webpack-plugin -D</span><br></pre></td></tr></table></figure><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h2><ul><li>webpack.config.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line">const ESLintWebpackPlugin = require(&quot;eslint-webpack-plugin&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);// +新增</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &quot;./src/main.js&quot;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &quot;dist&quot;),</span><br><span class="line">    filename: &quot;static/js/main.js&quot;, // 将 js 文件输出到 static/js 目录中</span><br><span class="line">    clean: true, // 自动将上次打包目录资源清空</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // 用来匹配 .css 结尾的文件</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        // use 数组里面 Loader 执行顺序是从右到左</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.less$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;less-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.s[ac]ss$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;sass-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.styl$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;stylus-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(png|jpe?g|gif|webp)$/,</span><br><span class="line">        type: &quot;asset&quot;,</span><br><span class="line">        parser: &#123;</span><br><span class="line">          dataUrlCondition: &#123;</span><br><span class="line">            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          // 将图片文件输出到 static/imgs 目录中</span><br><span class="line">          // 将图片文件命名 [hash:8][ext][query]</span><br><span class="line">          // [hash:8]: hash值取8位</span><br><span class="line">          // [ext]: 使用之前的文件扩展名</span><br><span class="line">          // [query]: 添加之前的query参数</span><br><span class="line">          filename: &quot;static/imgs/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(ttf|woff2?)$/,</span><br><span class="line">        type: &quot;asset/resource&quot;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          filename: &quot;static/media/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        exclude: /node_modules/, // 排除node_modules代码不编译</span><br><span class="line">        loader: &quot;babel-loader&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new ESLintWebpackPlugin(&#123;</span><br><span class="line">      // 指定检查文件的根目录</span><br><span class="line">      context: path.resolve(__dirname, &quot;src&quot;),</span><br><span class="line">    &#125;),</span><br><span class="line">    </span><br><span class="line">    // +新增</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      // 以 public/index.html 为模板创建文件</span><br><span class="line">      // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span><br><span class="line">      template: path.resolve(__dirname, &quot;public/index.html&quot;),</span><br><span class="line">    &#125;),</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  ],</span><br><span class="line">  mode: &quot;development&quot;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3-修改-index-html"><a href="#3-修改-index-html" class="headerlink" title="3. 修改 index.html"></a>3. 修改 index.html</h2><p>去掉引入的 js 文件，因为 HtmlWebpackPlugin 会自动引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;webpack5&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello Webpack5&lt;/h1&gt;</span><br><span class="line">    &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box3&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box4&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box5&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;i class=&quot;iconfont icon-arrow-down&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;i class=&quot;iconfont icon-ashbin&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;i class=&quot;iconfont icon-browse&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="4-运行指令-2"><a href="#4-运行指令-2" class="headerlink" title="4. 运行指令"></a>4. 运行指令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><h1 id="开发服务器-amp-自动化"><a href="#开发服务器-amp-自动化" class="headerlink" title="开发服务器&amp;自动化"></a>开发服务器&amp;自动化</h1><h2 id="1-下载包-4"><a href="#1-下载包-4" class="headerlink" title="1. 下载包"></a>1. 下载包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack-dev-server -D</span><br></pre></td></tr></table></figure><h2 id="2-配置-1"><a href="#2-配置-1" class="headerlink" title="2. 配置"></a>2. 配置</h2><ul><li>webpack.config.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line">const ESLintWebpackPlugin = require(&quot;eslint-webpack-plugin&quot;);</span><br><span class="line">const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &quot;./src/main.js&quot;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &quot;dist&quot;),</span><br><span class="line">    filename: &quot;static/js/main.js&quot;, // 将 js 文件输出到 static/js 目录中</span><br><span class="line">    clean: true, // 自动将上次打包目录资源清空</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // 用来匹配 .css 结尾的文件</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        // use 数组里面 Loader 执行顺序是从右到左</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.less$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;less-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.s[ac]ss$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;sass-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.styl$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;stylus-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(png|jpe?g|gif|webp)$/,</span><br><span class="line">        type: &quot;asset&quot;,</span><br><span class="line">        parser: &#123;</span><br><span class="line">          dataUrlCondition: &#123;</span><br><span class="line">            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          // 将图片文件输出到 static/imgs 目录中</span><br><span class="line">          // 将图片文件命名 [hash:8][ext][query]</span><br><span class="line">          // [hash:8]: hash值取8位</span><br><span class="line">          // [ext]: 使用之前的文件扩展名</span><br><span class="line">          // [query]: 添加之前的query参数</span><br><span class="line">          filename: &quot;static/imgs/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(ttf|woff2?)$/,</span><br><span class="line">        type: &quot;asset/resource&quot;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          filename: &quot;static/media/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        exclude: /node_modules/, // 排除node_modules代码不编译</span><br><span class="line">        loader: &quot;babel-loader&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new ESLintWebpackPlugin(&#123;</span><br><span class="line">      // 指定检查文件的根目录</span><br><span class="line">      context: path.resolve(__dirname, &quot;src&quot;),</span><br><span class="line">    &#125;),</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      // 以 public/index.html 为模板创建文件</span><br><span class="line">      // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span><br><span class="line">      template: path.resolve(__dirname, &quot;public/index.html&quot;),</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  </span><br><span class="line">  // +新增</span><br><span class="line">  // 开发服务器</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    host: &quot;localhost&quot;, // 启动服务器域名</span><br><span class="line">    port: &quot;3000&quot;, // 启动服务器端口号</span><br><span class="line">    open: true, // 是否自动打开浏览器</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  mode: &quot;development&quot;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3-运行指令-1"><a href="#3-运行指令-1" class="headerlink" title="3. 运行指令"></a>3. 运行指令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack serve</span><br></pre></td></tr></table></figure><h1 id="生产模式介绍"><a href="#生产模式介绍" class="headerlink" title="生产模式介绍"></a>生产模式介绍</h1><p>生产模式是开发完成代码后，我们需要得到代码将来部署上线。</p><p>这个模式下我们主要对代码进行优化，让其运行性能更好。</p><p>优化主要从两个角度出发:</p><ol><li>优化代码运行性能</li><li>优化代码打包速度</li></ol><h2 id="生产模式准备"><a href="#生产模式准备" class="headerlink" title="生产模式准备"></a>生产模式准备</h2><p>我们分别准备两个配置文件来放不同的配置</p><h3 id="1-文件目录"><a href="#1-文件目录" class="headerlink" title="1. 文件目录"></a>1. 文件目录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">├── webpack-test (项目根目录)</span><br><span class="line">    ├── config (Webpack配置文件目录)</span><br><span class="line">    │    ├── webpack.dev.js(开发模式配置文件)</span><br><span class="line">    │    └── webpack.prod.js(生产模式配置文件)</span><br><span class="line">    ├── node_modules (下载包存放目录)</span><br><span class="line">    ├── src (项目源码目录，除了html其他都在src里面)</span><br><span class="line">    │    └── 略</span><br><span class="line">    ├── public (项目html文件)</span><br><span class="line">    │    └── index.html</span><br><span class="line">    ├── .eslintrc.js(Eslint配置文件)</span><br><span class="line">    ├── babel.config.js(Babel配置文件)</span><br><span class="line">    └── package.json (包的依赖管理配置文件)</span><br></pre></td></tr></table></figure><h3 id="2-修改-webpack-dev-js"><a href="#2-修改-webpack-dev-js" class="headerlink" title="2. 修改 webpack.dev.js"></a>2. 修改 webpack.dev.js</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line">const ESLintWebpackPlugin = require(&quot;eslint-webpack-plugin&quot;);</span><br><span class="line">const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &quot;./src/main.js&quot;,</span><br><span class="line">  output: &#123;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    path: undefined, // 开发模式没有输出，不需要指定输出目录+新增</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    filename: &quot;static/js/main.js&quot;, // 将 js 文件输出到 static/js 目录中</span><br><span class="line">    </span><br><span class="line">    // clean: true, // 开发模式没有输出，不需要清空输出结果+新增</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // 用来匹配 .css 结尾的文件</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        // use 数组里面 Loader 执行顺序是从右到左</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.less$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;less-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.s[ac]ss$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;sass-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.styl$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;stylus-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(png|jpe?g|gif|webp)$/,</span><br><span class="line">        type: &quot;asset&quot;,</span><br><span class="line">        parser: &#123;</span><br><span class="line">          dataUrlCondition: &#123;</span><br><span class="line">            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          // 将图片文件输出到 static/imgs 目录中</span><br><span class="line">          // 将图片文件命名 [hash:8][ext][query]</span><br><span class="line">          // [hash:8]: hash值取8位</span><br><span class="line">          // [ext]: 使用之前的文件扩展名</span><br><span class="line">          // [query]: 添加之前的query参数</span><br><span class="line">          filename: &quot;static/imgs/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(ttf|woff2?)$/,</span><br><span class="line">        type: &quot;asset/resource&quot;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          filename: &quot;static/media/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        exclude: /node_modules/, // 排除node_modules代码不编译</span><br><span class="line">        loader: &quot;babel-loader&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new ESLintWebpackPlugin(&#123;</span><br><span class="line">      // 指定检查文件的根目录</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      context: path.resolve(__dirname, &quot;../src&quot;),// +新增</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">    &#125;),</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      // 以 public/index.html 为模板创建文件</span><br><span class="line">      </span><br><span class="line">      // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span><br><span class="line">      template: path.resolve(__dirname, &quot;../public/index.html&quot;),// +新增</span><br><span class="line">      </span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  // 其他省略</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    host: &quot;localhost&quot;, // 启动服务器域名</span><br><span class="line">    port: &quot;3000&quot;, // 启动服务器端口号</span><br><span class="line">    open: true, // 是否自动打开浏览器</span><br><span class="line">  &#125;,</span><br><span class="line">  mode: &quot;development&quot;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>运行开发模式的指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack serve --config ./config/webpack.dev.js</span><br></pre></td></tr></table></figure><h3 id="3-修改-webpack-prod-js"><a href="#3-修改-webpack-prod-js" class="headerlink" title="3. 修改 webpack.prod.js"></a>3. 修改 webpack.prod.js</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line">const ESLintWebpackPlugin = require(&quot;eslint-webpack-plugin&quot;);</span><br><span class="line">const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &quot;./src/main.js&quot;,</span><br><span class="line">  output: &#123;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    path: path.resolve(__dirname, &quot;../dist&quot;), // 生产模式需要输出+新增</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    filename: &quot;static/js/main.js&quot;, // 将 js 文件输出到 static/js 目录中</span><br><span class="line">    clean: true,</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // 用来匹配 .css 结尾的文件</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        // use 数组里面 Loader 执行顺序是从右到左</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.less$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;less-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.s[ac]ss$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;sass-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.styl$/,</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;, &quot;stylus-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(png|jpe?g|gif|webp)$/,</span><br><span class="line">        type: &quot;asset&quot;,</span><br><span class="line">        parser: &#123;</span><br><span class="line">          dataUrlCondition: &#123;</span><br><span class="line">            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          // 将图片文件输出到 static/imgs 目录中</span><br><span class="line">          // 将图片文件命名 [hash:8][ext][query]</span><br><span class="line">          // [hash:8]: hash值取8位</span><br><span class="line">          // [ext]: 使用之前的文件扩展名</span><br><span class="line">          // [query]: 添加之前的query参数</span><br><span class="line">          filename: &quot;static/imgs/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(ttf|woff2?)$/,</span><br><span class="line">        type: &quot;asset/resource&quot;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          filename: &quot;static/media/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        exclude: /node_modules/, // 排除node_modules代码不编译</span><br><span class="line">        loader: &quot;babel-loader&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new ESLintWebpackPlugin(&#123;</span><br><span class="line">      // 指定检查文件的根目录</span><br><span class="line">      context: path.resolve(__dirname, &quot;../src&quot;),</span><br><span class="line">    &#125;),</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      // 以 public/index.html 为模板创建文件</span><br><span class="line">      // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span><br><span class="line">      template: path.resolve(__dirname, &quot;../public/index.html&quot;),</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  </span><br><span class="line">  // +新增</span><br><span class="line">  // devServer: &#123;</span><br><span class="line">  //   host: &quot;localhost&quot;, // 启动服务器域名</span><br><span class="line">  //   port: &quot;3000&quot;, // 启动服务器端口号</span><br><span class="line">  //   open: true, // 是否自动打开浏览器</span><br><span class="line">  // &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  mode: &quot;production&quot;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>运行生产模式的指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack --config ./config/webpack.prod.js</span><br></pre></td></tr></table></figure><h3 id="4-配置运行指令"><a href="#4-配置运行指令" class="headerlink" title="4. 配置运行指令"></a>4. 配置运行指令</h3><p>为了方便运行不同模式的指令，我们将指令定义在 package.json 中 scripts 里面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">&#123;</span><br><span class="line">  // 其他省略</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;npm run dev&quot;,</span><br><span class="line">    &quot;dev&quot;: &quot;npx webpack serve --config ./config/webpack.dev.js&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;npx webpack --config ./config/webpack.prod.js&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以后启动指令：</p><ul><li>开发模式：<code>npm start</code> 或 <code>npm run dev</code></li><li>生产模式：<code>npm run build</code></li></ul><h1 id="Css-处理"><a href="#Css-处理" class="headerlink" title="Css 处理"></a>Css 处理</h1><h2 id="提取-Css-成单独文件"><a href="#提取-Css-成单独文件" class="headerlink" title="提取 Css 成单独文件"></a>提取 Css 成单独文件</h2><p>Css 文件目前被打包到 js 文件中，当 js 文件加载时，会创建一个 style 标签来生成样式</p><p>这样对于网站来说，会出现闪屏现象，用户体验不好</p><p>我们应该是单独的 Css 文件，通过 link 标签加载性能才好</p><h3 id="1-下载包-5"><a href="#1-下载包-5" class="headerlink" title="1. 下载包"></a>1. 下载包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mini-css-extract-plugin -D</span><br></pre></td></tr></table></figure><h3 id="2-配置-2"><a href="#2-配置-2" class="headerlink" title="2. 配置"></a>2. 配置</h3><ul><li>webpack.prod.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line">const ESLintWebpackPlugin = require(&quot;eslint-webpack-plugin&quot;);</span><br><span class="line">const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);</span><br><span class="line"></span><br><span class="line">// +新增</span><br><span class="line">const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &quot;./src/main.js&quot;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &quot;../dist&quot;), // 生产模式需要输出</span><br><span class="line">    filename: &quot;static/js/main.js&quot;, // 将 js 文件输出到 static/js 目录中</span><br><span class="line">    clean: true,</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // 用来匹配 .css 结尾的文件</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        // use 数组里面 Loader 执行顺序是从右到左</span><br><span class="line">        </span><br><span class="line">        use: [MiniCssExtractPlugin.loader, &quot;css-loader&quot;],// +新增</span><br><span class="line">        </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.less$/,</span><br><span class="line">        </span><br><span class="line">        use: [MiniCssExtractPlugin.loader, &quot;css-loader&quot;, &quot;less-loader&quot;],// +新增</span><br><span class="line">        </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.s[ac]ss$/,</span><br><span class="line">        </span><br><span class="line">        use: [MiniCssExtractPlugin.loader, &quot;css-loader&quot;, &quot;sass-loader&quot;],// +新增</span><br><span class="line">        </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.styl$/,</span><br><span class="line">        </span><br><span class="line">        use: [MiniCssExtractPlugin.loader, &quot;css-loader&quot;, &quot;stylus-loader&quot;],// +新增</span><br><span class="line">        </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(png|jpe?g|gif|webp)$/,</span><br><span class="line">        type: &quot;asset&quot;,</span><br><span class="line">        parser: &#123;</span><br><span class="line">          dataUrlCondition: &#123;</span><br><span class="line">            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          // 将图片文件输出到 static/imgs 目录中</span><br><span class="line">          // 将图片文件命名 [hash:8][ext][query]</span><br><span class="line">          // [hash:8]: hash值取8位</span><br><span class="line">          // [ext]: 使用之前的文件扩展名</span><br><span class="line">          // [query]: 添加之前的query参数</span><br><span class="line">          filename: &quot;static/imgs/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(ttf|woff2?)$/,</span><br><span class="line">        type: &quot;asset/resource&quot;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          filename: &quot;static/media/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        exclude: /node_modules/, // 排除node_modules代码不编译</span><br><span class="line">        loader: &quot;babel-loader&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new ESLintWebpackPlugin(&#123;</span><br><span class="line">      // 指定检查文件的根目录</span><br><span class="line">      context: path.resolve(__dirname, &quot;../src&quot;),</span><br><span class="line">    &#125;),</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      // 以 public/index.html 为模板创建文件</span><br><span class="line">      // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span><br><span class="line">      template: path.resolve(__dirname, &quot;../public/index.html&quot;),</span><br><span class="line">    &#125;),</span><br><span class="line">    </span><br><span class="line">    // +新增</span><br><span class="line">    // 提取css成单独文件</span><br><span class="line">    new MiniCssExtractPlugin(&#123;</span><br><span class="line">      // 定义输出文件名和目录</span><br><span class="line">      filename: &quot;static/css/main.css&quot;,</span><br><span class="line">    &#125;),</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  ],</span><br><span class="line">  // devServer: &#123;</span><br><span class="line">  //   host: &quot;localhost&quot;, // 启动服务器域名</span><br><span class="line">  //   port: &quot;3000&quot;, // 启动服务器端口号</span><br><span class="line">  //   open: true, // 是否自动打开浏览器</span><br><span class="line">  // &#125;,</span><br><span class="line">  mode: &quot;production&quot;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-运行指令-2"><a href="#3-运行指令-2" class="headerlink" title="3. 运行指令"></a>3. 运行指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><h2 id="Css-兼容性处理"><a href="#Css-兼容性处理" class="headerlink" title="Css 兼容性处理"></a>Css 兼容性处理</h2><h3 id="1-下载包-6"><a href="#1-下载包-6" class="headerlink" title="1. 下载包"></a>1. 下载包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i postcss-loader postcss postcss-preset-env -D</span><br></pre></td></tr></table></figure><h3 id="2-配置-3"><a href="#2-配置-3" class="headerlink" title="2. 配置"></a>2. 配置</h3><ul><li>webpack.prod.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line">const ESLintWebpackPlugin = require(&quot;eslint-webpack-plugin&quot;);</span><br><span class="line">const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);</span><br><span class="line">const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &quot;./src/main.js&quot;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &quot;../dist&quot;), // 生产模式需要输出</span><br><span class="line">    filename: &quot;static/js/main.js&quot;, // 将 js 文件输出到 static/js 目录中</span><br><span class="line">    clean: true,</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // 用来匹配 .css 结尾的文件</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        // use 数组里面 Loader 执行顺序是从右到左</span><br><span class="line">        use: [</span><br><span class="line">          MiniCssExtractPlugin.loader,</span><br><span class="line">          &quot;css-loader&quot;,</span><br><span class="line">          </span><br><span class="line">          //+新增</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &quot;postcss-loader&quot;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              postcssOptions: &#123;</span><br><span class="line">                plugins: [</span><br><span class="line">                  &quot;postcss-preset-env&quot;, // 能解决大多数样式兼容性问题</span><br><span class="line">                ],</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.less$/,</span><br><span class="line">        use: [</span><br><span class="line">          MiniCssExtractPlugin.loader,</span><br><span class="line">          &quot;css-loader&quot;,</span><br><span class="line">          </span><br><span class="line">          //+新增</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &quot;postcss-loader&quot;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              postcssOptions: &#123;</span><br><span class="line">                plugins: [</span><br><span class="line">                  &quot;postcss-preset-env&quot;, // 能解决大多数样式兼容性问题</span><br><span class="line">                ],</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          &quot;less-loader&quot;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.s[ac]ss$/,</span><br><span class="line">        use: [</span><br><span class="line">          MiniCssExtractPlugin.loader,</span><br><span class="line">          &quot;css-loader&quot;,</span><br><span class="line">          </span><br><span class="line">          //+新增</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &quot;postcss-loader&quot;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              postcssOptions: &#123;</span><br><span class="line">                plugins: [</span><br><span class="line">                  &quot;postcss-preset-env&quot;, // 能解决大多数样式兼容性问题</span><br><span class="line">                ],</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          &quot;sass-loader&quot;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.styl$/,</span><br><span class="line">        use: [</span><br><span class="line">          MiniCssExtractPlugin.loader,</span><br><span class="line">          &quot;css-loader&quot;,</span><br><span class="line">          </span><br><span class="line">          //+新增</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &quot;postcss-loader&quot;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              postcssOptions: &#123;</span><br><span class="line">                plugins: [</span><br><span class="line">                  &quot;postcss-preset-env&quot;, // 能解决大多数样式兼容性问题</span><br><span class="line">                ],</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          &quot;stylus-loader&quot;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(png|jpe?g|gif|webp)$/,</span><br><span class="line">        type: &quot;asset&quot;,</span><br><span class="line">        parser: &#123;</span><br><span class="line">          dataUrlCondition: &#123;</span><br><span class="line">            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          // 将图片文件输出到 static/imgs 目录中</span><br><span class="line">          // 将图片文件命名 [hash:8][ext][query]</span><br><span class="line">          // [hash:8]: hash值取8位</span><br><span class="line">          // [ext]: 使用之前的文件扩展名</span><br><span class="line">          // [query]: 添加之前的query参数</span><br><span class="line">          filename: &quot;static/imgs/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(ttf|woff2?)$/,</span><br><span class="line">        type: &quot;asset/resource&quot;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          filename: &quot;static/media/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        exclude: /node_modules/, // 排除node_modules代码不编译</span><br><span class="line">        loader: &quot;babel-loader&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new ESLintWebpackPlugin(&#123;</span><br><span class="line">      // 指定检查文件的根目录</span><br><span class="line">      context: path.resolve(__dirname, &quot;../src&quot;),</span><br><span class="line">    &#125;),</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      // 以 public/index.html 为模板创建文件</span><br><span class="line">      // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span><br><span class="line">      template: path.resolve(__dirname, &quot;../public/index.html&quot;),</span><br><span class="line">    &#125;),</span><br><span class="line">    // 提取css成单独文件</span><br><span class="line">    new MiniCssExtractPlugin(&#123;</span><br><span class="line">      // 定义输出文件名和目录</span><br><span class="line">      filename: &quot;static/css/main.css&quot;,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  // devServer: &#123;</span><br><span class="line">  //   host: &quot;localhost&quot;, // 启动服务器域名</span><br><span class="line">  //   port: &quot;3000&quot;, // 启动服务器端口号</span><br><span class="line">  //   open: true, // 是否自动打开浏览器</span><br><span class="line">  // &#125;,</span><br><span class="line">  mode: &quot;production&quot;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-控制兼容性"><a href="#3-控制兼容性" class="headerlink" title="3. 控制兼容性"></a>3. 控制兼容性</h3><p>我们可以在 <code>package.json</code> 文件中添加 <code>browserslist</code> 来控制样式的兼容性做到什么程度。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // 其他省略</span><br><span class="line">  &quot;browserslist&quot;: [&quot;ie &gt;= 8&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想要知道更多的 <code>browserslist</code> 配置，查看<a href="https://github.com/browserslist/browserslist">browserslist 文档open in new window</a></p><p>以上为了测试兼容性所以设置兼容浏览器 ie8 以上。</p><p>实际开发中我们一般不考虑旧版本浏览器了，所以我们可以这样设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // 其他省略</span><br><span class="line">  &quot;browserslist&quot;: [&quot;last 2 version&quot;, &quot;&gt; 1%&quot;, &quot;not dead&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-合并配置"><a href="#4-合并配置" class="headerlink" title="4. 合并配置"></a>4. 合并配置</h3><ul><li>webpack.prod.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line">const ESLintWebpackPlugin = require(&quot;eslint-webpack-plugin&quot;);</span><br><span class="line">const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);</span><br><span class="line">const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);</span><br><span class="line"></span><br><span class="line">// +新增</span><br><span class="line">// 处理css的loaders</span><br><span class="line">const cssLoaders = [</span><br><span class="line">    MiniCssExtractPlugin.loader,</span><br><span class="line">    &quot;css-loader&quot;,</span><br><span class="line">    &#123;</span><br><span class="line">        loader: &quot;postcss-loader&quot;,</span><br><span class="line">        options: &#123;</span><br><span class="line">            postcssOptions: &#123;</span><br><span class="line">                plugins: [</span><br><span class="line">                    &quot;postcss-preset-env&quot;, // 能解决大多数样式兼容性问题</span><br><span class="line">                ],</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &quot;./src/main.js&quot;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &quot;../dist&quot;), // 生产模式需要输出</span><br><span class="line">    filename: &quot;static/js/main.js&quot;, // 将 js 文件输出到 static/js 目录中</span><br><span class="line">    clean: true,</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">          // 用来匹配 .css 结尾的文件</span><br><span class="line">          test: /\.css$/,</span><br><span class="line">          // use 数组里面 Loader 执行顺序是从右到左</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          use: [...cssLoaders],// +新增</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">          test: /\.less$/,</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          use: [...cssLoaders, &quot;less-loader&quot;],//+新增</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">      &#125;, &#123;</span><br><span class="line">          test: /\.s[ac]ss$/,</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          use: [...cssLoaders, &quot;sass-loader&quot;],// +新增</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">      &#125;, &#123;</span><br><span class="line">          test: /\.styl$/,</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          use: [...cssLoaders, &quot;stylus-loader&quot;],// +新增</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        test: /\.(png|jpe?g|gif|webp)$/,</span><br><span class="line">        type: &quot;asset&quot;,</span><br><span class="line">        parser: &#123;</span><br><span class="line">          dataUrlCondition: &#123;</span><br><span class="line">            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          // 将图片文件输出到 static/imgs 目录中</span><br><span class="line">          // 将图片文件命名 [hash:8][ext][query]</span><br><span class="line">          // [hash:8]: hash值取8位</span><br><span class="line">          // [ext]: 使用之前的文件扩展名</span><br><span class="line">          // [query]: 添加之前的query参数</span><br><span class="line">          filename: &quot;static/imgs/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(ttf|woff2?)$/,</span><br><span class="line">        type: &quot;asset/resource&quot;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          filename: &quot;static/media/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        exclude: /node_modules/, // 排除node_modules代码不编译</span><br><span class="line">        loader: &quot;babel-loader&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new ESLintWebpackPlugin(&#123;</span><br><span class="line">      // 指定检查文件的根目录</span><br><span class="line">      context: path.resolve(__dirname, &quot;../src&quot;),</span><br><span class="line">    &#125;),</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      // 以 public/index.html 为模板创建文件</span><br><span class="line">      // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span><br><span class="line">      template: path.resolve(__dirname, &quot;../public/index.html&quot;),</span><br><span class="line">    &#125;),</span><br><span class="line">    // 提取css成单独文件</span><br><span class="line">    new MiniCssExtractPlugin(&#123;</span><br><span class="line">      // 定义输出文件名和目录</span><br><span class="line">      filename: &quot;static/css/main.css&quot;,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  // devServer: &#123;</span><br><span class="line">  //   host: &quot;localhost&quot;, // 启动服务器域名</span><br><span class="line">  //   port: &quot;3000&quot;, // 启动服务器端口号</span><br><span class="line">  //   open: true, // 是否自动打开浏览器</span><br><span class="line">  // &#125;,</span><br><span class="line">  mode: &quot;production&quot;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="5-运行指令-3"><a href="#5-运行指令-3" class="headerlink" title="5. 运行指令"></a>5. 运行指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><h2 id="Css-压缩"><a href="#Css-压缩" class="headerlink" title="Css 压缩"></a>Css 压缩</h2><p>开发中不需要压缩，部署的时候压缩即可</p><h3 id="1-下载包-7"><a href="#1-下载包-7" class="headerlink" title="1. 下载包"></a>1. 下载包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i css-minimizer-webpack-plugin -D</span><br></pre></td></tr></table></figure><h3 id="2-配置-4"><a href="#2-配置-4" class="headerlink" title="2. 配置"></a>2. 配置</h3><ul><li>webpack.prod.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line">const ESLintWebpackPlugin = require(&quot;eslint-webpack-plugin&quot;);</span><br><span class="line">const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);</span><br><span class="line">const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const CssMinimizerPlugin = require(&quot;css-minimizer-webpack-plugin&quot;);// +新增</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 获取处理样式的Loaders</span><br><span class="line">const getStyleLoaders = (preProcessor) =&gt; &#123;</span><br><span class="line">  return [</span><br><span class="line">    MiniCssExtractPlugin.loader,</span><br><span class="line">    &quot;css-loader&quot;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: &quot;postcss-loader&quot;,</span><br><span class="line">      options: &#123;</span><br><span class="line">        postcssOptions: &#123;</span><br><span class="line">          plugins: [</span><br><span class="line">            &quot;postcss-preset-env&quot;, // 能解决大多数样式兼容性问题</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    preProcessor,</span><br><span class="line">  ].filter(Boolean);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &quot;./src/main.js&quot;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &quot;../dist&quot;), // 生产模式需要输出</span><br><span class="line">    filename: &quot;static/js/main.js&quot;, // 将 js 文件输出到 static/js 目录中</span><br><span class="line">    clean: true,</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // 用来匹配 .css 结尾的文件</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        // use 数组里面 Loader 执行顺序是从右到左</span><br><span class="line">        use: getStyleLoaders(),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.less$/,</span><br><span class="line">        use: getStyleLoaders(&quot;less-loader&quot;),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.s[ac]ss$/,</span><br><span class="line">        use: getStyleLoaders(&quot;sass-loader&quot;),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.styl$/,</span><br><span class="line">        use: getStyleLoaders(&quot;stylus-loader&quot;),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(png|jpe?g|gif|webp)$/,</span><br><span class="line">        type: &quot;asset&quot;,</span><br><span class="line">        parser: &#123;</span><br><span class="line">          dataUrlCondition: &#123;</span><br><span class="line">            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          // 将图片文件输出到 static/imgs 目录中</span><br><span class="line">          // 将图片文件命名 [hash:8][ext][query]</span><br><span class="line">          // [hash:8]: hash值取8位</span><br><span class="line">          // [ext]: 使用之前的文件扩展名</span><br><span class="line">          // [query]: 添加之前的query参数</span><br><span class="line">          filename: &quot;static/imgs/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(ttf|woff2?)$/,</span><br><span class="line">        type: &quot;asset/resource&quot;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          filename: &quot;static/media/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        exclude: /node_modules/, // 排除node_modules代码不编译</span><br><span class="line">        loader: &quot;babel-loader&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new ESLintWebpackPlugin(&#123;</span><br><span class="line">      // 指定检查文件的根目录</span><br><span class="line">      context: path.resolve(__dirname, &quot;../src&quot;),</span><br><span class="line">    &#125;),</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      // 以 public/index.html 为模板创建文件</span><br><span class="line">      // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span><br><span class="line">      template: path.resolve(__dirname, &quot;../public/index.html&quot;),</span><br><span class="line">    &#125;),</span><br><span class="line">    // 提取css成单独文件</span><br><span class="line">    new MiniCssExtractPlugin(&#123;</span><br><span class="line">      // 定义输出文件名和目录</span><br><span class="line">      filename: &quot;static/css/main.css&quot;,</span><br><span class="line">    &#125;),</span><br><span class="line">    </span><br><span class="line">    // +新增</span><br><span class="line">    // css压缩</span><br><span class="line">    new CssMinimizerPlugin(),</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  ],</span><br><span class="line">  // devServer: &#123;</span><br><span class="line">  //   host: &quot;localhost&quot;, // 启动服务器域名</span><br><span class="line">  //   port: &quot;3000&quot;, // 启动服务器端口号</span><br><span class="line">  //   open: true, // 是否自动打开浏览器</span><br><span class="line">  // &#125;,</span><br><span class="line">  mode: &quot;production&quot;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="提取-Css-成单独文件-1"><a href="#提取-Css-成单独文件-1" class="headerlink" title="提取 Css 成单独文件"></a>提取 Css 成单独文件</h2><p>Css 文件目前被打包到 js 文件中，当 js 文件加载时，会创建一个 style 标签来生成样式</p><p>这样对于网站来说，会出现闪屏现象，用户体验不好</p><p>我们应该是单独的 Css 文件，通过 link 标签加载性能才好</p><h3 id="1-下载包-8"><a href="#1-下载包-8" class="headerlink" title="1. 下载包"></a>1. 下载包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mini-css-extract-plugin -D</span><br></pre></td></tr></table></figure><h3 id="2-配置-5"><a href="#2-配置-5" class="headerlink" title="2. 配置"></a>2. 配置</h3><ul><li>webpack.prod.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line">const ESLintWebpackPlugin = require(&quot;eslint-webpack-plugin&quot;);</span><br><span class="line">const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);</span><br><span class="line">const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &quot;./src/main.js&quot;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &quot;../dist&quot;), // 生产模式需要输出</span><br><span class="line">    filename: &quot;static/js/main.js&quot;, // 将 js 文件输出到 static/js 目录中</span><br><span class="line">    clean: true,</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // 用来匹配 .css 结尾的文件</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        // use 数组里面 Loader 执行顺序是从右到左</span><br><span class="line">        </span><br><span class="line">        // +新增</span><br><span class="line">        use: [MiniCssExtractPlugin.loader, &quot;css-loader&quot;],</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.less$/,</span><br><span class="line">        </span><br><span class="line">        //+新增</span><br><span class="line">        use: [MiniCssExtractPlugin.loader, &quot;css-loader&quot;, &quot;less-loader&quot;],</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.s[ac]ss$/,</span><br><span class="line">        </span><br><span class="line">        // +新增</span><br><span class="line">        use: [MiniCssExtractPlugin.loader, &quot;css-loader&quot;, &quot;sass-loader&quot;],</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.styl$/,</span><br><span class="line">        </span><br><span class="line">        // +新增</span><br><span class="line">        use: [MiniCssExtractPlugin.loader, &quot;css-loader&quot;, &quot;stylus-loader&quot;],</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(png|jpe?g|gif|webp)$/,</span><br><span class="line">        type: &quot;asset&quot;,</span><br><span class="line">        parser: &#123;</span><br><span class="line">          dataUrlCondition: &#123;</span><br><span class="line">            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          // 将图片文件输出到 static/imgs 目录中</span><br><span class="line">          // 将图片文件命名 [hash:8][ext][query]</span><br><span class="line">          // [hash:8]: hash值取8位</span><br><span class="line">          // [ext]: 使用之前的文件扩展名</span><br><span class="line">          // [query]: 添加之前的query参数</span><br><span class="line">          filename: &quot;static/imgs/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(ttf|woff2?)$/,</span><br><span class="line">        type: &quot;asset/resource&quot;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          filename: &quot;static/media/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        exclude: /node_modules/, // 排除node_modules代码不编译</span><br><span class="line">        loader: &quot;babel-loader&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new ESLintWebpackPlugin(&#123;</span><br><span class="line">      // 指定检查文件的根目录</span><br><span class="line">      context: path.resolve(__dirname, &quot;../src&quot;),</span><br><span class="line">    &#125;),</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      // 以 public/index.html 为模板创建文件</span><br><span class="line">      // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span><br><span class="line">      template: path.resolve(__dirname, &quot;../public/index.html&quot;),</span><br><span class="line">    &#125;),</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    // +新增</span><br><span class="line">    // 提取css成单独文件</span><br><span class="line">    new MiniCssExtractPlugin(&#123;</span><br><span class="line">      // 定义输出文件名和目录</span><br><span class="line">      filename: &quot;static/css/main.css&quot;,</span><br><span class="line">    &#125;),</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  ],</span><br><span class="line">  // devServer: &#123;</span><br><span class="line">  //   host: &quot;localhost&quot;, // 启动服务器域名</span><br><span class="line">  //   port: &quot;3000&quot;, // 启动服务器端口号</span><br><span class="line">  //   open: true, // 是否自动打开浏览器</span><br><span class="line">  // &#125;,</span><br><span class="line">  mode: &quot;production&quot;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-运行指令-3"><a href="#3-运行指令-3" class="headerlink" title="3. 运行指令"></a>3. 运行指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><h2 id="Css-兼容性处理-1"><a href="#Css-兼容性处理-1" class="headerlink" title="Css 兼容性处理"></a>Css 兼容性处理</h2><h3 id="1-下载包-9"><a href="#1-下载包-9" class="headerlink" title="1. 下载包"></a>1. 下载包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i postcss-loader postcss postcss-preset-env -D</span><br></pre></td></tr></table></figure><h3 id="2-配置-6"><a href="#2-配置-6" class="headerlink" title="2. 配置"></a>2. 配置</h3><ul><li>webpack.prod.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line">const ESLintWebpackPlugin = require(&quot;eslint-webpack-plugin&quot;);</span><br><span class="line">const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);</span><br><span class="line">const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &quot;./src/main.js&quot;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &quot;../dist&quot;), // 生产模式需要输出</span><br><span class="line">    filename: &quot;static/js/main.js&quot;, // 将 js 文件输出到 static/js 目录中</span><br><span class="line">    clean: true,</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // 用来匹配 .css 结尾的文件</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        // use 数组里面 Loader 执行顺序是从右到左</span><br><span class="line">        use: [</span><br><span class="line">          MiniCssExtractPlugin.loader,</span><br><span class="line">          &quot;css-loader&quot;,</span><br><span class="line">          </span><br><span class="line">          // +新增</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &quot;postcss-loader&quot;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              postcssOptions: &#123;</span><br><span class="line">                plugins: [</span><br><span class="line">                  &quot;postcss-preset-env&quot;, // 能解决大多数样式兼容性问题</span><br><span class="line">                ],</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.less$/,</span><br><span class="line">        use: [</span><br><span class="line">          MiniCssExtractPlugin.loader,</span><br><span class="line">          &quot;css-loader&quot;,</span><br><span class="line">          </span><br><span class="line">          // +新增</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &quot;postcss-loader&quot;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              postcssOptions: &#123;</span><br><span class="line">                plugins: [</span><br><span class="line">                  &quot;postcss-preset-env&quot;, // 能解决大多数样式兼容性问题</span><br><span class="line">                ],</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          &quot;less-loader&quot;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.s[ac]ss$/,</span><br><span class="line">        use: [</span><br><span class="line">          MiniCssExtractPlugin.loader,</span><br><span class="line">          &quot;css-loader&quot;,</span><br><span class="line">          </span><br><span class="line">          // +新增</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &quot;postcss-loader&quot;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              postcssOptions: &#123;</span><br><span class="line">                plugins: [</span><br><span class="line">                  &quot;postcss-preset-env&quot;, // 能解决大多数样式兼容性问题</span><br><span class="line">                ],</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          &quot;sass-loader&quot;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.styl$/,</span><br><span class="line">        use: [</span><br><span class="line">          MiniCssExtractPlugin.loader,</span><br><span class="line">          &quot;css-loader&quot;,</span><br><span class="line">          </span><br><span class="line">          // +新增</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &quot;postcss-loader&quot;,</span><br><span class="line">            options: &#123;</span><br><span class="line">              postcssOptions: &#123;</span><br><span class="line">                plugins: [</span><br><span class="line">                  &quot;postcss-preset-env&quot;, // 能解决大多数样式兼容性问题</span><br><span class="line">                ],</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          &quot;stylus-loader&quot;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(png|jpe?g|gif|webp)$/,</span><br><span class="line">        type: &quot;asset&quot;,</span><br><span class="line">        parser: &#123;</span><br><span class="line">          dataUrlCondition: &#123;</span><br><span class="line">            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          // 将图片文件输出到 static/imgs 目录中</span><br><span class="line">          // 将图片文件命名 [hash:8][ext][query]</span><br><span class="line">          // [hash:8]: hash值取8位</span><br><span class="line">          // [ext]: 使用之前的文件扩展名</span><br><span class="line">          // [query]: 添加之前的query参数</span><br><span class="line">          filename: &quot;static/imgs/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(ttf|woff2?)$/,</span><br><span class="line">        type: &quot;asset/resource&quot;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          filename: &quot;static/media/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        exclude: /node_modules/, // 排除node_modules代码不编译</span><br><span class="line">        loader: &quot;babel-loader&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new ESLintWebpackPlugin(&#123;</span><br><span class="line">      // 指定检查文件的根目录</span><br><span class="line">      context: path.resolve(__dirname, &quot;../src&quot;),</span><br><span class="line">    &#125;),</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      // 以 public/index.html 为模板创建文件</span><br><span class="line">      // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span><br><span class="line">      template: path.resolve(__dirname, &quot;../public/index.html&quot;),</span><br><span class="line">    &#125;),</span><br><span class="line">    // 提取css成单独文件</span><br><span class="line">    new MiniCssExtractPlugin(&#123;</span><br><span class="line">      // 定义输出文件名和目录</span><br><span class="line">      filename: &quot;static/css/main.css&quot;,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  // devServer: &#123;</span><br><span class="line">  //   host: &quot;localhost&quot;, // 启动服务器域名</span><br><span class="line">  //   port: &quot;3000&quot;, // 启动服务器端口号</span><br><span class="line">  //   open: true, // 是否自动打开浏览器</span><br><span class="line">  // &#125;,</span><br><span class="line">  mode: &quot;production&quot;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-控制兼容性-1"><a href="#3-控制兼容性-1" class="headerlink" title="3. 控制兼容性"></a>3. 控制兼容性</h3><p>我们可以在 <code>package.json</code> 文件中添加 <code>browserslist</code> 来控制样式的兼容性做到什么程度。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // 其他省略</span><br><span class="line">  &quot;browserslist&quot;: [&quot;ie &gt;= 8&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想要知道更多的 <code>browserslist</code> 配置，查看<a href="https://github.com/browserslist/browserslist">browserslist 文档open in new window</a></p><p>以上为了测试兼容性所以设置兼容浏览器 ie8 以上。</p><p>实际开发中我们一般不考虑旧版本浏览器了，所以我们可以这样设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // 其他省略</span><br><span class="line">  &quot;browserslist&quot;: [&quot;last 2 version&quot;, &quot;&gt; 1%&quot;, &quot;not dead&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-合并配置-1"><a href="#4-合并配置-1" class="headerlink" title="4. 合并配置"></a>4. 合并配置</h3><ul><li>webpack.prod.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line">const ESLintWebpackPlugin = require(&quot;eslint-webpack-plugin&quot;);</span><br><span class="line">const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);</span><br><span class="line">const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// +新增</span><br><span class="line">// 处理css的loaders</span><br><span class="line">const cssLoaders = [</span><br><span class="line">    MiniCssExtractPlugin.loader,</span><br><span class="line">    &quot;css-loader&quot;,</span><br><span class="line">    &#123;</span><br><span class="line">        loader: &quot;postcss-loader&quot;,</span><br><span class="line">        options: &#123;</span><br><span class="line">            postcssOptions: &#123;</span><br><span class="line">                plugins: [</span><br><span class="line">                    &quot;postcss-preset-env&quot;, // 能解决大多数样式兼容性问题</span><br><span class="line">                ],</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &quot;./src/main.js&quot;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &quot;../dist&quot;), // 生产模式需要输出</span><br><span class="line">    filename: &quot;static/js/main.js&quot;, // 将 js 文件输出到 static/js 目录中</span><br><span class="line">    clean: true,</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">          // 用来匹配 .css 结尾的文件</span><br><span class="line">          test: /\.css$/,</span><br><span class="line">          // use 数组里面 Loader 执行顺序是从右到左</span><br><span class="line">          </span><br><span class="line">          // +新增</span><br><span class="line">          use: [...cssLoaders],</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">          test: /\.less$/,</span><br><span class="line">          </span><br><span class="line">          // +新增</span><br><span class="line">          use: [...cssLoaders, &quot;less-loader&quot;],</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">      &#125;, &#123;</span><br><span class="line">          test: /\.s[ac]ss$/,</span><br><span class="line">          </span><br><span class="line">          // +新增</span><br><span class="line">          use: [...cssLoaders, &quot;sass-loader&quot;],</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">      &#125;, &#123;</span><br><span class="line">          test: /\.styl$/,</span><br><span class="line">          </span><br><span class="line">          // +新增</span><br><span class="line">          use: [...cssLoaders, &quot;stylus-loader&quot;],</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        test: /\.(png|jpe?g|gif|webp)$/,</span><br><span class="line">        type: &quot;asset&quot;,</span><br><span class="line">        parser: &#123;</span><br><span class="line">          dataUrlCondition: &#123;</span><br><span class="line">            maxSize: 10 * 1024, // 小于10kb的图片会被base64处理</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          // 将图片文件输出到 static/imgs 目录中</span><br><span class="line">          // 将图片文件命名 [hash:8][ext][query]</span><br><span class="line">          // [hash:8]: hash值取8位</span><br><span class="line">          // [ext]: 使用之前的文件扩展名</span><br><span class="line">          // [query]: 添加之前的query参数</span><br><span class="line">          filename: &quot;static/imgs/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(ttf|woff2?)$/,</span><br><span class="line">        type: &quot;asset/resource&quot;,</span><br><span class="line">        generator: &#123;</span><br><span class="line">          filename: &quot;static/media/[hash:8][ext][query]&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        exclude: /node_modules/, // 排除node_modules代码不编译</span><br><span class="line">        loader: &quot;babel-loader&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new ESLintWebpackPlugin(&#123;</span><br><span class="line">      // 指定检查文件的根目录</span><br><span class="line">      context: path.resolve(__dirname, &quot;../src&quot;),</span><br><span class="line">    &#125;),</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      // 以 public/index.html 为模板创建文件</span><br><span class="line">      // 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span><br><span class="line">      template: path.resolve(__dirname, &quot;../public/index.html&quot;),</span><br><span class="line">    &#125;),</span><br><span class="line">    // 提取css成单独文件</span><br><span class="line">    new MiniCssExtractPlugin(&#123;</span><br><span class="line">      // 定义输出文件名和目录</span><br><span class="line">      filename: &quot;static/css/main.css&quot;,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  // devServer: &#123;</span><br><span class="line">  //   host: &quot;localhost&quot;, // 启动服务器域名</span><br><span class="line">  //   port: &quot;3000&quot;, // 启动服务器端口号</span><br><span class="line">  //   open: true, // 是否自动打开浏览器</span><br><span class="line">  // &#125;,</span><br><span class="line">  mode: &quot;production&quot;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-运行指令-4"><a href="#3-运行指令-4" class="headerlink" title="3. 运行指令"></a>3. 运行指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;webpack基本使用&quot;&gt;&lt;a href=&quot;#webpack基本使用&quot; class=&quot;headerlink&quot; title=&quot;webpack基本使用&quot;&gt;&lt;/a&gt;webpack基本使用&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Webpack 是一个静态资源打包工具。&lt;/stro</summary>
      
    
    
    
    <category term="资料" scheme="http://example.com/categories/%E8%B5%84%E6%96%99/"/>
    
    
    <category term="Webpack" scheme="http://example.com/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>初识(九)</title>
    <link href="http://example.com/2022/11/06/%E5%88%9D%E8%AF%86-%E4%B9%9D/"/>
    <id>http://example.com/2022/11/06/%E5%88%9D%E8%AF%86-%E4%B9%9D/</id>
    <published>2022-11-06T03:51:22.000Z</published>
    <updated>2022-11-06T03:56:09.742Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><p>起因：vue组件通信有父传子、子传父、eventBus这些方式进行组件通信</p><p>概念：vuex是为了解决跨组件数据通信，vuex是一个集中式数据化管理模式，实现数据共享，所有组件都能共享。</p><h3 id="vuex使用"><a href="#vuex使用" class="headerlink" title="vuex使用"></a>vuex使用</h3><p>1.安装 npm i vuex@3</p><p>2.在项目中创建一个文件夹 store 在文件夹中创建js文件来处理vuex相关的内容。</p><p>3.在store&#x2F;index.js 文件中编写 vuex 相关代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">import vuex from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">Vue.use(vuex)</span><br><span class="line"></span><br><span class="line">const store = new vuex.Store( &#123; state: &#123; &#125; &#125; )</span><br><span class="line"></span><br><span class="line">export default store</span><br></pre></td></tr></table></figure><ol><li>在 mian.js 文件中导入 store&#x2F;index.js</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import store from &#x27;@/store&#x27;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  store,</span><br><span class="line">  render: h =&gt; h(App),</span><br><span class="line">&#125;).$mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><h3 id="vuex基础-state"><a href="#vuex基础-state" class="headerlink" title="vuex基础-state"></a>vuex基础-state</h3><p>state是放置所有公共状态的属性，如果你有一个公共状态数据 ， 你只需要定义在 state对象中</p><p><strong>定义state</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化vuex对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="comment">// 管理数据</span></span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>如何在组件中获取count?</p></blockquote><h4 id="原始形式-插值表达式"><a href="#原始形式-插值表达式" class="headerlink" title="原始形式- 插值表达式"></a><strong>原始形式</strong>- 插值表达式</h4><p><strong><code>App.vue</code></strong></p><p>组件中可以使用  <strong>this.$store</strong> 获取到vuex中的store对象实例，可通过<strong>state</strong>属性属性获取<strong>count</strong>， 如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt; state的数据：&#123;&#123; $store.state.count &#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>计算属性</strong> - 将state属性定义在计算属性中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把state中数据，定义在组件内的计算属性中</span></span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">count</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt; state的数据：&#123;&#123; count &#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="辅助函数-mapState"><a href="#辅助函数-mapState" class="headerlink" title="辅助函数  - mapState"></a><strong>辅助函数</strong>  - mapState</h4><blockquote><p>mapState是辅助函数，帮助我们把store中的数据映射到 组件的计算属性中, 它属于一种方便用法</p></blockquote><p>用法 ： 第一步：导入mapState</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br></pre></td></tr></table></figure><p>第二步：采用数组形式引入state属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">mapState</span>([<span class="string">&#x27;count&#x27;</span>]) </span><br></pre></td></tr></table></figure><blockquote><p>上面代码的最终得到的是 <strong>类似</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">count () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">count</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步：利用<strong>延展运算符</strong>将导出的状态映射给计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  ...<span class="title function_">mapState</span>([<span class="string">&#x27;count&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt; state的数据：&#123;&#123; count &#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="vuex基础-mutations"><a href="#vuex基础-mutations" class="headerlink" title="vuex基础-mutations"></a>vuex基础-mutations</h3><blockquote><p>state数据的修改只能通过mutations，并且mutations必须是同步更新，目的是形成**<code>数据快照</code>**</p></blockquote><p>数据快照：一次mutation的执行，<strong>立刻</strong>得到一种视图状态，因为是立刻，所以必须是同步</p><p><strong>定义mutations</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store  = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 定义mutations</span></span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">     </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>格式说明</strong></p><p>mutations是一个对象，对象中存放修改state的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="comment">// 方法里参数 第一个参数是当前store的state属性</span></span><br><span class="line">    <span class="comment">// payload 载荷 运输参数 调用mutaiions的时候 可以传递参数 传递载荷</span></span><br><span class="line">    addCount (state) &#123;</span><br><span class="line">      state.<span class="property">count</span> += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><blockquote><p>如何在组件中调用mutations</p></blockquote><h4 id="原始形式-store"><a href="#原始形式-store" class="headerlink" title="原始形式-$store"></a><strong>原始形式</strong>-$store</h4><blockquote><p>新建组件child-a.vue，内容为一个button按钮，点击按钮调用mutations</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;addCount&quot;&gt;+1&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">    //   调用方法</span><br><span class="line">      addCount () &#123;</span><br><span class="line">         // 调用store中的mutations 提交给muations</span><br><span class="line">        // commit(&#x27;muations名称&#x27;, 2)</span><br><span class="line">        this.$store.commit(&#x27;addCount&#x27;, 10)  // 直接调用mutations</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>带参数的传递</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">addCount (state, payload) &#123;</span><br><span class="line">    state.<span class="property">count</span> += payload</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;addCount&#x27;</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><h4 id="辅助函数-mapMutations"><a href="#辅助函数-mapMutations" class="headerlink" title="辅助函数 - mapMutations"></a><strong>辅助函数</strong> - mapMutations</h4><blockquote><p>mapMutations和mapState很像，它把位于mutations中的方法提取了出来，我们可以将它导入</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  &#123; mapMutations &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;addCount&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面代码的含义是将mutations的方法导入了methods中，等同于</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">      <span class="comment">// commit(方法名, 载荷参数)</span></span><br><span class="line">      addCount () &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;addCount&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>此时，就可以直接通过this.addCount调用了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;addCount(100)&quot;&gt;+100&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>但是请注意： Vuex中mutations中要求不能写异步代码，如果有异步的ajax请求，应该放置在actions中</p><h3 id="vuex基础-actions"><a href="#vuex基础-actions" class="headerlink" title="vuex基础-actions"></a>vuex基础-actions</h3><blockquote><p>state是存放数据的，mutations是同步更新数据，actions则负责进行异步操作</p></blockquote><p><strong>定义actions</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line"> <span class="comment">//  获取异步的数据 context表示当前的store的实例 可以通过 context.state 获取状态 也可以通过context.commit 来提交mutations， 也可以 context.diapatch调用其他的action</span></span><br><span class="line">   <span class="keyword">async</span> getAsyncCount (context) &#123;</span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="comment">// 一秒钟之后 要给一个数 去修改state</span></span><br><span class="line">       context.<span class="title function_">commit</span>(<span class="string">&#x27;addCount&#x27;</span>, <span class="number">123</span>)</span><br><span class="line">     &#125;, <span class="number">1000</span>)</span><br><span class="line">       </span><br><span class="line">     <span class="comment">//axios(&#123;.....&#125;).then(res=&gt;&#123;</span></span><br><span class="line">     <span class="comment">//    context.commit(&quot;xxx&quot;.res.data)</span></span><br><span class="line">     <span class="comment">//&#125;)</span></span><br><span class="line">       </span><br><span class="line">     <span class="comment">//const &#123;data:result&#125; = await axios(&#123;...&#125;)</span></span><br><span class="line">     <span class="comment">//context.commit(&quot;xxx&quot;.res.data)</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="原始调用-store"><a href="#原始调用-store" class="headerlink" title="原始调用 - $store"></a><strong>原始调用</strong> - $store</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">addAsyncCount () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;getAsyncCount&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>传参调用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">addAsyncCount () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;getAsyncCount&#x27;</span>, <span class="number">123</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="辅助函数-mapActions"><a href="#辅助函数-mapActions" class="headerlink" title="辅助函数 -mapActions"></a><strong>辅助函数</strong> -mapActions</h4><blockquote><p>actions也有辅助函数，可以将action导入到组件中</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;getAsyncCount&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接通过 this.方法就可以调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;getAsyncCount(111)&quot;&gt;+异步&lt;/button&gt;</span><br></pre></td></tr></table></figure><h3 id="vuex基础-getters"><a href="#vuex基础-getters" class="headerlink" title="vuex基础-getters"></a>vuex基础-getters</h3><blockquote><p>除了state之外，有时我们还需要从state中派生出一些状态，这些状态是依赖state的，此时会用到getters</p></blockquote><p>例如，state中定义了list，为1-10的数组，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">list</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件中，需要显示所有大于5的数据，正常的方式，是需要list在组件中进行再一步的处理，但是getters可以帮助我们实现它</p><p><strong>定义getters</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line">  <span class="comment">// getters函数的第一个参数是 state</span></span><br><span class="line">  <span class="comment">// 必须要有返回值</span></span><br><span class="line">   <span class="attr">filterList</span>:  <span class="function"><span class="params">state</span> =&gt;</span>  state.<span class="property">list</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">5</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用getters</p><h4 id="原始方式-store"><a href="#原始方式-store" class="headerlink" title="原始方式 -$store"></a><strong>原始方式</strong> -$store</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123; $store.getters.filterList &#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="辅助函数-mapGetters"><a href="#辅助函数-mapGetters" class="headerlink" title="辅助函数 - mapGetters"></a><strong>辅助函数</strong> - mapGetters</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;filterList&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123; filterList &#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="Vuex中的模块化-Module"><a href="#Vuex中的模块化-Module" class="headerlink" title="Vuex中的模块化-Module"></a>Vuex中的模块化-Module</h3><p>定义两个模块   <strong>user</strong> 和  <strong>setting</strong></p><p>user中管理用户的状态  token </p><p>setting中管理 应用的名称 name</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store  = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">user</span>: &#123;</span><br><span class="line">       <span class="attr">state</span>: &#123;</span><br><span class="line">         <span class="attr">token</span>: <span class="string">&#x27;12345&#x27;</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">setting</span>: &#123;</span><br><span class="line">      <span class="attr">state</span>: &#123;</span><br><span class="line">         <span class="attr">name</span>: <span class="string">&#x27;Vuex实例&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>定义child-b组件，分别显示用户的token和应用名称name</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;div&gt;用户token &#123;&#123; $store.state.user.token &#125;&#125;&lt;/div&gt;</span><br><span class="line">      &lt;div&gt;网站名称 &#123;&#123; $store.state.setting.name &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>请注意： 此时要获取子模块的状态 需要通过 $store.<strong><code>state</code></strong>.<strong><code>模块名称</code></strong>.<strong><code>属性名</code></strong> 来获取</p><blockquote><p>看着获取有点麻烦，我们可以通过之前学过的getters来改变一下</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line">  <span class="attr">token</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">user</span>.<span class="property">token</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">setting</span>.<span class="property">name</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>请注意：这个getters是根级别的getters哦</p><p><strong>通过mapGetters引用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">      ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;token&#x27;</span>, <span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模块化中的命名空间"><a href="#模块化中的命名空间" class="headerlink" title="模块化中的命名空间"></a>模块化中的命名空间</h3><p><strong>命名空间</strong>  <strong><code>namespaced</code></strong></p><blockquote><p>这里注意理解</p></blockquote><p>默认情况下，模块内部的 action、mutation 和 getter 是注册在<strong>全局命名空间</strong>的——这样使得多个模块能够对同一 mutation 或 action 作出响应。</p><blockquote><p>这句话的意思是 刚才的user模块还是setting模块，它的 action、mutation 和 getter 其实并没有区分，都可以直接通过全局的方式调用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  user: &#123;</span><br><span class="line">   state: &#123;</span><br><span class="line">     token: &#x27;12345&#x27;</span><br><span class="line">   &#125;,</span><br><span class="line">   mutations: &#123;</span><br><span class="line">    //  这里的state表示的是user的state</span><br><span class="line">     updateToken (state) &#123;</span><br><span class="line">        state.token = 678910</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong>通过mapMutations调用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">      ...mapMutations([&#x27;updateToken&#x27;])</span><br><span class="line"> &#125;</span><br><span class="line">&lt;button @click=&quot;updateToken&quot;&gt;修改token&lt;/button&gt;</span><br></pre></td></tr></table></figure><blockquote><p>但是，如果我们想保证内部模块的高封闭性，我们可以采用namespaced来进行设置</p></blockquote><p>高封闭性？可以理解成 <strong>一家人如果分家了，此时，你的爸妈可以随意的进出分给你的小家，你觉得自己没什么隐私了，我们可以给自己的房门加一道锁（命名空间 namespaced）,你的父母再也不能进出你的小家了</strong></p><p>如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user</span>: &#123;</span><br><span class="line">     <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">     <span class="attr">state</span>: &#123;</span><br><span class="line">       <span class="attr">token</span>: <span class="string">&#x27;12345&#x27;</span></span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">mutations</span>: &#123;</span><br><span class="line">      <span class="comment">//  这里的state表示的是user的state</span></span><br><span class="line">       updateToken (state) &#123;</span><br><span class="line">          state.<span class="property">token</span> = <span class="number">678910</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>使用带命名空间的模块 <strong><code>action/mutations</code></strong></p><p>方案1：<strong>直接调用-带上模块的属性名路径</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test () &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;user/updateToken&#x27;</span>) <span class="comment">// 直接调用方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方案2：<strong>辅助函数-带上模块的属性名路径</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">     ...mapMutations([&#x27;user/updateToken&#x27;]),</span><br><span class="line">     test () &#123;</span><br><span class="line">         this[&#x27;user/updateToken&#x27;]()</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&lt;button @click=&quot;test&quot;&gt;修改token&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>方案3： <strong>createNamespacedHelpers</strong>  创建基于某个命名空间辅助函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; mapGetters, createNamespacedHelpers &#125; from &#x27;vuex&#x27;</span><br><span class="line">const &#123; mapMutations &#125; = createNamespacedHelpers(&#x27;user&#x27;)</span><br><span class="line">&lt;button @click=&quot;updateToken&quot;&gt;修改token2&lt;/button&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Vuex&quot;&gt;&lt;a href=&quot;#Vuex&quot; class=&quot;headerlink&quot; title=&quot;Vuex&quot;&gt;&lt;/a&gt;Vuex&lt;/h2&gt;&lt;p&gt;起因：vue组件通信有父传子、子传父、eventBus这些方式进行组件通信&lt;/p&gt;
&lt;p&gt;概念：vuex是为了解决跨组件数据</summary>
      
    
    
    
    <category term="资料" scheme="http://example.com/categories/%E8%B5%84%E6%96%99/"/>
    
    
    <category term="Vuex" scheme="http://example.com/tags/Vuex/"/>
    
  </entry>
  
  <entry>
    <title>初识(八)</title>
    <link href="http://example.com/2022/11/06/%E5%88%9D%E8%AF%86-%E5%85%AB/"/>
    <id>http://example.com/2022/11/06/%E5%88%9D%E8%AF%86-%E5%85%AB/</id>
    <published>2022-11-06T03:49:12.000Z</published>
    <updated>2022-11-06T04:03:23.693Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><h3 id="1-基础使用"><a href="#1-基础使用" class="headerlink" title="1. 基础使用"></a>1. 基础使用</h3><p>1.1.把@vue&#x2F;cli模块包按到全局, 电脑拥有vue命令, 才能创建脚手架工程</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yarn global add @vue/cli</span><br><span class="line"># OR</span><br><span class="line">npm install -g @vue/cli</span><br><span class="line">查看vue脚手架版本</span><br><span class="line">vue -V</span><br></pre></td></tr></table></figure><p>1.2.创建项目</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># vue和create是命令, vuecli-demo是文件夹名</span><br><span class="line">vue create vuecli-demo</span><br></pre></td></tr></table></figure><p>1.3.进入脚手架项目下, 启动内置的热更新本地服务器</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> vuecil-demo</span><br><span class="line"></span><br><span class="line">npm run serve</span><br><span class="line"># 或</span><br><span class="line">yarn serve</span><br></pre></td></tr></table></figure><p>1.4.设置src并列处新建vue.config.js</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* 覆盖webpack的配置 */</span><br><span class="line">module.exports = &#123;</span><br><span class="line"><span class="function">  devServer: &#123; // 自定义服务配置</span></span><br><span class="line"><span class="function">    <span class="title">open</span>: <span class="title">true</span>, // 自动打开浏览器</span></span><br><span class="line"><span class="function">    <span class="title">port</span>: 3000</span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>1.5.暂时关闭eslint检查</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line"><span class="function">  lintOnSave: <span class="title">false</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="1-1-yarn的基本使用"><a href="#1-1-yarn的基本使用" class="headerlink" title="1.1 yarn的基本使用"></a>1.1 yarn的基本使用</h4><p>与npm类似</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 初始化, 得到package.json文件(终端路径所在文件夹下)</span></span><br><span class="line">yarn init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 添加依赖(下包)</span></span><br><span class="line"><span class="comment"># 命令: yarn add [package]</span></span><br><span class="line"><span class="comment"># 命令: yarn add [package]@[version]</span></span><br><span class="line">yarn add jquery</span><br><span class="line">yarn add jquery@3.5.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 移除包</span></span><br><span class="line"><span class="comment"># 命令: yarn remove [package]</span></span><br><span class="line">yarn remove jquery</span><br><span class="line">             </span><br><span class="line"><span class="comment"># 4. 安装项目全部依赖(一般拿到别人的项目时, 缺少node_modules)          </span></span><br><span class="line">yarn</span><br><span class="line"><span class="comment"># 会根据当前项目package.json记录的包名和版本, 全部下载到当前工程中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 全局</span></span><br><span class="line"><span class="comment"># 安装: yarn global add [package]</span></span><br><span class="line"><span class="comment"># 卸载: yarn global remove [package]</span></span><br><span class="line"><span class="comment"># 注意: global一定在add左边</span></span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure><p>package.json中的dependencies和 devDependencies区别和作用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies  别人使用你的包必须下载的依赖, 比如yarn add  jquery</span><br><span class="line">  </span><br><span class="line">devDependencies 开发你的包需要依赖的包,  比如yarn add webpack  webpack-cli -D (-D 相当于 --save-dev)</span><br></pre></td></tr></table></figure><h4 id="2-3-v-on"><a href="#2-3-v-on" class="headerlink" title="2.3 v-on"></a>2.3 v-on</h4><h5 id="2-3-1-给标签绑定事件"><a href="#2-3-1-给标签绑定事件" class="headerlink" title="2.3.1 给标签绑定事件"></a>2.3.1 给标签绑定事件</h5><ul><li>语法<ul><li>v-on:事件名&#x3D;”要执行的&#x3D;&#x3D;少量代码&#x3D;&#x3D;”</li><li>v-on:事件名&#x3D;”methods中的函数”</li><li>v-on:事件名&#x3D;”methods中的函数(实参)”</li></ul></li><li>简写: @事件名&#x3D;”methods中的函数”</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- vue指令:   v-on事件绑定--&gt;</span><br><span class="line">&lt;p&gt;你要买商品的数量: &#123;&#123;count&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;button v-on:click=&quot;count = count + 1&quot;&gt;增加1&lt;/button&gt;</span><br><span class="line">&lt;button v-on:click=&quot;addFn&quot;&gt;增加1个&lt;/button&gt;</span><br><span class="line">&lt;button v-on:click=&quot;addCountFn(5)&quot;&gt;一次加5件&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;button @click=&quot;subFn&quot;&gt;减少&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        // ...其他省略</span><br><span class="line">        methods: &#123;</span><br><span class="line">            addFn()&#123; // this代表export default后面的组件对象(下属有data里return出来的属性)</span><br><span class="line">                this.count++</span><br><span class="line">            &#125;,</span><br><span class="line">            addCountFn(num)&#123;</span><br><span class="line">                this.count += num</span><br><span class="line">            &#125;,</span><br><span class="line">            subFn()&#123;</span><br><span class="line">                this.count--</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="2-3-2-v-on事件对象"><a href="#2-3-2-v-on事件对象" class="headerlink" title="2.3.2 v-on事件对象"></a>2.3.2 v-on事件对象</h5><blockquote><p>vue事件处理函数中, 拿到事件对象</p></blockquote><ul><li>语法:<ul><li>无传参, 通过形参直接接收</li><li>传参, 通过$event指代事件对象传给事件处理函数</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;a @click=&quot;one&quot; href=&quot;http://www.baidu.com&quot;&gt;阻止百度&lt;/a&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;a @click=&quot;two(10, $event)&quot; href=&quot;http://www.baidu.com&quot;&gt;阻止去百度&lt;/a&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    one(e)&#123;</span><br><span class="line">      e.preventDefault()</span><br><span class="line">    &#125;,</span><br><span class="line">    two(num, e)&#123;</span><br><span class="line">      e.preventDefault()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="2-3-3-v-on修饰符"><a href="#2-3-3-v-on修饰符" class="headerlink" title="2.3.3 v-on修饰符"></a>2.3.3 v-on修饰符</h5><p>语法:</p><p>@事件名.修饰符&#x3D;”methods里函数”</p><ul><li>.stop - 阻止事件冒泡</li><li>.prevent - 阻止默认行为</li><li>.once - 程序运行期间, 只触发一次事件处理函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div @click=&quot;fatherFn&quot;&gt;</span><br><span class="line">    &lt;!-- vue对事件进行了修饰符设置, 在事件后面.修饰符名即可使用更多的功能 --&gt;</span><br><span class="line">    &lt;button @click.stop=&quot;btn&quot;&gt;.stop阻止事件冒泡&lt;/button&gt;</span><br><span class="line">    &lt;a href=&quot;http://www.baidu.com&quot; @click.prevent=&quot;btn&quot;&gt;.prevent阻止默认行为&lt;/a&gt;</span><br><span class="line">    &lt;button @click.once=&quot;btn&quot;&gt;.once程序运行期间, 只触发一次事件处理函数&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    fatherFn()&#123;</span><br><span class="line">      console.log(&quot;father被触发&quot;);</span><br><span class="line">    &#125;,</span><br><span class="line">    btn()&#123;</span><br><span class="line">      console.log(1);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="2-3-4-v-on按键修饰符"><a href="#2-3-4-v-on按键修饰符" class="headerlink" title="2.3.4 v-on按键修饰符"></a>2.3.4 v-on按键修饰符</h5><blockquote><p>给键盘事件, 添加修饰符, 增强能力</p></blockquote><p>语法:</p><ul><li>@keyup.enter  -  监测回车按键</li><li>@keyup.esc     -   监测返回按键</li><li><a href="https://cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6">https://cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; @keydown.enter=&quot;enterFn&quot;&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; @keydown.esc=&quot;escFn&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line"> methods: &#123;</span><br><span class="line">   enterFn()&#123;</span><br><span class="line">     console.log(&quot;enter回车按键了&quot;);</span><br><span class="line">   &#125;,</span><br><span class="line">   escFn()&#123;</span><br><span class="line">     console.log(&quot;esc按键了&quot;);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="2-4-v-model"><a href="#2-4-v-model" class="headerlink" title="2.4 v-model"></a>2.4 v-model</h4><blockquote><p>把value属性和vue数据变量, 双向绑定到一起</p></blockquote><ul><li>语法: v-model&#x3D;”vue数据变量”</li><li>双向数据绑定<ul><li>数据变化 -&gt; 视图自动同步</li><li>视图变化 -&gt; 数据自动同步</li></ul></li></ul><p>特别注意: v-model, 在input[checkbox]的多选框状态</p><p>变量为非数组, 则绑定的是checked的属性(true&#x2F;false) - 常用于: 单个绑定使用</p><p>变量为数组, 则绑定的是他们的value属性里的值 - 常用于: 收集勾选了哪些值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">    v-model:是实现vuejs变量和表单标签value属性, 双向绑定的指令</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;用户名:&lt;/span&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; v-model=&quot;username&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;密码:&lt;/span&gt;</span><br><span class="line">      &lt;input type=&quot;password&quot; v-model=&quot;pass&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;来自于: &lt;/span&gt;</span><br><span class="line">      &lt;!-- 下拉菜单要绑定在select上 --&gt;</span><br><span class="line">      &lt;select v-model=&quot;from&quot;&gt;</span><br><span class="line">        &lt;option value=&quot;北京市&quot;&gt;北京&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;南京市&quot;&gt;南京&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;天津市&quot;&gt;天津&lt;/option&gt;</span><br><span class="line">      &lt;/select&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;!-- (重要)</span><br><span class="line">      遇到复选框, v-model的变量值</span><br><span class="line">      非数组 - 关联的是复选框的checked属性</span><br><span class="line">      数组   - 关联的是复选框的value属性</span><br><span class="line">       --&gt;</span><br><span class="line">      &lt;span&gt;爱好: &lt;/span&gt;</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; v-model=&quot;hobby&quot; value=&quot;抽烟&quot;&gt;抽烟</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; v-model=&quot;hobby&quot; value=&quot;喝酒&quot;&gt;喝酒</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; v-model=&quot;hobby&quot; value=&quot;写代码&quot;&gt;写代码</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;性别: &lt;/span&gt;</span><br><span class="line">      &lt;input type=&quot;radio&quot; value=&quot;男&quot; name=&quot;sex&quot; v-model=&quot;gender&quot;&gt;男</span><br><span class="line">      &lt;input type=&quot;radio&quot; value=&quot;女&quot; name=&quot;sex&quot; v-model=&quot;gender&quot;&gt;女</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;自我介绍&lt;/span&gt;</span><br><span class="line">      &lt;textarea v-model=&quot;intro&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      username: &quot;&quot;,</span><br><span class="line">      pass: &quot;&quot;,</span><br><span class="line">      from: &quot;&quot;,</span><br><span class="line">      hobby: [], </span><br><span class="line">      sex: &quot;&quot;,</span><br><span class="line">      intro: &quot;&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">    // 总结:</span><br><span class="line">    // 特别注意: v-model, 在input[checkbox]的多选框状态</span><br><span class="line">    // 变量为非数组, 则绑定的是checked的属性(true/false) - 常用于: 单个绑定使用</span><br><span class="line">    // 变量为数组, 则绑定的是他们的value属性里的值 - 常用于: 收集勾选了哪些值</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="2-4-1-v-model修饰符"><a href="#2-4-1-v-model修饰符" class="headerlink" title="2.4.1 v-model修饰符"></a>2.4.1 v-model修饰符</h5><p>语法:</p><ul><li>v-model.修饰符&#x3D;”vue数据变量”<ul><li>.number   以parseFloat转成数字类型</li><li>.trim          去除首尾空白字符</li><li>.lazy           在change时触发而非inupt时</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;年龄:&lt;/span&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; v-model.number=&quot;age&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;人生格言:&lt;/span&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; v-model.trim=&quot;motto&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;自我介绍:&lt;/span&gt;</span><br><span class="line">      &lt;textarea v-model.lazy=&quot;intro&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      age: &quot;&quot;,</span><br><span class="line">      motto: &quot;&quot;,</span><br><span class="line">      intro: &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="2-5-v-text和v-html"><a href="#2-5-v-text和v-html" class="headerlink" title="2.5 v-text和v-html"></a>2.5 v-text和v-html</h4><ul><li>语法:<ul><li>v-text&#x3D;”vue数据变量”    </li><li>v-html&#x3D;”vue数据变量”</li></ul></li><li>注意: 会覆盖插值表达式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p v-text=&quot;str&quot;&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p v-html=&quot;str&quot;&gt;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      str: &quot;&lt;span&gt;我是一个span标签&lt;/span&gt;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>v-text把值当成普通字符串显示, v-html把值当做html解析</p><h4 id="2-6-v-show和v-if"><a href="#2-6-v-show和v-if" class="headerlink" title="2.6 v-show和v-if"></a>2.6 v-show和v-if</h4><blockquote><p>控制标签的隐藏或出现</p></blockquote><ul><li>语法:<ul><li>v-show&#x3D;”vue变量”            </li><li>v-if&#x3D;”vue变量”</li></ul></li><li>原理<ul><li>v-show 用的display:none隐藏   (频繁切换使用)</li><li>v-if  直接从DOM树上移除</li></ul></li><li>高级<ul><li>v-else使用</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1 v-show=&quot;isOk&quot;&gt;v-show的盒子&lt;/h1&gt;</span><br><span class="line">    &lt;h1 v-if=&quot;isOk&quot;&gt;v-if的盒子&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p v-if=&quot;age &gt; 18&quot;&gt;我成年了&lt;/p&gt;</span><br><span class="line">      &lt;p v-else&gt;还得多吃饭&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      isOk: true,</span><br><span class="line">      age: 15</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="2-7-折叠案例"><a href="#2-7-折叠案例" class="headerlink" title="2.7 折叠案例"></a>2.7 折叠案例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h3&gt;案例：折叠面板&lt;/h3&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div class=&quot;title&quot;&gt;</span><br><span class="line">        &lt;h4&gt;芙蓉楼送辛渐&lt;/h4&gt;</span><br><span class="line">        &lt;span class=&quot;btn&quot; @click=&quot;isShow = !isShow&quot;&gt;</span><br><span class="line">          &#123;&#123; isShow ? &#x27;收起&#x27; : &#x27;展开&#x27; &#125;&#125;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;container&quot; v-show=&quot;isShow&quot;&gt;</span><br><span class="line">        &lt;p&gt;寒雨连江夜入吴, &lt;/p&gt;</span><br><span class="line">        &lt;p&gt;平明送客楚山孤。&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;洛阳亲友如相问，&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;一片冰心在玉壶。&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      isShow: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="2-8-v-for"><a href="#2-8-v-for" class="headerlink" title="2.8 v-for"></a>2.8 v-for</h4><blockquote><p>列表渲染, 所在标签结构, 按照数据数量, 循环生成</p></blockquote><ul><li><p>语法</p><ul><li>v-for&#x3D;”(值, 索引) in 目标结构”</li><li>v-for&#x3D;”值 in 目标结构”</li></ul></li><li><p>目标结构:</p><ul><li>可以遍历数组 &#x2F; 对象 &#x2F; 数字 &#x2F; 字符串 (可遍历结构)</li></ul></li><li><p>注意:</p><p>v-for的临时变量名不能用到v-for范围外</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &lt;!-- v-for 把一组数据, 渲染成一组DOM --&gt;</span><br><span class="line">      &lt;!-- 口诀: 让谁循环生成, v-for就写谁身上 --&gt;</span><br><span class="line">      &lt;p&gt;学生姓名&lt;/p&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li v-for=&quot;(item, index) in arr&quot; :key=&quot;item&quot;&gt;</span><br><span class="line">          &#123;&#123; index &#125;&#125; - &#123;&#123; item &#125;&#125;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">      &lt;p&gt;学生详细信息&lt;/p&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li v-for=&quot;obj in stuArr&quot; :key=&quot;obj.id&quot;&gt;</span><br><span class="line">          &lt;span&gt;&#123;&#123; obj.name &#125;&#125;&lt;/span&gt;</span><br><span class="line">          &lt;span&gt;&#123;&#123; obj.sex &#125;&#125;&lt;/span&gt;</span><br><span class="line">          &lt;span&gt;&#123;&#123; obj.hobby &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- v-for遍历对象(了解) --&gt;</span><br><span class="line">      &lt;p&gt;老师信息&lt;/p&gt;</span><br><span class="line">      &lt;div v-for=&quot;(value, key) in tObj&quot; :key=&quot;value&quot;&gt;</span><br><span class="line">        &#123;&#123; key &#125;&#125; -- &#123;&#123; value &#125;&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- v-for遍历整数(了解) - 从1开始 --&gt;</span><br><span class="line">      &lt;p&gt;序号&lt;/p&gt;</span><br><span class="line">      &lt;div v-for=&quot;i in count&quot; :key=&quot;i&quot;&gt;&#123;&#123; i &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      arr: [&quot;小明&quot;, &quot;小欢欢&quot;, &quot;大黄&quot;],</span><br><span class="line">      stuArr: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: 1001,</span><br><span class="line">          name: &quot;孙悟空&quot;,</span><br><span class="line">          sex: &quot;男&quot;,</span><br><span class="line">          hobby: &quot;吃桃子&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 1002,</span><br><span class="line">          name: &quot;猪八戒&quot;,</span><br><span class="line">          sex: &quot;男&quot;,</span><br><span class="line">          hobby: &quot;背媳妇&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">      tObj: &#123;</span><br><span class="line">        name: &quot;小黑&quot;,</span><br><span class="line">        age: 18,</span><br><span class="line">        class: &quot;1期&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">      count: 10,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="2-9-总结"><a href="#2-9-总结" class="headerlink" title="2.9 总结"></a>2.9 总结</h4><h5 id="2-9-1-Vue的最大优势是什么"><a href="#2-9-1-Vue的最大优势是什么" class="headerlink" title="2.9.1. Vue的最大优势是什么?"></a>2.9.1. Vue的最大优势是什么?</h5><p>​简单易学, 轻量级整个源码js文件不大, 双向数据绑定, 数据驱动视图, 组件化, 数据和视图分离, </p><p>​vue负责关联视图和数据, 作者中国人(尤雨溪), 文档都是中文的, 入门教程非常多, 上手简单. </p><p>​相比传统网页, vue是单页面可以只刷新某一部分</p><h5 id="2-9-2-Vue和jQuery区别是什么"><a href="#2-9-2-Vue和jQuery区别是什么" class="headerlink" title="2.9.2. Vue和jQuery区别是什么?"></a>2.9.2. Vue和jQuery区别是什么?</h5><p>​jQuery应该算是一个插件, 里面封装了各种易用的方法, 方便你使用更少的代码来操作dom标签</p><p>​Vue是一套框架, 有自己的规则和体系与语法, 特别是设计思想MVVM, 让数据和视频关联绑定, 省略了很多DOM操作. 然后指令还给标签注入了更多的功能</p><h5 id="2-9-3-mvvm和mvc区别是什么"><a href="#2-9-3-mvvm和mvc区别是什么" class="headerlink" title="2.9.3. mvvm和mvc区别是什么?"></a>2.9.3. mvvm和mvc区别是什么?</h5><p>​MVC: 也是一种设计模式, 组织代码的结构, 是model数据模型, view视图, Controller控制器, 在控制器这层里编写js代码, 来控制数据和视图关联</p><p>​MVVM: 即Model-View-ViewModel的简写。即模型-视图-视图模型, VM是这个设计模式的核心, 连接v和m的桥梁, 内部会监听DOM事件, 监听数据对象变化来影响对方. 我们称之为数据绑定</p><h5 id="2-9-4-Vue常用修饰符有哪些"><a href="#2-9-4-Vue常用修饰符有哪些" class="headerlink" title="2.9.4. Vue常用修饰符有哪些?"></a>2.9.4. Vue常用修饰符有哪些?</h5><p>​    .prevent: 提交事件不再重载页面；</p><p>​.stop: 阻止单击事件冒泡；</p><p>​.once: 只执行一次这个事件</p><h5 id="2-9-5-Vue2-x兼容IE哪个版本以上"><a href="#2-9-5-Vue2-x兼容IE哪个版本以上" class="headerlink" title="2.9.5. Vue2.x兼容IE哪个版本以上"></a>2.9.5. Vue2.x兼容IE哪个版本以上</h5><p>​不支持ie8及以下，部分兼容ie9 ，完全兼容10以上， 因为vue的响应式原理是基于es5的Object.defineProperty(),而这个方法不支持ie8及以下。</p><h5 id="2-9-6-对Vue渐进式的理解"><a href="#2-9-6-对Vue渐进式的理解" class="headerlink" title="2.9.6. 对Vue渐进式的理解"></a>2.9.6. 对Vue渐进式的理解</h5><p>​渐进式代表的含义是：主张最少, 自底向上, 增量开发, 组件集合, 便于复用</p><h5 id="2-9-7-v-show和v-if的区别"><a href="#2-9-7-v-show和v-if的区别" class="headerlink" title="2.9.7. v-show和v-if的区别"></a>2.9.7. v-show和v-if的区别</h5><p>​v-show和v-if的区别? 分别说明其使用场景?</p><p>​v-show 和v-if都是true的时候显示，false的时候隐藏</p><p>​但是：false的情况下，</p><p>​v-show是采用的display:none   </p><p>​v-if采用惰性加载</p><p>​如果需要频繁切换显示隐藏需要使用v-show</p><h5 id="2-9-8-说出至少4个Vue指令及作用"><a href="#2-9-8-说出至少4个Vue指令及作用" class="headerlink" title="2.9.8. 说出至少4个Vue指令及作用"></a>2.9.8. 说出至少4个Vue指令及作用</h5><p>​v-for 根据数组的个数, 循环数组元素的同时还生成所在的标签</p><p>​v-show 显示内容</p><p>​v-if    显示与隐藏  </p><p>​v-else  必须和v-if连用  不能单独使用  否则报错  </p><p>​v-bind  动态绑定  作用： 及时对页面的数据进行更改, 可以简写成:分号</p><p>​v-on  给标签绑定函数，可以缩写为@，例如绑定一个点击函数  函数必须写在methods里面</p><p>​v-text  解析文本</p><p>​v-html   解析html标签</p><h5 id="2-9-9-为什么避免v-for和v-if在一起使用"><a href="#2-9-9-为什么避免v-for和v-if在一起使用" class="headerlink" title="2.9.9. 为什么避免v-for和v-if在一起使用"></a>2.9.9. 为什么避免v-for和v-if在一起使用</h5><p>​Vue 处理指令时，v-for 比 v-if 具有更高的优先级, 虽然用起来也没报错好使, 但是性能不高, 如果你有5个元素被v-for循环, v-if也会分别执行5次.</p><h3 id="3-v-for更新监测"><a href="#3-v-for更新监测" class="headerlink" title="3. v-for更新监测"></a>3. v-for更新监测</h3><p>这些方法会触发数组改变, v-for会监测到并更新页面</p><ul><li><code>push()</code></li><li><code>pop()</code></li><li><code>shift()</code></li><li><code>unshift()</code></li><li><code>splice()</code></li><li><code>sort()</code></li><li><code>reverse()</code></li></ul><p>这些方法不会触发v-for更新</p><ul><li><code>slice()</code></li><li><code>filter()</code></li><li><code>concat()</code></li></ul><blockquote><p>注意: vue不能监测到数组里赋值的动作而更新, 如果需要请使用Vue.set() 或者this.$set(), 或者覆盖整个数组</p></blockquote><blockquote><p>总结:  改变原数组的方法才能让v-for更新</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;(val, index) in arr&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">        &#123;&#123; val &#125;&#125;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;button @click=&quot;revBtn&quot;&gt;数组翻转&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;sliceBtn&quot;&gt;截取前3个&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;updateBtn&quot;&gt;更新第一个元素值&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      arr: [5, 3, 9, 2, 1]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    revBtn()&#123;</span><br><span class="line">      // 1. 数组翻转可以让v-for更新</span><br><span class="line">      this.arr.reverse()</span><br><span class="line">    &#125;,</span><br><span class="line">    sliceBtn()&#123;</span><br><span class="line">      // 2. 数组slice方法不会造成v-for更新</span><br><span class="line">      // slice不会改变原始数组</span><br><span class="line">      // this.arr.slice(0, 3)</span><br><span class="line"></span><br><span class="line">      // 解决v-for更新 - 覆盖原始数组</span><br><span class="line">      let newArr = this.arr.slice(0, 3)</span><br><span class="line">      this.arr = newArr</span><br><span class="line">    &#125;,</span><br><span class="line">    updateBtn()&#123;</span><br><span class="line">      // 3. 更新某个值的时候, v-for是监测不到的</span><br><span class="line">      // this.arr[0] = 1000;</span><br><span class="line"></span><br><span class="line">      // 解决-this.$set()</span><br><span class="line">      // 参数1: 更新目标结构</span><br><span class="line">      // 参数2: 更新位置</span><br><span class="line">      // 参数3: 更新值</span><br><span class="line">      this.$set(this.arr, 0, 1000)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="3-1-diff算法-key"><a href="#3-1-diff算法-key" class="headerlink" title="3.1 diff算法-key"></a>3.1 diff算法-key</h4><p>:key</p><p>有id用id,无id用索引动态class</p><h4 id="3-2-动态class"><a href="#3-2-动态class" class="headerlink" title="3.2 动态class"></a>3.2 动态class</h4><blockquote><p>用v-bind给标签class设置动态的值</p></blockquote><ul><li>语法:<ul><li>:class&#x3D;”{类名: 布尔值}”</li></ul></li></ul><p>总结: 就是把类名保存在vue变量中赋予给标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 语法:</span><br><span class="line">      :class=&quot;&#123;类名: 布尔值&#125;&quot;</span><br><span class="line">      使用场景: vue变量控制标签是否应该有类名</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;p :class=&quot;&#123;red_str: bool&#125;&quot;&gt;动态class&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      bool: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .red_str&#123;</span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="3-3动态style"><a href="#3-3动态style" class="headerlink" title="3.3动态style"></a>3.3动态style</h4><blockquote><p>目标: 给标签动态设置style的值</p></blockquote><ul><li>语法<ul><li>:style&#x3D;”{css属性: 值}”</li></ul></li></ul><p>总结: 动态style的key都是css属性名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 动态style语法</span><br><span class="line">      :style=&quot;&#123;css属性名: 值&#125;&quot;</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;p :style=&quot;&#123;backgroundColor: colorStr&#125;&quot;&gt;动态style&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      colorStr: &#x27;red&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="3-4-vue过滤器"><a href="#3-4-vue过滤器" class="headerlink" title="3.4 vue过滤器"></a>3.4 vue过滤器</h4><p>转换格式, 过滤器就是一个<strong>函数</strong>, 传入值返回处理后的值</p><p>过滤器只能用在, &#x3D;&#x3D;插值表达式和v-bind表达式&#x3D;&#x3D;</p><p>语法: </p><ul><li>Vue.filter(“过滤器名”, (值) &#x3D;&gt; {return “返回处理后的值”})</li><li>filters: {过滤器名字: (值) &#x3D;&gt; {return “返回处理后的值”}</li></ul><p>总结: 把值转成另一种形式, 使用过滤器, Vue3用函数替代了过滤器.</p><p>全局注册最好在main.js中注册, 一处注册到处使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;原来的样子: &#123;&#123; msg &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;!-- 2. 过滤器使用</span><br><span class="line">      语法: &#123;&#123; 值 | 过滤器名字 &#125;&#125;</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;p&gt;使用翻转过滤器: &#123;&#123; msg | reverse &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p :title=&quot;msg | toUp&quot;&gt;鼠标长停&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#x27;Hello, Vue&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 方式2: 局部 - 过滤器</span><br><span class="line">  // 只能在当前vue文件内使用</span><br><span class="line">  /*</span><br><span class="line">     语法: </span><br><span class="line">     filters: &#123;</span><br><span class="line">       过滤器名字 (val) &#123;</span><br><span class="line">         return 处理后的值</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">  */</span><br><span class="line">  filters: &#123;</span><br><span class="line">    toUp (val) &#123;</span><br><span class="line">      return val.toUpperCase()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="3-5-vue过滤器-传参和多过滤器"><a href="#3-5-vue过滤器-传参和多过滤器" class="headerlink" title="3.5 vue过滤器-传参和多过滤器"></a>3.5 vue过滤器-传参和多过滤器</h4><blockquote><p>可同时使用多个过滤器, 或者给过滤器传参</p></blockquote><ul><li>语法:<ul><li>过滤器传参:   vue变量 | 过滤器(实参) </li><li>多个过滤器:   vue变量 | 过滤器1 | 过滤器2</li></ul></li></ul><p>总结: 过滤器可以传参, 还可以对某个过滤器结果, 后面在使用一个过滤器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;原来的样子: &#123;&#123; msg &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;!-- 1.</span><br><span class="line">      给过滤器传值</span><br><span class="line">      语法: vue变量 | 过滤器名(值)</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;p&gt;使用翻转过滤器: &#123;&#123; msg | reverse(&#x27;|&#x27;) &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;!-- 2.</span><br><span class="line">      多个过滤利使用</span><br><span class="line">      语法: vue变量 | 过滤器1 | 过滤器2</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;p :title=&quot;msg | toUp | reverse(&#x27;|&#x27;)&quot;&gt;鼠标长停&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#x27;Hello, Vue&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  filters: &#123;</span><br><span class="line">    toUp (val) &#123;</span><br><span class="line">      return val.toUpperCase()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="3-6-vue计算属性-computed"><a href="#3-6-vue计算属性-computed" class="headerlink" title="3.6 vue计算属性-computed"></a>3.6 vue计算属性-computed</h4><blockquote><p>一个数据, 依赖另外一些数据计算而来的结果</p></blockquote><p>语法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    &quot;计算属性名&quot; () &#123;</span><br><span class="line">        return &quot;值&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意: 计算属性也是vue数据变量, 所以不要和data里重名, 用法和data相同</p></blockquote><blockquote><p>总结: 一个数据, 依赖另外一些数据计算而来的结果</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; num &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      a: 10,</span><br><span class="line">      b: 20</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 计算属性:</span><br><span class="line">  // 场景: 一个变量的值, 需要用另外变量计算而得来</span><br><span class="line">  /*</span><br><span class="line">    语法:</span><br><span class="line">    computed: &#123;</span><br><span class="line">      计算属性名 () &#123;</span><br><span class="line">        return 值</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  */</span><br><span class="line"> // 注意: 计算属性和data属性都是变量-不能重名</span><br><span class="line"> // 注意2: 函数内变量变化, 会自动重新计算结果返回</span><br><span class="line">  computed: &#123;</span><br><span class="line">    num()&#123;</span><br><span class="line">      return this.a + this.b</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="3-6-1-vue计算属性-完整写法"><a href="#3-6-1-vue计算属性-完整写法" class="headerlink" title="3.6.1 vue计算属性-完整写法"></a>3.6.1 vue计算属性-完整写法</h5><p>计算属性也是变量, 如果想要直接赋值, 需要使用完整写法</p><p>语法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="string">&quot;属性名&quot;</span>: &#123;</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">值</span>)&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;值&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结: 想要给计算属性赋值, 需要使用set方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">          &lt;span&gt;姓名:&lt;/span&gt;</span><br><span class="line">          &lt;input type=&quot;text&quot; v-model=&quot;full&quot;&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 问题: 给计算属性赋值 - 需要setter</span><br><span class="line">// 解决:</span><br><span class="line">/*</span><br><span class="line">    完整语法:</span><br><span class="line">    computed: &#123;</span><br><span class="line">        &quot;计算属性名&quot; ()&#123;&#125;,</span><br><span class="line">        &quot;计算属性名&quot;: &#123;</span><br><span class="line">            set(值)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            get()&#123;</span><br><span class="line">                return 值</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">*/</span><br><span class="line">export default &#123;</span><br><span class="line">    computed: &#123;</span><br><span class="line">        full: &#123;</span><br><span class="line">            // 给full赋值触发set方法</span><br><span class="line">            set(val)&#123;</span><br><span class="line">                console.log(val)</span><br><span class="line">            &#125;,</span><br><span class="line">            // 使用full的值触发get方法</span><br><span class="line">            get()&#123;</span><br><span class="line">                return &quot;无名氏&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="3-7-vue侦听器-watch"><a href="#3-7-vue侦听器-watch" class="headerlink" title="3.7 vue侦听器-watch"></a>3.7 vue侦听器-watch</h4><blockquote><p>可以侦听data&#x2F;computed属性值改变</p></blockquote><p>语法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    &quot;被侦听的属性名&quot; (newVal, oldVal)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结: 想要侦听一个属性变化, 可使用侦听属性watch</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      name: &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 目标: 侦听到name值的改变</span><br><span class="line">  /*</span><br><span class="line">  语法:</span><br><span class="line">    watch: &#123;</span><br><span class="line">      变量名 (newVal, oldVal)&#123;</span><br><span class="line">        // 变量名对应值改变这里自动触发</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  */</span><br><span class="line">  watch: &#123;</span><br><span class="line">    // newVal: 当前最新值</span><br><span class="line">    // oldVal: 上一刻值</span><br><span class="line">    name(newVal, oldVal)&#123;</span><br><span class="line">      console.log(newVal, oldVal);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="3-8-vue侦听器-深度侦听和立即执行"><a href="#3-8-vue侦听器-深度侦听和立即执行" class="headerlink" title="3.8 vue侦听器-深度侦听和立即执行"></a>3.8 vue侦听器-深度侦听和立即执行</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    &quot;要侦听的属性名&quot;: &#123;</span><br><span class="line">        immediate: true, // 立即执行</span><br><span class="line">        deep: true, // 深度侦听复杂类型内变化</span><br><span class="line">        handler (newVal, oldVal) &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;user.name&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;user.age&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      user: &#123;</span><br><span class="line">        name: &quot;&quot;,</span><br><span class="line">        age: 0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 目标: 侦听对象</span><br><span class="line">  /*</span><br><span class="line">  语法:</span><br><span class="line">    watch: &#123;</span><br><span class="line">      变量名 (newVal, oldVal)&#123;</span><br><span class="line">        // 变量名对应值改变这里自动触发</span><br><span class="line">      &#125;,</span><br><span class="line">      变量名: &#123;</span><br><span class="line">        handler(newVal, oldVal)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        deep: true, // 深度侦听(对象里面层的值改变)</span><br><span class="line">        immediate: true // 立即侦听(网页打开handler执行一次)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  */</span><br><span class="line">  watch: &#123;</span><br><span class="line">    user: &#123;</span><br><span class="line">      handler(newVal, oldVal)&#123;</span><br><span class="line">        // user里的对象</span><br><span class="line">        console.log(newVal, oldVal);</span><br><span class="line">      &#125;,</span><br><span class="line">      deep: true,</span><br><span class="line">      immediate: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="3-9-Vue-中怎么自定义过滤器"><a href="#3-9-Vue-中怎么自定义过滤器" class="headerlink" title="3.9 Vue 中怎么自定义过滤器"></a>3.9 Vue 中怎么自定义过滤器</h4><p>​    Vue.js允许自定义过滤器，可被用于一些常见的文本格式化。过滤器可以用在两个地方：双花括号插值和v-bind表达式</p><p>​全局的用Vue.filter()</p><p>​局部的用filters属性</p><h4 id="3-10-总结"><a href="#3-10-总结" class="headerlink" title="3.10 总结"></a>3.10 总结</h4><h5 id="3-10-1-Vue中-key作用-为什么不能用索引"><a href="#3-10-1-Vue中-key作用-为什么不能用索引" class="headerlink" title="3.10.1 Vue中:key作用, 为什么不能用索引"></a>3.10.1 Vue中:key作用, 为什么不能用索引</h5><p>​:key是给v-for循环生成标签颁发唯一标识的, 用于性能的优化</p><p>​因为v-for数据项的顺序改变，Vue 也不会移动 DOM 元素来匹配数据项的顺序，而是就地更新每个元素</p><p>​:key如果是索引, 因为索引是连续的, 如果删除其中某一个, 会导致最后一个被删除</p><p>​当我们再删除的时候, :key再根据数据来把新旧的dom对比时, 删除:key不存在的对应的标签(添加也是一样的插入到指定位置, 别的都不会动)</p><h5 id="3-10-2-数组更新有的时候v-for不渲染"><a href="#3-10-2-数组更新有的时候v-for不渲染" class="headerlink" title="3.10.2 数组更新有的时候v-for不渲染"></a>3.10.2 数组更新有的时候v-for不渲染</h5><p>​因为vue内部只能监测到数组顺序&#x2F;位置的改变&#x2F;数量的改变, 但是值被重新赋予监测不到变更, 可以用 Vue.set() &#x2F; vm.$set()</p><h3 id="4-vue组件"><a href="#4-vue组件" class="headerlink" title="4. vue组件"></a>4. vue组件</h3><p>组件是可复用的 Vue 实例, 封装标签, 样式和JS代码</p><p><strong>组件化</strong> ：封装的思想，把页面上 <code>可重用的部分</code> 封装为 <code>组件</code>，从而方便项目的 开发 和 维护</p><p><strong>一个页面， 可以拆分成一个个组件，一个组件就是一个整体, 每个组件可以有自己独立的 结构 样式 和 行为(html, css和js)</strong></p><p>口诀: 哪部分标签复用, 就把哪部分封装到组件内</p><p>&#x3D;&#x3D;(重要): 组件内template只能有一个根标签&#x3D;&#x3D;</p><p>&#x3D;&#x3D;(重要): 组件内data必须是一个函数, 独立作用域&#x3D;&#x3D;</p><h4 id="4-1-组件使用"><a href="#4-1-组件使用" class="headerlink" title="4.1 组件使用"></a>4.1 组件使用</h4><h5 id="4-1-1全局-注册使用"><a href="#4-1-1全局-注册使用" class="headerlink" title="4.1.1全局 - 注册使用"></a>4.1.1全局 - 注册使用</h5><p>全局入口在main.js, 在new Vue之上注册</p><p>语法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> 组件对象 <span class="keyword">from</span> <span class="string">&#x27;vue文件路径&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;组件名&quot;</span>, 组件对象)</span><br></pre></td></tr></table></figure><p>main.js - 立即演示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标: 全局注册 (一处定义到处使用)</span></span><br><span class="line"><span class="comment">// 1. 创建组件 - 文件名.vue</span></span><br><span class="line"><span class="comment">// 2. 引入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Pannel</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Pannel&#x27;</span></span><br><span class="line"><span class="comment">// 3. 全局 - 注册组件</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  语法: </span></span><br><span class="line"><span class="comment">  Vue.component(&quot;组件名&quot;, 组件对象)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;PannelG&quot;</span>, <span class="title class_">Pannel</span>)</span><br></pre></td></tr></table></figure><p>全局注册PannelG组件名后, 就可以当做标签在任意Vue文件中template里用</p><p>单双标签都可以或者小写加-形式, 运行后, 会把这个自定义标签当做组件解析, 使用&#x3D;&#x3D;组件里封装的标签替换到这个位置&#x3D;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;PannelG&gt;&lt;/PannelG&gt;</span><br><span class="line">&lt;PannelG/&gt;</span><br><span class="line">&lt;pannel-g&gt;&lt;/pannel-g&gt;</span><br></pre></td></tr></table></figure><h5 id="4-1-2-局部-注册使用"><a href="#4-1-2-局部-注册使用" class="headerlink" title="4.1.2 局部 - 注册使用"></a>4.1.2 局部 - 注册使用</h5><p>语法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 组件对象 <span class="keyword">from</span> <span class="string">&#x27;vue文件路径&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="string">&quot;组件名&quot;</span>: 组件对象</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>任意vue文件中中引入, 注册, 使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h3&gt;案例：折叠面板&lt;/h3&gt;</span><br><span class="line">    &lt;!-- 4. 组件名当做标签使用 --&gt;</span><br><span class="line">    &lt;!-- &lt;组件名&gt;&lt;/组件名&gt; --&gt;</span><br><span class="line">    &lt;PannelG&gt;&lt;/PannelG&gt;</span><br><span class="line">    &lt;PannelL&gt;&lt;/PannelL&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 局部注册 (用的多)</span><br><span class="line">// 1. 创建组件 - 文件名.vue</span><br><span class="line">// 2. 引入组件</span><br><span class="line">import Pannel from &#x27;./components/Pannel_1&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  // 3. 局部 - 注册组件</span><br><span class="line">  /*</span><br><span class="line">    语法: </span><br><span class="line">    components: &#123;</span><br><span class="line">      &quot;组件名&quot;: 组件对象</span><br><span class="line">    &#125;</span><br><span class="line">  */</span><br><span class="line">  components: &#123;</span><br><span class="line">    PannelL: Pannel</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>组件使用总结:</p><ol><li>(创建)封装html+css+vue到独立的.vue文件中</li><li>(引入注册)组件文件 &#x3D;&gt; 得到组件配置对象</li><li>(使用)当前页面当做标签使用</li></ol><h5 id="4-1-3-vue组件-scoped作用"><a href="#4-1-3-vue组件-scoped作用" class="headerlink" title="4.1.3 vue组件-scoped作用"></a>4.1.3 vue组件-scoped作用</h5><blockquote><p>解决多个组件样式名相同, 冲突问题</p></blockquote><p>需求: div标签名选择器, 设置背景色</p><p>问题: 发现组件里的div和外面的div都生效了</p><p>解决: 给Pannel.vue组件里style标签上加scoped属性即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br></pre></td></tr></table></figure><p>在style上加入scoped属性, 就会在此组件的标签上加上一个随机生成的data-v开头的属性</p><p>而且必须是当前组件的元素, 才会有这个自定义属性, 才会被这个样式作用到</p><h4 id="4-2-vue组件通信"><a href="#4-2-vue组件通信" class="headerlink" title="4.2 vue组件通信"></a>4.2 vue组件通信</h4><p>因为每个组件的变量和值都是独立的</p><p>组件通信先暂时关注父传子, 子传父</p><p>父: 使用其他组件的vue文件</p><p>子: 被引入的组件(嵌入)</p><p>例如: App.vue(父)  MyProduct.vue(子)</p><p><strong>组件内在props定义变量, 用于接收外部传入的值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">父(App.vue) -&gt; 子(MyProduct.vue) 分别传值进入</span><br><span class="line">需求: 每次组件显示不同的数据信息</span><br><span class="line">步骤(口诀):</span><br><span class="line">  1. 子组件 - props - 变量 (准备接收)</span><br><span class="line">  2. 父组件 - 传值进去</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//MyProduct.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;my-product&quot;&gt;</span><br><span class="line">    &lt;h3&gt;标题: &#123;&#123; title &#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;p&gt;价格: &#123;&#123; price &#125;&#125;元&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; intro &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&#x27;title&#x27;, &#x27;price&#x27;, &#x27;intro&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.my-product &#123;</span><br><span class="line">  width: 400px;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  border: 2px solid #000;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  margin: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//App.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">      目标: 父(App.vue) -&gt; 子(MyProduct.vue) 分别传值进入</span><br><span class="line">      需求: 每次组件显示不同的数据信息</span><br><span class="line">      步骤(口诀):</span><br><span class="line">        1. 子组件 - props - 变量 (准备接收)</span><br><span class="line">        2. 父组件 - 传值进去</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;Product title=&quot;好吃的口水鸡&quot; price=&quot;50&quot; intro=&quot;开业大酬宾, 全场8折&quot;&gt;&lt;/Product&gt;</span><br><span class="line">    &lt;Product title=&quot;好可爱的可爱多&quot; price=&quot;20&quot; intro=&quot;老板不在家, 全场1折&quot;&gt;&lt;/Product&gt;</span><br><span class="line">    &lt;Product title=&quot;好贵的北京烤鸭&quot; price=&quot;290&quot; :intro=&quot;str&quot;&gt;&lt;/Product&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 1. 创建组件 (.vue文件)</span><br><span class="line">// 2. 引入组件</span><br><span class="line">import Product from &#x27;./components/MyProduct&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      str: &quot;好贵啊, 快来啊, 好吃&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 3. 注册组件</span><br><span class="line">  components: &#123;</span><br><span class="line">    // Product: Product // key和value变量名同名 - 简写</span><br><span class="line">    Product</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="4-3-单向数据流"><a href="#4-3-单向数据流" class="headerlink" title="4.3 单向数据流"></a>4.3 单向数据流</h4><p>在vue中需要遵循单向数据流原则</p><ol><li>父组件的数据发生了改变，子组件会自动跟着变</li><li>子组件不能直接修改父组件传递过来的props  props是只读的</li></ol><p>&#x3D;&#x3D;父组件传给子组件的是一个对象，子组件修改对象的属性，是不会报错的，对象是引用类型, 互相更新&#x3D;&#x3D;</p><p>总结: props的值不能重新赋值, 对象引用关系属性值改变, 互相影响</p><p>那我怎么才能修改子组件接收到的值呢? - 其实要影响父亲, 然后数据响应式来影响儿子们</p><p>从&#x3D;&#x3D;父到子&#x3D;&#x3D;的数据流向,叫&#x3D;&#x3D;单向数据流&#x3D;&#x3D;</p><p>原因: 子组件修改, 不通知父级, 造成数据不一致性</p><p>如果第一个MyProduct.vue内自己修改商品价格为5.5, 但是App.vue里原来还记着18.8 - 数据 不一致了</p><p>所以: Vue规定&#x3D;&#x3D;props&#x3D;&#x3D;里的变量, &#x3D;&#x3D;本身是只读&#x3D;&#x3D;的</p><h4 id="4-4-vue组件通信-子向父"><a href="#4-4-vue组件通信-子向父" class="headerlink" title="_4.4 vue组件通信_子向父"></a>_4.4 vue组件通信_子向父</h4><blockquote><p>目标: 从子组件把值传出来给外面使用</p></blockquote><p>语法:</p><ul><li>父: @自定义事件名&#x3D;”父methods函数”</li><li>子: this.$emit(“自定义事件名”, 传值) - 执行父methods里函数代码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//MyProduct_sub.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;my-product&quot;&gt;</span><br><span class="line">    &lt;h3&gt;标题: &#123;&#123; title &#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;p&gt;价格: &#123;&#123; price &#125;&#125;元&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; intro &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;subFn&quot;&gt;宝刀-砍1元&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import eventBus from &#x27;../EventBus&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&#x27;index&#x27;, &#x27;title&#x27;, &#x27;price&#x27;, &#x27;intro&#x27;],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    subFn()&#123;</span><br><span class="line">      this.$emit(&#x27;subprice&#x27;, this.index, 1) // 子向父</span><br><span class="line">      eventBus.$emit(&quot;send&quot;, this.index, 1) // 跨组件</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.my-product &#123;</span><br><span class="line">  width: 400px;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  border: 2px solid #000;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  margin: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">//App.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 目标: 子传父 --&gt;</span><br><span class="line">    &lt;!-- 1. 父组件, @自定义事件名=&quot;父methods函数&quot; --&gt;</span><br><span class="line">    &lt;MyProduct v-for=&quot;(obj, ind) in list&quot; :key=&quot;obj.id&quot;</span><br><span class="line">    :title=&quot;obj.proname&quot;</span><br><span class="line">    :price=&quot;obj.proprice&quot;</span><br><span class="line">    :intro=&quot;obj.info&quot;</span><br><span class="line">    :index=&quot;ind&quot;</span><br><span class="line">    @subprice=&quot;fn&quot;</span><br><span class="line">    &gt;&lt;/MyProduct&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">import MyProduct from &#x27;./components/MyProduct_sub&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      list: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: 1,</span><br><span class="line">          proname: &quot;超级好吃的棒棒糖&quot;,</span><br><span class="line">          proprice: 18.8,</span><br><span class="line">          info: &quot;开业大酬宾, 全场8折&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 2,</span><br><span class="line">          proname: &quot;超级好吃的大鸡腿&quot;,</span><br><span class="line">          proprice: 34.2,</span><br><span class="line">          info: &quot;好吃不腻, 快来买啊&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 3,</span><br><span class="line">          proname: &quot;超级无敌的冰激凌&quot;,</span><br><span class="line">          proprice: 14.2,</span><br><span class="line">          info: &quot;炎热的夏天, 来个冰激凌了&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    MyProduct</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    fn(inde, price)&#123;</span><br><span class="line">      // 逻辑代码</span><br><span class="line">      this.list[inde].proprice &gt; 1 &amp;&amp; (this.list[inde].proprice = (this.list[inde].proprice - price).toFixed(2))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="4-5-vue组件通信-EventBus"><a href="#4-5-vue组件通信-EventBus" class="headerlink" title="4.5 vue组件通信-EventBus"></a>4.5 vue组件通信-EventBus</h4><blockquote><p>常用于跨组件通信时使用</p></blockquote><p>两个组件的关系非常的复杂，通过父子组件通讯是非常麻烦的。这时候可以使用通用的组件通讯方案：事件总线（event-bus)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 导出空白vue对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//MyProduct_sub.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;my-product&quot;&gt;</span><br><span class="line">    &lt;h3&gt;标题: &#123;&#123; title &#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;p&gt;价格: &#123;&#123; price &#125;&#125;元&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; intro &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;subFn&quot;&gt;宝刀-砍1元&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import eventBus from &#x27;../EventBus&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&#x27;index&#x27;, &#x27;title&#x27;, &#x27;price&#x27;, &#x27;intro&#x27;],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    subFn()&#123;</span><br><span class="line">      this.$emit(&#x27;subprice&#x27;, this.index, 1) // 子向父</span><br><span class="line">      eventBus.$emit(&quot;send&quot;, this.index, 1) // 跨组件</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.my-product &#123;</span><br><span class="line">  width: 400px;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  border: 2px solid #000;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  margin: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//List.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul class=&quot;my-product&quot;&gt;</span><br><span class="line">    &lt;li v-for=&quot;(item, index) in arr&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123; item.proname &#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123; item.proprice &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 跨组件传值</span><br><span class="line">// 1. 引入空白vue对象(EventBus)</span><br><span class="line">// 2. 接收方 - $on监听事件</span><br><span class="line">import eventBus from &quot;../EventBus&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&quot;arr&quot;],</span><br><span class="line">  // 3. 组件创建完毕, 监听send事件</span><br><span class="line">  created() &#123;</span><br><span class="line">    eventBus.$on(&quot;send&quot;, (index, price) =&gt; &#123;</span><br><span class="line">      this.arr[index].proprice &gt; 1 &amp;&amp;</span><br><span class="line">        (this.arr[index].proprice = (this.arr[index].proprice - price).toFixed(2));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.my-product &#123;</span><br><span class="line">  width: 400px;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  border: 2px solid #000;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  margin: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>findIndex()**</p><p>方法返回数组中满足提供的测试函数的第一个元素的<strong>索引</strong>。若没有找到对应元素则返回-1。</p><h4 id="4-6-总结"><a href="#4-6-总结" class="headerlink" title="4.6 总结"></a>4.6 总结</h4><h5 id="4-6-1-请说下封装-vue-组件的过程"><a href="#4-6-1-请说下封装-vue-组件的过程" class="headerlink" title="4.6.1. 请说下封装 vue 组件的过程"></a>4.6.1. 请说下封装 vue 组件的过程</h5><p>​    首先，组件可以提升整个项目的开发效率。能够把页面抽象成多个相对独立的模块，解决了我们传统项目开发：效率低、难维护、复用性等问题。</p><ul><li>分析需求：确定业务需求，把页面中可以复用的结构，样式以及功能，单独抽离成一个组件，实现复用</li><li>具体步骤：Vue.component 或者在new Vue配置项components中, 定义组件名, 可以在props中接受给组件传的参数和值，子组件修改好数据后，想把数据传递给父组件。可以采用$emit方法。</li></ul><h5 id="4-6-2-Vue组件如何进行传值的"><a href="#4-6-2-Vue组件如何进行传值的" class="headerlink" title="4.6.2. Vue组件如何进行传值的"></a>4.6.2. Vue组件如何进行传值的</h5><p>父向子 -&gt; props定义变量 -&gt; 父在使用组件用属性给props变量传值</p><p>子向父 -&gt; $emit触发父的事件 -&gt; 父在使用组件用@自定义事件名&#x3D;父的方法 (子把值带出来)</p><h5 id="4-6-3-Vue-组件-data-为什么必须是函数"><a href="#4-6-3-Vue-组件-data-为什么必须是函数" class="headerlink" title="4.6.3. Vue 组件 data 为什么必须是函数"></a>4.6.3. Vue 组件 data 为什么必须是函数</h5><p>每个组件都是 Vue 的实例, 为了独立作用域, 不让变量污染别人的变量</p><h5 id="4-6-4-讲一下组件的命名规范"><a href="#4-6-4-讲一下组件的命名规范" class="headerlink" title="4.6.4. 讲一下组件的命名规范"></a>4.6.4. 讲一下组件的命名规范</h5><p>​    给组件命名有两种方式(在Vue.Component&#x2F;components时)，一种是使用链式命名”my-component”，一种是使用大驼峰命名”MyComponent”，</p><p>​因为要遵循W3C规范中的自定义组件名 (字母全小写且必须包含一个连字符)，避免和当前以及未来的 HTML 元素相冲突</p><h3 id="5-vue生命周期"><a href="#5-vue生命周期" class="headerlink" title="5 vue生命周期"></a>5 vue生命周期</h3><h4 id="5-1-钩子函数"><a href="#5-1-钩子函数" class="headerlink" title="5.1 钩子函数"></a>5.1 钩子函数</h4><p>特定的时间点，执行特定的操作</p><p>场景: 组件创建完毕后，可以在created 生命周期函数中发起Ajax 请求，从而初始化 data 数据</p><p>分类: 4大阶段8个方法</p><ul><li><p>初始化</p></li><li><p>挂载</p></li><li><p>更新</p></li><li><p>销毁</p></li><li><p>销毁</p></li></ul><table><thead><tr><th><strong>阶段</strong></th><th><strong>方法名</strong></th><th><strong>方法名</strong></th></tr></thead><tbody><tr><td>初始化</td><td>beforeCreate</td><td>created</td></tr><tr><td>挂载</td><td>beforeMount</td><td>mounted</td></tr><tr><td>更新</td><td>beforeUpdate</td><td>updated</td></tr><tr><td>销毁</td><td>beforeDestroy</td><td>destroyed</td></tr></tbody></table><h3 id="6-axios基本使用"><a href="#6-axios基本使用" class="headerlink" title="6 axios基本使用"></a>6 axios基本使用</h3><h4 id="6-1-axios的基本使用"><a href="#6-1-axios的基本使用" class="headerlink" title="6.1 axios的基本使用"></a>6.1 axios的基本使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;请求方式&#x27;</span>, <span class="comment">// get post</span></span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;请求地址&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;    <span class="comment">// 拼接到请求体的参数,  post请求的参数</span></span><br><span class="line">    <span class="attr">xxx</span>: xxx,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">params</span>: &#123;  <span class="comment">// 拼接到请求行的参数, get请求的参数</span></span><br><span class="line">   <span class="attr">xxx</span>: xxx </span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>) <span class="comment">// 后台返回的结果</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err) <span class="comment">// 后台报错返回</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="6-2-axios-获取数据"><a href="#6-2-axios-获取数据" class="headerlink" title="6.2 axios 获取数据"></a>6.2 axios 获取数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;1. 获取所有图书信息&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;getAllFn&quot;&gt;点击-查看控制台&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标1: 获取所有图书信息</span><br><span class="line">// 1. 下载axios</span><br><span class="line">// 2. 引入axios</span><br><span class="line">// 3. 发起axios请求</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getAllFn() &#123;</span><br><span class="line">      axios(&#123;</span><br><span class="line">        url: &quot;http://123.57.109.30:3006/api/getbooks&quot;,</span><br><span class="line">        method: &quot;GET&quot;, // 默认就是GET方式请求, 可以省略不写</span><br><span class="line">      &#125;).then((res) =&gt; &#123;</span><br><span class="line">        console.log(res);</span><br><span class="line">      &#125;);</span><br><span class="line">      // axios()-原地得到Promise对象</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="6-3-axios-传参"><a href="#6-3-axios-传参" class="headerlink" title="6.3 axios 传参"></a>6.3 axios 传参</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;2. 查询某本书籍信息&lt;/p&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; placeholder=&quot;请输入要查询 的书名&quot; v-model=&quot;bName&quot; /&gt;</span><br><span class="line">    &lt;button @click=&quot;findFn&quot;&gt;查询&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      bName: &quot;&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // ...省略了查询所有的代码</span><br><span class="line">    findFn() &#123;</span><br><span class="line">      axios(&#123;</span><br><span class="line">        url: &quot;/api/getbooks&quot;,</span><br><span class="line">        method: &quot;GET&quot;,</span><br><span class="line">        params: &#123; // 都会axios最终拼接到url?后面</span><br><span class="line">            bookname: this.bName</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).then(res =&gt; &#123;</span><br><span class="line">          console.log(res);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;3. 新增图书信息&lt;/p&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; placeholder=&quot;书名&quot; v-model=&quot;bookObj.bookname&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; placeholder=&quot;作者&quot; v-model=&quot;bookObj.author&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; placeholder=&quot;出版社&quot; v-model=&quot;bookObj.publisher&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;button @click=&quot;sendFn&quot;&gt;发布&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      bName: &quot;&quot;,</span><br><span class="line">      bookObj: &#123; // 参数名提前和后台的参数名对上-发送请求就不用再次对接了</span><br><span class="line">          bookname: &quot;&quot;,</span><br><span class="line">          author: &quot;&quot;,</span><br><span class="line">          publisher: &quot;&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // ...省略了其他代码</span><br><span class="line">    sendFn()&#123;</span><br><span class="line">       axios(&#123;</span><br><span class="line">           url: &quot;/api/addbook&quot;,</span><br><span class="line">           method: &quot;POST&quot;,</span><br><span class="line">           data: &#123;</span><br><span class="line">               appkey: &quot;7250d3eb-18e1-41bc-8bb2-11483665535a&quot;,</span><br><span class="line">               ...this.bookObj</span><br><span class="line">            // 等同于下面</span><br><span class="line">            // bookname: this.bookObj.bookname,</span><br><span class="line">            // author: this.bookObj.author,</span><br><span class="line">            // publisher: this.bookObj.publisher</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;) </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="6-4-axios基本使用-全局配置"><a href="#6-4-axios基本使用-全局配置" class="headerlink" title="6.4 axios基本使用-全局配置"></a>6.4 axios基本使用-全局配置</h4><blockquote><p>目标: 避免前缀基地址, 暴露在逻辑页面里, 统一设置</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&quot;http://123.57.109.30:3006&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有请求的url前置可以去掉, 请求时, axios会自动拼接baseURL的地址在前面</span></span><br><span class="line"><span class="title function_">getAllFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/api/getbooks&quot;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>, <span class="comment">// 默认就是GET方式请求, 可以省略不写</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// axios()-原地得到Promise对象</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="7-nextTick和-refs知识"><a href="#7-nextTick和-refs知识" class="headerlink" title="7. nextTick和$refs知识"></a>7. nextTick和$refs知识</h3><h4 id="7-1-refs-获取DOM"><a href="#7-1-refs-获取DOM" class="headerlink" title="7.1 $refs-获取DOM"></a>7.1 $refs-获取DOM</h4><blockquote><p>目标: 利用 ref 和 $refs 可以用于获取 dom 元素</p></blockquote><p>获取组件对象</p><p>1.创建组件&#x2F;引入组件&#x2F;注册组件&#x2F;使用组件</p><p>2.组件起别名ref</p><p>3.恰当时机, 获取组件对象</p><p>总结: 通过id &#x2F; ref, 都可以获取原生DOM标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;p&gt;1. 获取原生DOM元素&lt;/p&gt;</span><br><span class="line">      &lt;h1 id=&quot;h&quot; ref=&quot;myH&quot;&gt;我是一个孤独可怜又能吃的h1&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 获取组件对象</span><br><span class="line">// 1. 创建组件/引入组件/注册组件/使用组件</span><br><span class="line">// 2. 组件起别名ref</span><br><span class="line">// 3. 恰当时机, 获取组件对象</span><br><span class="line">export default &#123;</span><br><span class="line">    mounted()&#123;</span><br><span class="line">        console.log(document.getElementById(&quot;h&quot;)); // h1</span><br><span class="line">        console.log(this.$refs.myH); // h1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="7-2-refs-获取组件对象"><a href="#7-2-refs-获取组件对象" class="headerlink" title="7.2$refs-获取组件对象"></a>7.2$refs-获取组件对象</h4><p>总结: ref定义值, 通过$refs.值 来获取组件对象, 就能继续调用组件内的变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//components/Child/Demo.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;p&gt;我是Demo组件&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        fn()&#123;</span><br><span class="line">            console.log(&quot;demo组件内的方法被调用了&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//More.vue - 获取组件对象 - 调用组件方法</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;p&gt;1. 获取原生DOM元素&lt;/p&gt;</span><br><span class="line">      &lt;h1 id=&quot;h&quot; ref=&quot;myH&quot;&gt;我是一个孤独可怜又能吃的h1&lt;/h1&gt;</span><br><span class="line">      &lt;p&gt;2. 获取组件对象 - 可调用组件内一切&lt;/p&gt;</span><br><span class="line">      &lt;Demo ref=&quot;de&quot;&gt;&lt;/Demo&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 获取组件对象</span><br><span class="line">// 1. 创建组件/引入组件/注册组件/使用组件</span><br><span class="line">// 2. 组件起别名ref</span><br><span class="line">// 3. 恰当时机, 获取组件对象</span><br><span class="line">import Demo from &#x27;./Child/Demo&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    mounted()&#123;</span><br><span class="line">        console.log(document.getElementById(&quot;h&quot;)); // h1</span><br><span class="line">        console.log(this.$refs.myH); // h1</span><br><span class="line"></span><br><span class="line">        let demoObj = this.$refs.de;</span><br><span class="line">        demoObj.fn()</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Demo</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="7-3-nextTick使用"><a href="#7-3-nextTick使用" class="headerlink" title="7.3 $nextTick使用"></a>7.3 $nextTick使用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;p&gt;1. 获取原生DOM元素&lt;/p&gt;</span><br><span class="line">      &lt;h1 id=&quot;h&quot; ref=&quot;myH&quot;&gt;我是一个孤独可怜又能吃的h1&lt;/h1&gt;</span><br><span class="line">      &lt;p&gt;2. 获取组件对象 - 可调用组件内一切&lt;/p&gt;</span><br><span class="line">      &lt;Demo ref=&quot;de&quot;&gt;&lt;/Demo&gt;</span><br><span class="line">      &lt;p&gt;3. vue更新DOM是异步的&lt;/p&gt;</span><br><span class="line">      &lt;p ref=&quot;myP&quot;&gt;&#123;&#123; count &#125;&#125;&lt;/p&gt;</span><br><span class="line">      &lt;button @click=&quot;btn&quot;&gt;点击count+1, 马上提取p标签内容&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 获取组件对象</span><br><span class="line">// 1. 创建组件/引入组件/注册组件/使用组件</span><br><span class="line">// 2. 组件起别名ref</span><br><span class="line">// 3. 恰当时机, 获取组件对象</span><br><span class="line">import Demo from &#x27;./Child/Demo&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    mounted()&#123;</span><br><span class="line">        console.log(document.getElementById(&quot;h&quot;)); // h1</span><br><span class="line">        console.log(this.$refs.myH); // h1</span><br><span class="line"></span><br><span class="line">        let demoObj = this.$refs.de;</span><br><span class="line">        demoObj.fn()</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Demo</span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            count: 0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        btn()&#123;</span><br><span class="line">            this.count++; // vue监测数据更新, 开启一个DOM更新队列(异步任务)</span><br><span class="line">            console.log(this.$refs.myP.innerHTML); // 0</span><br><span class="line"></span><br><span class="line">            // 原因: Vue更新DOM异步</span><br><span class="line">            // 解决: this.$nextTick()</span><br><span class="line">            // 过程: DOM更新完会挨个触发$nextTick里的函数体</span><br><span class="line">             this.$nextTick(() =&gt; &#123;</span><br><span class="line">                console.log(this.$refs.myP.innerHTML); // 1</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="7-4-nextTick使用场景"><a href="#7-4-nextTick使用场景" class="headerlink" title="7.4 $nextTick使用场景"></a>7.4 $nextTick使用场景</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;input ref=&quot;myInp&quot; type=&quot;text&quot; placeholder=&quot;这是一个输入框&quot; v-if=&quot;isShow&quot;&gt;</span><br><span class="line">      &lt;button v-else @click=&quot;btn&quot;&gt;点击我进行搜索&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 点按钮(消失) - 输入框出现并聚焦</span><br><span class="line">// 1. 获取到输入框</span><br><span class="line">// 2. 输入框调用事件方法focus()达到聚焦行为</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            isShow: false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        async btn()&#123;</span><br><span class="line">            this.isShow = true;</span><br><span class="line">            // this.$refs.myInp.focus()</span><br><span class="line">            // 原因: data变化更新DOM是异步的</span><br><span class="line">            // 输入框还没有挂载到真实DOM上</span><br><span class="line">            // 解决:</span><br><span class="line">            // this.$nextTick(() =&gt; &#123;</span><br><span class="line">            //     this.$refs.myInp.focus()</span><br><span class="line">            // &#125;)</span><br><span class="line">            // 扩展: await取代回调函数</span><br><span class="line">            // $nextTick()原地返回Promise对象</span><br><span class="line">            await this.$nextTick()</span><br><span class="line">            this.$refs.myInp.focus()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="7-5-组件name属性使用"><a href="#7-5-组件name属性使用" class="headerlink" title="7.5 组件name属性使用"></a>7.5 组件name属性使用</h4><blockquote><p>可以用组件的name属性值, 来注册组件名字</p></blockquote><p>问题: 组件名不是可以随便写的?</p><p>答案: 我们封装的组件-可以自己定义name属性组件名-让使用者有个统一的前缀风格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//components/Com.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;p&gt;我是一个Com组件&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &quot;ComNameHaHa&quot; // 注册时可以定义自己的名字</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">//App.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;1. 生命周期&lt;/h1&gt;</span><br><span class="line">    &lt;Life v-if=&quot;show&quot;&gt;&lt;/Life&gt;</span><br><span class="line">    &lt;button @click=&quot;show = false&quot;&gt;销毁组件&lt;/button&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h1&gt;2. axios使用&lt;/h1&gt;</span><br><span class="line">    &lt;UseAxios&gt;&lt;/UseAxios&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h1&gt;3. $refs的使用&lt;/h1&gt;</span><br><span class="line">    &lt;More&gt;&lt;/More&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h1&gt;4. $nextTick使用场景&lt;/h1&gt;</span><br><span class="line">    &lt;Tick&gt;&lt;/Tick&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h1&gt;5. 组件对象里name属性&lt;/h1&gt;</span><br><span class="line">    &lt;ComNameHaHa&gt;&lt;/ComNameHaHa&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Life from &#x27;./components/Life&#x27;</span><br><span class="line">import UseAxios from &#x27;./components/UseAxios&#x27;</span><br><span class="line">import More from &#x27;./components/More&#x27;</span><br><span class="line">import Tick from &#x27;./components/Tick&#x27;</span><br><span class="line">import Com from &#x27;./components/Com&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      show: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Life,</span><br><span class="line">    UseAxios,</span><br><span class="line">    More,</span><br><span class="line">    Tick,</span><br><span class="line">    [Com.name]: Com // 对象里的key是变量的话[]属性名表达式</span><br><span class="line">    // &quot;ComNameHaHa&quot;: Com</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="7-6-总结"><a href="#7-6-总结" class="headerlink" title="7.6 总结"></a>7.6 总结</h4><h5 id="7-6-1-Vue-的-nextTick-的原理是什么-（高薪常问）"><a href="#7-6-1-Vue-的-nextTick-的原理是什么-（高薪常问）" class="headerlink" title="7.6.1 Vue 的 nextTick 的原理是什么? （高薪常问）"></a>7.6.1 Vue 的 nextTick 的原理是什么? （高薪常问）</h5><p>​    \1. 为什么需要 nextTick ，Vue 是异步修改 DOM 的并且不鼓励开发者直接接触 DOM，但有时候业务需要必须对数据更改–刷新后的 DOM 做相应的处理，这时候就可以使用 Vue.nextTick(callback)这个 api 了。</p><p>​    \2. 理解原理前的准备 首先需要知道事件循环中宏任务和微任务这两个概念,常见的宏任务有 script, setTimeout, setInterval, setImmediate, I&#x2F;O, UI rendering 常见的微任务有 process.nextTick(Nodejs),Promise.then(), MutationObserver;</p><p>​    \3. 理解 nextTick 的原理正是 vue 通过异步队列控制 DOM 更新和 nextTick 回调函数先后执行的方式。如果大家看过这部分的源码，会发现其中做了很多 isNative()的判断，因为这里还存在兼容性优雅降级的问题。可见 Vue 开发团队的深思熟虑，对性能的良苦用心。</p><h5 id="7-6-2-vue生命周期总共分为几个阶段？（必会）"><a href="#7-6-2-vue生命周期总共分为几个阶段？（必会）" class="headerlink" title="7.6.2 vue生命周期总共分为几个阶段？（必会）"></a>7.6.2 vue生命周期总共分为几个阶段？（必会）</h5><p>   Vue 实例从创建到销毁的过程，就是生命周期。也就是从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程，我们称这是 Vue 的生命周期。</p><p><strong>1****）beforeCreate</strong></p><p>​    在实例初始化之后，数据观测 (data observer) 和 event&#x2F;watcher 事件配置之前被调用。</p><p><strong>2****）created</strong></p><p>​    在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)， 属性和方法的运算，watch&#x2F;event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</p><p><strong>3****）beforeMount</strong></p><p>​    在挂载开始之前被调用：相关的 render 函数首次被调用。</p><p><strong>4****）mounted</strong></p><p>​    el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内。</p><p><strong>5****）beforeUpdate</strong></p><p>​    数据更新时调用，发生在虚拟 DOM 打补丁之前。这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务端进行。</p><p><strong>6****）updated</strong></p><p>​    由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</p><p><strong>7****）activated</strong></p><p>​    keep-alive 组件激活时调用。该钩子在服务器端渲染期间不被调用。</p><p><strong>8****）deactivated</strong></p><p>​    keep-alive 组件停用时调用。该钩子在服务器端渲染期间不被调用。</p><p><strong>9****）beforeDestroy</strong></p><p>​    实例销毁之前调用。在这一步，实例仍然完全可用。该钩子在服务器端渲染期间不被调用。</p><p><strong>10****）destroyed</strong></p><p>​    Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。</p><p><strong>11****）errorCaptured（2.5.0+ 新增）</strong></p><p>​    当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 false 以阻止该错误继续向上传播。</p><h5 id="7-6-3-第一次加载页面会触发哪几个钩子函数？（必会）"><a href="#7-6-3-第一次加载页面会触发哪几个钩子函数？（必会）" class="headerlink" title="7.6.3 第一次加载页面会触发哪几个钩子函数？（必会）"></a>7.6.3 第一次加载页面会触发哪几个钩子函数？（必会）</h5><p>   当页面第一次页面加载时会触发 beforeCreate, created, beforeMount, mounted 这几个钩子函数</p><h3 id="8-组件进阶"><a href="#8-组件进阶" class="headerlink" title="8 组件进阶"></a>8 组件进阶</h3><h4 id="8-1动态组件"><a href="#8-1动态组件" class="headerlink" title="8.1动态组件"></a>8.1动态组件</h4><p>多个组件使用同一个挂载点，并动态切换，这就是动态组件</p><p>设置挂载点<component></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;button @click=&quot;comName = &#x27;UserName&#x27;&quot;&gt;账号密码填写&lt;/button&gt;</span><br><span class="line">      &lt;button @click=&quot;comName = &#x27;UserInfo&#x27;&quot;&gt;个人信息填写&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">      &lt;p&gt;下面显示注册组件-动态切换:&lt;/p&gt;</span><br><span class="line">      &lt;div style=&quot;border: 1px solid red;&quot;&gt;</span><br><span class="line">          &lt;component :is=&quot;comName&quot;&gt;&lt;/component&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 动态组件 - 切换组件显示</span><br><span class="line">// 设置挂载点&lt;component&gt;, 使用is属性来设置要显示哪个组件</span><br><span class="line">// 场景: 同一个挂载点要切换 不同组件 显示</span><br><span class="line">// 1. 创建要被切换的组件 - 标签+样式</span><br><span class="line">// 2. 引入到要展示的vue文件内, 注册</span><br><span class="line">// 3. 变量-承载要显示的组件名</span><br><span class="line">// 4. 设置挂载点&lt;component :is=&quot;变量&quot;&gt;&lt;/component&gt;</span><br><span class="line">// 5. 点击按钮-切换comName的值为要显示的组件名</span><br><span class="line"></span><br><span class="line">import UserName from &#x27;../components/01/UserName&#x27;</span><br><span class="line">import UserInfo from &#x27;../components/01/UserInfo&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            comName: &quot;UserName&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        UserName,</span><br><span class="line">        UserInfo</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>vue内置component组件, 配合is属性, 设置要显示的组件名字</p><h4 id="8-2-组件缓存"><a href="#8-2-组件缓存" class="headerlink" title="8.2 组件缓存"></a>8.2 组件缓存</h4><blockquote><p>组件切换会导致组件被频繁销毁和重新创建, 性能不高</p></blockquote><p>使用Vue内置的keep-alive组件, 可以让包裹的组件保存在内存中不被销毁</p><p>演示1: 可以先给UserName.vue和UserInfo.vue 注册created和destroyed生命周期事件, 观察创建和销毁过程</p><p>演示2: 使用keep-alive内置的vue组件, 让动态组件缓存而不是销毁</p><p>语法:</p><p>​Vue内置的keep-alive组件 包起来要频繁切换的组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&quot;border: 1px solid red;&quot;&gt;</span><br><span class="line">    &lt;!-- Vue内置keep-alive组件, 把包起来的组件缓存起来 --&gt;</span><br><span class="line">    &lt;keep-alive&gt;</span><br><span class="line">        &lt;component :is=&quot;comName&quot;&gt;&lt;/component&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>补充生命周期:</p><ul><li>activated - 激活</li><li>deactivated - 失去激活状态</li></ul><blockquote><p>总结: keep-alive可以提高组件的性能, 内部包裹的标签不会被销毁和重新创建, 触发激活和非激活的生命周期方法</p></blockquote><h4 id="8-3-激活和非激活"><a href="#8-3-激活和非激活" class="headerlink" title="8.3 激活和非激活"></a>8.3 激活和非激活</h4><blockquote><p>标: 被缓存的组件不再创建和销毁, 而是激活和非激活</p></blockquote><p>补充2个钩子方法名:</p><p>​activated – 激活时触发</p><p>​deactivated – 失去激活状态触发</p><h4 id="8-4-组件插槽"><a href="#8-4-组件插槽" class="headerlink" title="8.4 组件插槽"></a>8.4 组件插槽</h4><p>vue提供组件插槽能力, 允许开发者在封装组件时，把不确定的部分定义为插槽</p><p>组件内用<slot></slot>占位</p><h5 id="8-4-1-插槽默认内容"><a href="#8-4-1-插槽默认内容" class="headerlink" title="8.4.1 插槽默认内容"></a>8.4.1 插槽默认内容</h5><blockquote><p>如果外面不给传, 想给个默认显示内容</p></blockquote><p>口诀: <slot>夹着内容默认显示内容, 如果不给插槽slot传东西, 则使用<slot>夹着的内容在原地显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;slot&gt;默认内容&lt;/slot&gt;</span><br></pre></td></tr></table></figure><h5 id="8-4-2-具名插槽"><a href="#8-4-2-具名插槽" class="headerlink" title="8.4.2 具名插槽"></a>8.4.2 具名插槽</h5><p>当一个组件内有2处以上需要外部传入标签的地方</p><p>传入的标签可以分别派发给不同的slot位置</p><p>要求: v-slot一般用跟template标签使用 (template是html5新出标签内容模板元素, 不会渲染到页面上, 一般被vue解析内部标签)</p><p>v-slot:title 简写 #</p><p> <slot name="title"></slot></p><p><template v-slot:title>内容</template></p><p>&lt;template #title&gt;内容</template></p><h5 id="8-4-3-作用域插槽"><a href="#8-4-3-作用域插槽" class="headerlink" title="8.4.3 作用域插槽"></a>8.4.3 作用域插槽</h5><p>目标: 子组件里值, 在给插槽赋值时在父组件环境下使用</p><p>复习: 插槽内slot中显示默认内容</p><p>例子: 默认内容在子组件中, 但是父亲在给插槽传值, 想要改变插槽显示的默认内容</p><p>口诀: </p><ol><li>子组件, 在slot上绑定属性和子组件内的值</li><li>使用组件, 传入自定义标签, 用template和v-slot&#x3D;”自定义变量名” </li><li>scope变量名自动绑定slot上所有属性和值</li></ol><h4 id="8-5-自定义指令"><a href="#8-5-自定义指令" class="headerlink" title="8.5 自定义指令"></a>8.5 自定义指令</h4><p>除了核心功能默认内置的指令 (<code>v-model</code> 和 <code>v-show</code>)，Vue 也允许注册自定义指令。 <code>v-xxx</code>  </p><p>html+css的复用的主要形式是组件</p><p>你需要对普通 DOM 元素进行底层操作，这时候就会用到自定义指令</p><h5 id="8-5-1-自定义指令-注册"><a href="#8-5-1-自定义指令-注册" class="headerlink" title="8.5.1 自定义指令-注册"></a>8.5.1 自定义指令-注册</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;!-- &lt;input type=&quot;text&quot; v-gfocus&gt; --&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; v-focus&gt;</span><br><span class="line">      </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 创建 &quot;自定义指令&quot;, 让输入框自动聚焦</span><br><span class="line">// 1. 创建自定义指令</span><br><span class="line">// 全局 / 局部</span><br><span class="line">// 2. 在标签上使用自定义指令  v-指令名</span><br><span class="line">// 注意:</span><br><span class="line">// inserted方法 - 指令所在标签, 被插入到网页上触发(一次)</span><br><span class="line">// update方法 - 指令对应数据/标签更新时, 此方法执行</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            colorStr: &#x27;red&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    directives: &#123;</span><br><span class="line">        focus: &#123;</span><br><span class="line">            inserted(el)&#123;</span><br><span class="line">                el.focus()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 全局指令 - 到处&quot;直接&quot;使用</span><br><span class="line">Vue.directive(&quot;gfocus&quot;, &#123;</span><br><span class="line">  inserted(el) &#123;</span><br><span class="line">    el.focus() // 触发标签的事件方法</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="8-5-2-自定义指令-传值"><a href="#8-5-2-自定义指令-传值" class="headerlink" title="8.5.2 自定义指令-传值"></a>8.5.2 自定义指令-传值</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 目标: 自定义指令传值</span><br><span class="line">Vue.directive(&#x27;color&#x27;, &#123;</span><br><span class="line">  inserted(el, binding) &#123;</span><br><span class="line">    el.style.color = binding.value</span><br><span class="line">  &#125;,</span><br><span class="line">  update(el, binding) &#123;</span><br><span class="line">    el.style.color = binding.value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在main.js用 Vue.directive()方法来进行注册, 以后随便哪个.vue文件里都可以直接用v-fofo指令</p><p><img src="E:\能放\前端\截图\Vue\自定义指令.png" alt="自定义指令"></p><h4 id="directives"><a href="#directives" class="headerlink" title="directives"></a>directives</h4><p>&#x2F;&#x2F; 目标: 创建 “自定义指令”, 让输入框自动聚焦<br>&#x2F;&#x2F; 1. 创建自定义指令<br>&#x2F;&#x2F; 全局 &#x2F; 局部<br>&#x2F;&#x2F; 2. 在标签上使用自定义指令  v-指令名<br>&#x2F;&#x2F; 注意:<br>&#x2F;&#x2F; inserted方法 - 指令所在标签, 被插入到网页上触发(一次)<br>&#x2F;&#x2F; update方法 - 指令对应数据&#x2F;标签更新时, 此方法执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-color=&quot;colorStr&quot; @click=&quot;changeColor&quot;&gt;修改文字颜色&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      theColor: &quot;red&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    changeColor() &#123;</span><br><span class="line">      this.theColor = &#x27;blue&#x27;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="8-6-总结"><a href="#8-6-总结" class="headerlink" title="8.6 总结"></a>8.6 总结</h4><h5 id="8-6-1-vue中solt的使用方式，以及solt作用域插槽的用法"><a href="#8-6-1-vue中solt的使用方式，以及solt作用域插槽的用法" class="headerlink" title="8.6.1. vue中solt的使用方式，以及solt作用域插槽的用法"></a>8.6.1. vue中solt的使用方式，以及solt作用域插槽的用法</h5><p>   使用方式：当组件当做标签进行使用的时候，用slot可以用来接受组件标签包裹的内容，当给solt标签添加name属性的 时候，可以调换响应的位置<br>  (高级用法) 插槽作用域： 当传递的不是单一的标签, 例如需要循环时, 把要循环的标签传入, 组件内使用v-for在slot标签上, 内部可以v-bind:把值传出来, 再外面把值赋予进去, 看示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;current-user&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; slotProps.user.firstName &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">&lt;/current-user&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// current-user组件, user属性和值, 绑定给slotProps上</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">v-bind:user</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; user.lastName &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>扩展阅读: <a href="https://cn.vuejs.org/v2/guide/components-slots.html">https://cn.vuejs.org/v2/guide/components-slots.html</a> (了解即可, 一般用不上)</p></blockquote><h5 id="8-6-2-跟keep-alive有关的生命周期是哪些？（必会）"><a href="#8-6-2-跟keep-alive有关的生命周期是哪些？（必会）" class="headerlink" title="8.6.2. 跟keep-alive有关的生命周期是哪些？（必会）"></a>8.6.2. 跟keep-alive有关的生命周期是哪些？（必会）</h5><p>​    <strong>1****）前言：</strong>在开发Vue项目的时候，大部分组件是没必要多次渲染的，所以Vue提供了一个内置组件keep-alive来缓存组件内部状态，避免重新渲染，在开发Vue项目的时候，大部分组件是没必要多次渲染的，所以Vue提供了一个内置组件keep-alive来缓存组件内部状态，避免重新渲染</p><p>​    <strong>2****）生命周期函数：</strong>在被keep-alive包含的组件&#x2F;路由中，会多出两个生命周期的钩子:activated 与 deactivated。</p><p>​       <strong>1****、activated钩子：</strong>在在组件第一次渲染时会被调用，之后在每次缓存组件被激活时调用。</p><p>​       <strong>2****、Activated钩子调用时机：</strong> 第一次进入缓存路由&#x2F;组件，在mounted后面，beforeRouteEnter守卫传给 next 的回调函数之前调用，并且给因为组件被缓存了，再次进入缓存路由、组件时，不会触发这些钩子函数，beforeCreate created beforeMount mounted 都不会触发</p><p>​       <strong>1****、deactivated钩子：</strong>组件被停用（离开路由）时调用。</p><p>​       <strong>2****、deactivated钩子调用时机</strong>：使用keep-alive就不会调用beforeDestroy(组件销毁前钩子)和destroyed(组件销毁)，因为组件没被销毁，被缓存起来了，这个钩子可以看作beforeDestroy的替代，如果你缓存了组件，要在组件销毁的的时候做一些事情，可以放在这个钩子里，组件内的离开当前路由钩子beforeRouteLeave &#x3D;&gt; 路由前置守卫 beforeEach &#x3D;&gt;全局后置钩子afterEach &#x3D;&gt; deactivated 离开缓存组件 &#x3D;&gt; activated 进入缓存组件(如果你进入的也是缓存路由)</p><h5 id="8-6-3-自定义指令-v-check、v-focus-的方法有哪些-它有哪些钩子函数-还有哪些钩子函数参数-（必会）"><a href="#8-6-3-自定义指令-v-check、v-focus-的方法有哪些-它有哪些钩子函数-还有哪些钩子函数参数-（必会）" class="headerlink" title="8.6.3. 自定义指令(v-check、v-focus)的方法有哪些?它有哪些钩子函数?还有哪些钩子函数参数?（必会）"></a>8.6.3. 自定义指令(v-check、v-focus)的方法有哪些?它有哪些钩子函数?还有哪些钩子函数参数?（必会）</h5><p>​    全局定义指令：在vue对象的directive方法里面有两个参数，一个是指令名称，另外一个是函数。组件内定义指令：directives</p><p>​    钩子函数：bind(绑定事件触发)、inserted(节点插入的时候触发)、update(组件内相关更新)</p><p>​    钩子函数参数：el、binding</p><h5 id="8-6-4-is这个特性你有用过吗？主要用在哪些方面？（高薪常问）"><a href="#8-6-4-is这个特性你有用过吗？主要用在哪些方面？（高薪常问）" class="headerlink" title="8.6.4. is这个特性你有用过吗？主要用在哪些方面？（高薪常问）"></a>8.6.4. is这个特性你有用过吗？主要用在哪些方面？（高薪常问）</h5><p><strong> 1****）动态组件</strong></p><p>​    <component :is="componentName"></component>， componentName可以是在本页面已经注册的局部组件名和全局组件名,也可以是一个组件的选项对象。 当控制componentName改变时就可以动态切换选择组件。</p><p><strong>  2****）is的用法</strong></p><p>​    有些HTML元素，诸如 <ul>、<ol>、<table>和<select>，对于哪些元素可以出现在其内部是有严格限制的。</p><p>​    而有些HTML元素，诸如 <li>、<tr> 和 <option>，只能出现在其它某些特定的元素内部。</p><p>​    <ul></p><p>​      <card-list></card-list></p><p>​    </ul></p><p>​    所以上面<card-list></card-list>会被作为无效的内容提升到外部，并导致最终渲染结果出错。应该这么写：</p><p>​    <ul></p><p>​      <li is="cardList"></li></p><p>​     </ul></p><h3 id="9-vue-router路由"><a href="#9-vue-router路由" class="headerlink" title="9 vue-router路由"></a>9 vue-router路由</h3><ul><li>安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add vue-router</span><br></pre></td></tr></table></figure><ul><li>导入路由</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>使用路由插件</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在vue中，使用使用vue的插件，都需要调用Vue.use()</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br></pre></td></tr></table></figure><ul><li>创建路由规则数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/find&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Find</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/my&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">My</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/part&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Part</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>创建路由对象 -  传入规则</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>关联到vue实例</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>components换成router-view</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure><blockquote><p>总结: 下载路由模块, 编写对应规则注入到vue实例上, 使用router-view挂载点显示切换的路由</p></blockquote><h4 id="9-1-声明式导航"><a href="#9-1-声明式导航" class="headerlink" title="9.1 声明式导航"></a>9.1 声明式导航</h4><blockquote><p>可用全局组件router-link来替代a标签</p></blockquote><ol><li>vue-router提供了一个全局组件 router-link</li><li>router-link实质上最终会渲染成a链接 to属性等价于提供 href属性(to无需#)</li><li>router-link提供了声明式导航高亮的功能(自带类名)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div class=&quot;footer_wrap&quot;&gt;</span><br><span class="line">      &lt;router-link to=&quot;/find&quot;&gt;发现音乐&lt;/router-link&gt;</span><br><span class="line">      &lt;router-link to=&quot;/my&quot;&gt;我的音乐&lt;/router-link&gt;</span><br><span class="line">      &lt;router-link to=&quot;/part&quot;&gt;朋友&lt;/router-link&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;top&quot;&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">/* 省略了 其他样式 */</span><br><span class="line">.footer_wrap .router-link-active&#123;</span><br><span class="line">  color: white;</span><br><span class="line">  background: black;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>总结: 链接导航, 用router-link配合to, 实现点击切换路由</p></blockquote><h4 id="9-2-声明式导航-跳转传参"><a href="#9-2-声明式导航-跳转传参" class="headerlink" title="9.2 声明式导航 - 跳转传参"></a>9.2 声明式导航 - 跳转传参</h4><blockquote><p>在跳转路由时, 可以给路由对应的组件内传值</p></blockquote><p>在router-link上的to属性传值, 语法格式如下</p><ul><li>&#x2F;path?参数名&#x3D;值</li><li>&#x2F;path&#x2F;值 – 需要路由对象提前配置 path: “&#x2F;path&#x2F;参数名”</li></ul><p>对应页面组件接收传递过来的值</p><ul><li>$route.query.参数名</li><li>$route.params.参数名</li></ul><ol><li><p>创建components&#x2F;Part.vue - 准备接收路由上传递的参数和值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;p&gt;关注明星&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;发现精彩&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;寻找伙伴&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;加入我们&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;人名: &#123;&#123; $route.query.name &#125;&#125; -- &#123;&#123; $route.params.username &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>路由定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/part&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Part</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/part/:username&quot;</span>, <span class="comment">// 有:的路径代表要接收具体的值</span></span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Part</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li><li><p>导航跳转, 传值给MyGoods.vue组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/part?name=小传&quot;&gt;朋友-小传&lt;/router-link&gt;</span><br><span class="line">&lt;router-link to=&quot;/part/小智&quot;&gt;朋友-小智&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>总结: </p><p>?key&#x3D;value   用$route.query.key 取值</p><p>&#x2F;值   提前在路由规则&#x2F;path&#x2F;:key  用$route.params.key  取值</p></blockquote><h4 id="9-3-路由-重定向"><a href="#9-3-路由-重定向" class="headerlink" title="9.3 路由 - 重定向"></a>9.3 路由 - 重定向</h4><blockquote><p>匹配path后, 强制切换到目标path上</p></blockquote><ul><li>网页打开url默认hash值是&#x2F;路径</li><li>redirect是设置要重定向到哪个路由路径</li></ul><p>例如: 网页默认打开, 匹配路由”&#x2F;“, 强制切换到”&#x2F;find”上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="comment">// 默认hash值路径</span></span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&quot;/find&quot;</span> <span class="comment">// 重定向到/find</span></span><br><span class="line">    <span class="comment">// 浏览器url中#后的路径被改变成/find-重新匹配数组规则</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>总结: 强制重定向后, 还会重新来数组里匹配一次规则</p></blockquote><h4 id="9-4-路由-404页面"><a href="#9-4-路由-404页面" class="headerlink" title="9.4 路由 - 404页面"></a>9.4 路由 - 404页面</h4><blockquote><p>目标: 如果路由hash值, 没有和数组里规则匹配</p></blockquote><p>默认给一个404页面</p><p>语法: 路由最后, path匹配*(任意路径) – 前面不匹配就命中最后这个, 显示对应组件页面</p><ol><li><p>创建NotFound页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;img src=&quot;../assets/404.png&quot; alt=&quot;&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    img&#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>在main.js - 修改路由配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">NotFound</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/NotFound&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// ...省略了其他配置</span></span><br><span class="line">  <span class="comment">// 404在最后(规则是从前往后逐个比较path)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">NotFound</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>总结: 如果路由未命中任何规则, 给出一个兜底的404页面</p></blockquote><h4 id="9-5-路由-模式设置"><a href="#9-5-路由-模式设置" class="headerlink" title="9.5 路由 - 模式设置"></a>9.5 路由 - 模式设置</h4><blockquote><p>目标: 修改路由在地址栏的模式</p></blockquote><p>hash路由例如:  <a href="http://localhost:8080/#/home">http://localhost:8080/#/home</a></p><p>history路由例如: <a href="http://localhost:8080/home">http://localhost:8080/home</a>  (以后上线需要服务器端支持, 否则找的是文件夹)</p><p><a href="https://router.vuejs.org/zh/api/#mode">模式文档</a></p><p>router&#x2F;index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  routes,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;history&quot;</span> <span class="comment">// 打包上线后需要后台支持, 模式是hash</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="9-6-vue路由-编程式导航"><a href="#9-6-vue路由-编程式导航" class="headerlink" title="9.6. vue路由 - 编程式导航"></a>9.6. vue路由 - 编程式导航</h4><blockquote><p>用JS代码来进行跳转</p></blockquote><p>语法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;路由路径&quot;</span>, <span class="comment">// 都去 router/index.js定义</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;路由名&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>main.js - 路由数组里, 给路由起名字</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    path<span class="punctuation">:</span> <span class="string">&quot;/find&quot;</span><span class="punctuation">,</span></span><br><span class="line">    name<span class="punctuation">:</span> <span class="string">&quot;Find&quot;</span><span class="punctuation">,</span></span><br><span class="line">    component<span class="punctuation">:</span> Find</span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    path<span class="punctuation">:</span> <span class="string">&quot;/my&quot;</span><span class="punctuation">,</span></span><br><span class="line">    name<span class="punctuation">:</span> <span class="string">&quot;My&quot;</span><span class="punctuation">,</span></span><br><span class="line">    component<span class="punctuation">:</span> My</span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    path<span class="punctuation">:</span> <span class="string">&quot;/part&quot;</span><span class="punctuation">,</span></span><br><span class="line">    name<span class="punctuation">:</span> <span class="string">&quot;Part&quot;</span><span class="punctuation">,</span></span><br><span class="line">    component<span class="punctuation">:</span> Part</span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><ol><li>App.vue - 换成span 配合js的编程式导航跳转</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div class=&quot;footer_wrap&quot;&gt;</span><br><span class="line">      &lt;span @click=&quot;btn(&#x27;/find&#x27;, &#x27;Find&#x27;)&quot;&gt;发现音乐&lt;/span&gt;</span><br><span class="line">      &lt;span @click=&quot;btn(&#x27;/my&#x27;, &#x27;My&#x27;)&quot;&gt;我的音乐&lt;/span&gt;</span><br><span class="line">      &lt;span @click=&quot;btn(&#x27;/part&#x27;, &#x27;Part&#x27;)&quot;&gt;朋友&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;top&quot;&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 编程式导航 - js方式跳转路由</span><br><span class="line">// 语法:</span><br><span class="line">// this.$router.push(&#123;path: &quot;路由路径&quot;&#125;)</span><br><span class="line">// this.$router.push(&#123;name: &quot;路由名&quot;&#125;)</span><br><span class="line">// 注意:</span><br><span class="line">// 虽然用name跳转, 但是url的hash值还是切换path路径值</span><br><span class="line">// 场景:</span><br><span class="line">// 方便修改: name路由名(在页面上看不见随便定义)</span><br><span class="line">// path可以在url的hash值看到(尽量符合组内规范)</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    btn(targetPath, targetName)&#123;</span><br><span class="line">      // 方式1: path跳转</span><br><span class="line">      this.$router.push(&#123;</span><br><span class="line">        // path: targetPath,</span><br><span class="line">        name: targetName</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="9-7-编程式导航-跳转传参"><a href="#9-7-编程式导航-跳转传参" class="headerlink" title="9.7 编程式导航 - 跳转传参"></a>9.7 编程式导航 - 跳转传参</h4><blockquote><p>目标: JS跳转路由, 传参</p></blockquote><p>语法 query &#x2F; params 任选 一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;路由路径&quot;</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;路由名&quot;</span>,</span><br><span class="line">    <span class="attr">query</span>: &#123;</span><br><span class="line">    <span class="string">&quot;参数名&quot;</span>: 值</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line"><span class="string">&quot;参数名&quot;</span>: 值</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应路由接收   $route.params.参数名   取值</span></span><br><span class="line"><span class="comment">// 对应路由接收   $route.query.参数名    取值</span></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;格外注意: 使用path会自动忽略params&#x3D;&#x3D;</p><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div class=&quot;footer_wrap&quot;&gt;</span><br><span class="line">      &lt;span @click=&quot;btn(&#x27;/find&#x27;, &#x27;Find&#x27;)&quot;&gt;发现音乐&lt;/span&gt;</span><br><span class="line">      &lt;span @click=&quot;btn(&#x27;/my&#x27;, &#x27;My&#x27;)&quot;&gt;我的音乐&lt;/span&gt;</span><br><span class="line">      &lt;span @click=&quot;oneBtn&quot;&gt;朋友-小传&lt;/span&gt;</span><br><span class="line">      &lt;span @click=&quot;twoBtn&quot;&gt;朋友-小智&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;top&quot;&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 编程式导航 - 跳转路由传参</span><br><span class="line">// 方式1:</span><br><span class="line">// params =&gt; $route.params.参数名</span><br><span class="line">// 方式2:</span><br><span class="line">// query =&gt; $route.query.参数名</span><br><span class="line">// 重要: path会自动忽略params</span><br><span class="line">// 推荐: name+query方式传参</span><br><span class="line">// 注意: 如果当前url上&quot;hash值和?参数&quot;与你要跳转到的&quot;hash值和?参数&quot;一致, 爆出冗余导航的问题, 不会跳转路由</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    btn(targetPath, targetName)&#123;</span><br><span class="line">      // 方式1: path跳转</span><br><span class="line">      this.$router.push(&#123;</span><br><span class="line">        // path: targetPath,</span><br><span class="line">        name: targetName</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    oneBtn()&#123;</span><br><span class="line">      this.$router.push(&#123;</span><br><span class="line">        name: &#x27;Part&#x27;,</span><br><span class="line">        params: &#123;</span><br><span class="line">          username: &#x27;小传&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    twoBtn()&#123;</span><br><span class="line">      this.$router.push(&#123;</span><br><span class="line">        name: &#x27;Part&#x27;,</span><br><span class="line">        query: &#123;</span><br><span class="line">          name: &#x27;小智&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>总结: 传参2种方式</p><p>query方式 </p><p>params方式 </p></blockquote><h4 id="9-8-vue路由-路由嵌套"><a href="#9-8-vue路由-路由嵌套" class="headerlink" title="9.8 vue路由 - 路由嵌套"></a>9.8 vue路由 - 路由嵌套</h4><blockquote><p>在现有的一级路由下, 再嵌套二级路由</p></blockquote><p><a href="https://music.163.com/">二级路由示例-网易云音乐-发现音乐下</a></p><p>router-view嵌套架构图</p><ol><li><p>创建需要用的所有组件</p><p>src&#x2F;views&#x2F;Find.vue – 发现音乐页</p><p>src&#x2F;views&#x2F;My.vue – 我的音乐页</p><p>src&#x2F;views&#x2F;Second&#x2F;Recommend.vue  – 发现音乐页 &#x2F; 推荐页面</p><p>src&#x2F;views&#x2F;Second&#x2F;Ranking.vue      – 发现音乐页 &#x2F; 排行榜页面</p><p>src&#x2F;views&#x2F;Second&#x2F;SongList.vue     – 发现音乐页 &#x2F; 歌单页面</p></li><li><p>main.js– 继续配置2级路由</p><p>一级路由path从&#x2F;开始定义</p><p>二级路由往后path直接写名字, 无需&#x2F;开头</p><p>嵌套路由在上级路由的children数组里编写路由信息对象</p></li><li><p>说明：</p><p>App.vue的router-view负责发现音乐和我的音乐页面, 切换</p><p>Find.vue的的router-view负责发现音乐下的, 三个页面, 切换</p></li><li><p>配置二级导航和样式(&#x3D;&#x3D;可直接复制&#x3D;&#x3D;) - 在Find.vue中</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- &lt;p&gt;推荐&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;排行榜&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;歌单&lt;/p&gt; --&gt;</span><br><span class="line">    &lt;div class=&quot;nav_main&quot;&gt;</span><br><span class="line">      &lt;router-link to=&quot;/find/recommend&quot;&gt;推荐&lt;/router-link&gt;</span><br><span class="line">      &lt;router-link to=&quot;/find/ranking&quot;&gt;排行榜&lt;/router-link&gt;</span><br><span class="line">      &lt;router-link to=&quot;/find/songlist&quot;&gt;歌单&lt;/router-link&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div style=&quot;1px solid red;&quot;&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.nav_main &#123;</span><br><span class="line">  background-color: red;</span><br><span class="line">  color: white;</span><br><span class="line">  padding: 10px 0;</span><br><span class="line">&#125;</span><br><span class="line">.nav_main a &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  color: white;</span><br><span class="line">  font-size: 12px;</span><br><span class="line">  margin: 7px 17px 0;</span><br><span class="line">  padding: 0px 15px 2px 15px;</span><br><span class="line">  height: 20px;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  line-height: 20px;</span><br><span class="line">  border-radius: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.nav_main a:hover &#123;</span><br><span class="line">  background-color: brown;</span><br><span class="line">&#125;</span><br><span class="line">.nav_main .router-link-active&#123;</span><br><span class="line">  background-color: brown;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ol><li>配置路由规则-二级路由展示</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// ...省略其他</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/find&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Find&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Find</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;recommend&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Recommend</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;ranking&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Ranking</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;songlist&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">SongList</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...省略其他</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol><li>说明：</li></ol><ul><li>App.vue, 外层的router-view负责发现音乐和我的音乐页面切换</li><li>Find.vue 内层的router-view负责发现音乐下的子tab对应的组件切换</li></ul><ol><li>运行 - 点击导航观察嵌套路由在哪里展示</li></ol><blockquote><p>总结: 嵌套路由, 找准在哪个页面里写router-view和对应规则里写children</p></blockquote><h5 id="9-8-1-声明导航-类名区别"><a href="#9-8-1-声明导航-类名区别" class="headerlink" title="9.8.1 声明导航 - 类名区别"></a>9.8.1 声明导航 - 类名区别</h5><blockquote><p>目标: router-link自带的2个类名的区别是什么</p></blockquote><p>观察路由嵌套导航的样式</p><ul><li>router-link-exact-active  (精确匹配) url中hash值路径, 与href属性值完全相同, 设置此类名</li><li>router-link-active             (模糊匹配) url中hash值,    包含href属性值这个路径</li></ul><h4 id="9-9-全局前置守卫"><a href="#9-9-全局前置守卫" class="headerlink" title="9.9 全局前置守卫"></a>9.9 全局前置守卫</h4><blockquote><p>目标: 路由跳转之前, 先执行一次前置守卫函数, 判断是否可以正常跳转</p></blockquote><p>使用例子: 在跳转路由前, 判断用户登陆了才能去&lt;我的音乐&gt;页面, 未登录弹窗提示回到发现音乐页面</p><ol><li>在路由对象上使用固定方法beforeEach</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标: 路由守卫</span></span><br><span class="line"><span class="comment">// 场景: 当你要对路由权限判断时</span></span><br><span class="line"><span class="comment">// 语法: router.beforeEach((to, from, next)=&gt;&#123;//路由跳转&quot;之前&quot;先执行这里, 决定是否跳转&#125;)</span></span><br><span class="line"><span class="comment">// 参数1: 要跳转到的路由 (路由对象信息)    目标</span></span><br><span class="line"><span class="comment">// 参数2: 从哪里跳转的路由 (路由对象信息)  来源</span></span><br><span class="line"><span class="comment">// 参数3: 函数体 - next()才会让路由正常的跳转切换, next(false)在原地停留, next(&quot;强制修改到另一个路由路径上&quot;)</span></span><br><span class="line"><span class="comment">// 注意: 如果不调用next, 页面留在原地</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子: 判断用户是否登录, 是否决定去&quot;我的音乐&quot;/my</span></span><br><span class="line"><span class="keyword">const</span> isLogin = <span class="literal">true</span>; <span class="comment">// 登录状态(未登录)</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&quot;/my&quot;</span> &amp;&amp; isLogin === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;请登录&quot;</span>)</span><br><span class="line">    <span class="title function_">next</span>(<span class="literal">false</span>) <span class="comment">// 阻止路由跳转</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>() <span class="comment">// 正常放行</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>总结: next()放行, next(false)留在原地不跳转路由, next(path路径)强制换成对应path路径跳转</p></blockquote><h3 id="10-vant组件库"><a href="#10-vant组件库" class="headerlink" title="10 vant组件库"></a>10 vant组件库</h3><p>官网vant2:</p><p><a href="https://vant-contrib.gitee.io/vant/v2/#/zh-CN/">https://vant-contrib.gitee.io/vant/v2/#/zh-CN/</a></p><ol><li><p>安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add babel-plugin-import -D</span><br></pre></td></tr></table></figure></li><li><p>在babel配置文件里 (babel.config.js)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    [<span class="string">&#x27;import&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">libraryName</span>: <span class="string">&#x27;vant&#x27;</span>,</span><br><span class="line">      <span class="attr">libraryDirectory</span>: <span class="string">&#x27;es&#x27;</span>,</span><br><span class="line">      <span class="attr">style</span>: <span class="literal">true</span></span><br><span class="line">    &#125;, <span class="string">&#x27;vant&#x27;</span>]</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>全局注册 - 会自动按需引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式1: 全局 - 自动按需引入vant组件</span></span><br><span class="line"><span class="comment">// (1): 下载 babel-plugin-import</span></span><br><span class="line"><span class="comment">// (2): babel.config.js - 添加官网说的配置 (一定要重启服务器)</span></span><br><span class="line"><span class="comment">// (3): main.js 按需引入某个组件, Vue.use全局注册 - 某个.vue文件中直接使用vant组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vant&#x27;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Button</span>) <span class="comment">// Button组件全局注册, 真正注册的组件名VanButton</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="10-1-总结"><a href="#10-1-总结" class="headerlink" title="10.1 总结"></a>10.1 总结</h3><h4 id="10-1-路由之间是怎么跳转的？有哪些方式"><a href="#10-1-路由之间是怎么跳转的？有哪些方式" class="headerlink" title="10.1. 路由之间是怎么跳转的？有哪些方式"></a>10.1. 路由之间是怎么跳转的？有哪些方式</h4><p>1、<router-link to="需要跳转到页面的路径"></p><p> 2、this.$router.push()跳转到指定的url，并在history中添加记录，点击回退返回到上一个页面</p><p> 3、this.$router.replace()跳转到指定的url，但是history中不会添加记录，点击回退到上上个页面</p><p> 4、this.$touter.go(n)向前或者后跳转n个页面，n可以是正数也可以是负数</p><h4 id="10-2-vue-router怎么配置路由"><a href="#10-2-vue-router怎么配置路由" class="headerlink" title="10.2. vue-router怎么配置路由"></a>10.2. vue-router怎么配置路由</h4><p>在vue中配置路由分为5个步骤，分别是：</p><ol><li>引入vue-router.js</li><li>配置路由path和组件, 和生成路由对象</li><li>把路由对象配置到new Vue中router选项下</li><li>页面使用<router-view></router-view> 承载路由</li><li><router-link to="要跳转的路径"></router-link> 设置路由导航(声明式导航方式&#x2F;编程式跳转)</li></ol><h4 id="10-3-vue-router的钩子函数都有哪些"><a href="#10-3-vue-router的钩子函数都有哪些" class="headerlink" title="10.3. vue-router的钩子函数都有哪些"></a>10.3. vue-router的钩子函数都有哪些</h4><p>关于vue-router中的钩子函数主要分为3类</p><p>全局钩子函数要包含beforeEach</p><p>  beforeEach函数有三个参数,分别是:</p><p>​to:router即将进入的路由对象<br>​    from:当前导航即将离开的路由<br>​    next:function,进行管道中的一个钩子，如果执行完了,则导航的状态就是 confirmed （确认的）否则为false,终止导航。</p><p>单独路由独享组件</p><p>​beforeEnter,</p><p>组件内钩子</p><p>   beforeRouterEnter，<br>   beforeRouterUpdate,<br>   beforeRouterLeave</p><h4 id="10-4-路由传值的方式有哪几种"><a href="#10-4-路由传值的方式有哪几种" class="headerlink" title="10.4. 路由传值的方式有哪几种"></a>10.4. 路由传值的方式有哪几种</h4><p>Vue-router传参可以分为两大类，分别是编程式的导航 router.push和声明式的导航</p><p>router.push</p><p>   字符串：直接传递路由地址，但是不能传递参数</p><p>​          this.$router.push(“home”)</p><p>​    对象：</p><p>​      命名路由  这种方式传递参数，目标页面刷新会报错 - name+params</p><p>​               this.$router.push({name:”news”,params:{userId:123})</p><p>​      查询参数  和path配对的是query</p><p>​               this.$router.push({path:”&#x2F;news’,query:{uersId:123}) </p><p>​      接收参数  this.$route.query</p><p>声明式导航</p><p>​      字符串 &lt;router-link to:”news”&gt;</router-link></p><p>​      命名路由 &lt;router-link :to:”{name:’news’,params:{userid:1111}}”&gt;</route-link></p><p>​  还可以to&#x3D;”&#x2F;path&#x2F;值” - 需要提前在路由 规则里值 &#x2F;path&#x2F;:key</p><p>​      查询参数 <router-link :to="{path:'/news',query:{userId:1111}}"></router-link></p><p>​   还可以to&#x3D;”&#x2F;path?key&#x3D;value</p><h4 id="10-5-怎么定义vue-router的动态路由-怎么获取传过来的动态参数"><a href="#10-5-怎么定义vue-router的动态路由-怎么获取传过来的动态参数" class="headerlink" title="10.5. 怎么定义vue-router的动态路由?怎么获取传过来的动态参数?"></a>10.5. 怎么定义vue-router的动态路由?怎么获取传过来的动态参数?</h4><p>   动态路由指的就是path路径上传智, 前提需要路由规则了提前配置&#x2F;path&#x2F;:key名, 可以写多个用&#x2F;隔开, 获取使用$route.params.key名来提取对应用路径传过来的值</p><h4 id="10-6-Vue的路由实现模式：hash模式和history模式（必会）"><a href="#10-6-Vue的路由实现模式：hash模式和history模式（必会）" class="headerlink" title="10.6. Vue的路由实现模式：hash模式和history模式（必会）"></a>10.6. Vue的路由实现模式：hash模式和history模式（必会）</h4><p>hash模式：在浏览器中符号“#”，#以及#后面的字符称之为hash，用 window.location.hash 读取。特点：hash虽然在URL中，但不被包括在HTTP请求中；用来指导浏览器动作，对服务端安全无用，hash不会重加载页面。</p><p>history模式：history采用HTML5的新特性；且提供了两个新方法： pushState()， replaceState()可以对浏览器历史记录栈进行修改，以及popState事件的监听到状态变更</p><h4 id="10-7-请说出路由配置项常用的属性及作用（必会）"><a href="#10-7-请说出路由配置项常用的属性及作用（必会）" class="headerlink" title="10.7. 请说出路由配置项常用的属性及作用（必会）"></a>10.7. 请说出路由配置项常用的属性及作用（必会）</h4><p>​    路由配置参数：  </p><p>​      path : 跳转路径<br>​      component : 路径相对于的组件<br>​     name:命名路由<br>​     children:子路由的配置参数(路由嵌套)<br>​     props:路由解耦<br>​     redirect : 重定向路由</p><h4 id="10-8-编程式导航使用的方法以及常用的方法（必会）"><a href="#10-8-编程式导航使用的方法以及常用的方法（必会）" class="headerlink" title="10.8. 编程式导航使用的方法以及常用的方法（必会）"></a>10.8. 编程式导航使用的方法以及常用的方法（必会）</h4><p>​    路由跳转 ： this.$router.push()<br>​    路由替换 : this.$router.replace()<br>​    后退： this.$router.back()<br>​    前进 ：this.$router.forward()</p><h4 id="10-9-Vue如何去除URL中的-（必会）"><a href="#10-9-Vue如何去除URL中的-（必会）" class="headerlink" title="10.9. Vue如何去除URL中的#（必会）"></a>10.9. Vue如何去除URL中的#（必会）</h4><p>​    vue-router 默认使用 hash 模式，所以在路由加载的时候，项目中的 URL 会自带 “#”。如果不想使用 “#”， 可以使用 vue-router 的另一种模式 history：new Router ({ mode : ‘history’, routes: [ ]})</p><p>​    需要注意的是，当我们启用 history 模式的时候，由于我们的项目是一个单页面应用，所以在路由跳转的时候，就会出现访问不到静态资源而出现 “404” 的情况，这时候就需要服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该返回同一个 “index.html” 页面。</p><h4 id="10-10-说一下你在vue中踩过的坑（必会）"><a href="#10-10-说一下你在vue中踩过的坑（必会）" class="headerlink" title="10.10. 说一下你在vue中踩过的坑（必会）"></a>10.10. 说一下你在vue中踩过的坑（必会）</h4><p>​    1、第一个是给对象添加属性的时候，直接通过给data里面的对象添加属性然后赋值，新添加的属性不是响应式的</p><p>​    【解决办法】通过Vue.set(对象，属性，值)这种方式就可以达到，对象新添加的属性是响应式的</p><p>2、 在created操作dom的时候，是报错的，获取不到dom，这个时候实例vue实例没有挂载</p><p>​    【解决办法】通过：Vue.nextTick(回调函数进行获取)</p><h4 id="10-11-route-x2F-router的区别？"><a href="#10-11-route-x2F-router的区别？" class="headerlink" title="10.11 $route&#x2F;router的区别？"></a>10.11 $route&#x2F;router的区别？</h4><p>$route是路由信息对象，包括‘path，hash，query，fullPath，matched，name’等路由信息参数；<br>$router是路由实例对象，包括了路由的跳转方法，实例对象等</p><h3 id="11-补充扩展"><a href="#11-补充扩展" class="headerlink" title="11. 补充扩展"></a>11. 补充扩展</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//自定义校验规则 </span><br><span class="line">validator ( value ) &#123;</span><br><span class="line">内容</span><br><span class="line">&#125;</span><br><span class="line">参数 value:接收到的数组</span><br></pre></td></tr></table></figure><p><img src="E:\能放\前端\截图\Vue\自定义校验规则.png" alt="自定义校验规则"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Vue&quot;&gt;&lt;a href=&quot;#Vue&quot; class=&quot;headerlink&quot; title=&quot;Vue&quot;&gt;&lt;/a&gt;Vue&lt;/h2&gt;&lt;h3 id=&quot;1-基础使用&quot;&gt;&lt;a href=&quot;#1-基础使用&quot; class=&quot;headerlink&quot; title=&quot;1. 基础使用&quot;&gt;</summary>
      
    
    
    
    <category term="资料" scheme="http://example.com/categories/%E8%B5%84%E6%96%99/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>初识(七)</title>
    <link href="http://example.com/2022/11/06/%E5%88%9D%E8%AF%86-%E4%B8%83/"/>
    <id>http://example.com/2022/11/06/%E5%88%9D%E8%AF%86-%E4%B8%83/</id>
    <published>2022-11-06T03:49:05.000Z</published>
    <updated>2022-11-06T03:55:53.148Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue基础"><a href="#Vue基础" class="headerlink" title="Vue基础"></a>Vue基础</h2><h3 id="yarn包管理器"><a href="#yarn包管理器" class="headerlink" title="yarn包管理器"></a>yarn包管理器</h3><p>快速、可靠、安全的依赖管理工具。和 npm 类似, 都是包管理工具, 可以用于下载包, 就是比npm快</p><p>中文官网地址: <a href="https://yarn.bootcss.com/">https://yarn.bootcss.com/</a></p><h3 id="下载yarn"><a href="#下载yarn" class="headerlink" title="下载yarn"></a>下载yarn</h3><p>下载地址:  <a href="https://yarn.bootcss.com/docs/install/#windows-stable">https://yarn.bootcss.com/docs/install/#windows-stable</a> </p><ul><li><p>windows - 软件包(在笔记文件夹里)</p></li><li><p>mac - 通过homebrew安装(看上面地址里)</p><ul><li><p>mac如果没安装过homeBrew先运行这个命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL http://cdn.jsdelivr.net/gh/ineo6/homebrew-install/install)</span>&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>上面命令不行: 试试这个: curl -o- -L <a href="https://yarnpkg.com/install.sh">https://yarnpkg.com/install.sh</a> | bash (直接安装yarn)</p></li></ul><p>&#x3D;&#x3D;不要安到带中文的路径下, 建议在C盘&#x2F;&#x3D;&#x3D;</p><h3 id="使用yarn"><a href="#使用yarn" class="headerlink" title="使用yarn"></a>使用yarn</h3><p>与npm类似, 可以试试, 新建一个空白文件夹, 执行以下命令尝试一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 初始化, 得到package.json文件(终端路径所在文件夹下)</span></span><br><span class="line">yarn init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 添加依赖(下包)</span></span><br><span class="line"><span class="comment"># 命令: yarn add [package]</span></span><br><span class="line"><span class="comment"># 命令: yarn add [package]@[version]</span></span><br><span class="line">yarn add jquery</span><br><span class="line">yarn add jquery@3.5.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 移除包</span></span><br><span class="line"><span class="comment"># 命令: yarn remove [package]</span></span><br><span class="line">yarn remove jquery</span><br><span class="line">             </span><br><span class="line"><span class="comment"># 4. 安装项目全部依赖(一般拿到别人的项目时, 缺少node_modules)          </span></span><br><span class="line">yarn</span><br><span class="line"><span class="comment"># 会根据当前项目package.json记录的包名和版本, 全部下载到当前工程中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 全局</span></span><br><span class="line"><span class="comment"># 安装: yarn global add [package]</span></span><br><span class="line"><span class="comment"># 卸载: yarn global remove [package]</span></span><br><span class="line"><span class="comment"># 注意: global一定在add左边</span></span><br><span class="line">yarn global add @vue/cli</span><br><span class="line"><span class="comment"># 如何使用, 为明天学习vue做铺垫</span></span><br></pre></td></tr></table></figure><h3 id="yarn可能遇到的问题"><a href="#yarn可能遇到的问题" class="headerlink" title="yarn可能遇到的问题"></a>yarn可能遇到的问题</h3><p>如果报错参考报错文档: <a href="http://itcz_jiaoyu.gitee.io/error/#811">http://itcz_jiaoyu.gitee.io/error/#811</a></p><h2 id="知识点自测"><a href="#知识点自测" class="headerlink" title="知识点自测"></a>知识点自测</h2><p>对这些知识点了如指掌, 学习今天的内容会轻松很多</p><ul><li><p><input disabled="" type="checkbox"> 什么是模块, 模块化开发规范(CommonJS &#x2F; ES6)</p><p>commonJS规范:</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nodejs - commonJS规范-规定了导出和导入方式</span></span><br><span class="line"><span class="comment">// 导出 module.exports = &#123;&#125;</span></span><br><span class="line"><span class="comment">// 导入 const 变量 = require(&quot;模块标识&quot;)</span></span><br></pre></td></tr></table></figure><p>  ES6规范</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出 export 或者 export default &#123;&#125;</span></span><br><span class="line"><span class="comment">// 导入 import 变量名 from &#x27;模块标识&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> 字体图标的使用</li></ul><ol><li>可以去阿里巴巴矢量图标库, 选中想要的图标, 登录后, 生成css文件和字体文件</li><li>下载css文件和字体文件, 也可以使用在线地址</li><li>在自己页面中引入iconfont.css, 并在想显示字体图标的标签上使用类名即可</li></ol><ul><li><input disabled="" type="checkbox"> 箭头函数非常熟练</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;&#125;   </span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn2</span> = (<span class="params">a, b</span>) =&gt; &#123;<span class="keyword">return</span> a + b&#125; </span><br><span class="line"><span class="title function_">fn</span>(<span class="number">10</span>, <span class="number">20</span>); <span class="comment">// 结果是30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当形参只有一个()可以省略</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn3</span> = a =&gt; &#123;<span class="keyword">return</span> a * <span class="number">2</span>&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">50</span>); <span class="comment">// 结果是100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当&#123;&#125;省略return也省略, 默认返回箭头后表达式结果</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn4</span> = a =&gt; a * <span class="number">2</span>;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">50</span>); <span class="comment">// 结果是100</span></span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> 什么是服务器, 本地启动node服务, 服务器和浏览器关系, 服务器作用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">服务器是一台性能高, 24小时可以开机的电脑</span><br><span class="line"></span><br><span class="line">服务器可以提供服务(例如: 文件存储, 网页浏览, 资源返回)</span><br><span class="line"></span><br><span class="line">在window电脑里安装node后, 可以编写代码用node 启动一个web服务, 来读取本地html文件, 返回给浏览器查看</span><br><span class="line"></span><br><span class="line">浏览器 -&gt; 请求资源 -&gt; 服务器</span><br><span class="line"></span><br><span class="line">浏览器 &lt;-  响应数据 &lt;- 服务器</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> 开发环境 和 生产环境 以及英文”development”, “production” 2个单词尽量会写会读</li><li><input disabled="" type="checkbox"> 初始化包环境和package.json文件作用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm下载的包和对应版本号, 都会记录到下载包时终端所在文件夹下的package.json文件里</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> package.json中的dependencies和 devDependencies区别和作用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* dependencies  别人使用你的包必须下载的依赖, 比如yarn add  jquery</span><br><span class="line"></span><br><span class="line">* devDependencies 开发你的包需要依赖的包,  比如yarn add webpack  webpack-cli -D (-D 相当于 --save-dev)</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> 终端的熟练使用: 切换路径, 清屏, 包下载命令等</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">切换路径  <span class="built_in">cd</span>  </span><br><span class="line"></span><br><span class="line">清屏 cls 或者 clear</span><br></pre></td></tr></table></figure><ul><li><p><input disabled="" type="checkbox"> 对base64字符串, 图片转base64字符串了解</p><p>在线装换图片<a href="http://tool.chinaz.com/tools/imgtobase/">http://tool.chinaz.com/tools/imgtobase/</a></p></li></ul><h2 id="1-webpack基本概念"><a href="#1-webpack基本概念" class="headerlink" title="1. webpack基本概念"></a>1. webpack基本概念</h2><p>webpack本身是, node的一个第三方模块包, 用于打包代码</p><ul><li>现代 javascript 应用程序的 <strong>静态模块打包器 (module bundler)</strong></li><li>为要学的 vue-cli 开发环境做铺垫</li></ul><blockquote><h3 id="x3D-x3D-webpack能做什么-x3D-x3D"><a href="#x3D-x3D-webpack能做什么-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;webpack能做什么&#x3D;&#x3D;"></a>&#x3D;&#x3D;webpack能做什么&#x3D;&#x3D;</h3></blockquote><p>把很多文件打包整合到一起, 缩小项目体积, 提高加载速度</p><h2 id="2-webpack的使用"><a href="#2-webpack的使用" class="headerlink" title="2. webpack的使用"></a>2. webpack的使用</h2><h3 id="2-0-webpack基础使用"><a href="#2-0-webpack基础使用" class="headerlink" title="2.0_webpack基础使用"></a>2.0_webpack基础使用</h3><p>默认入口: .&#x2F;src&#x2F;index.js</p><p>默认出口: .&#x2F;dist&#x2F;main.js</p><p>&#x3D;&#x3D;注意:路径上, 文件夹, 文件名不能叫webpack&#x2F;其他已知的模块名&#x3D;&#x3D;</p><ol><li><p>初始化包环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn init</span><br></pre></td></tr></table></figure></li><li><p>安装依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack webpack-cli -D</span><br></pre></td></tr></table></figure></li><li><p>配置scripts(自定义命令)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scripts: &#123;</span><br><span class="line"><span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建目录src</p></li><li><p>新建src&#x2F;add&#x2F;add.js - 定义求和函数导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">addFn</span> = (<span class="params">a, b</span>) =&gt; a + b</span><br></pre></td></tr></table></figure></li><li><p>新建src&#x2F;index.js导入使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;addFn&#125; <span class="keyword">from</span> <span class="string">&#x27;./add/add&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">addFn</span>(<span class="number">10</span>, <span class="number">20</span>));</span><br></pre></td></tr></table></figure></li><li><p>运行打包命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn build</span><br><span class="line"><span class="comment">#或者 npm run build</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>总结: src并列处, 生成默认dist目录和打包后默认main.js文件</p></blockquote><h3 id="2-1-webpack-更新打包"><a href="#2-1-webpack-更新打包" class="headerlink" title="2.1_webpack 更新打包"></a>2.1_webpack 更新打包</h3><blockquote><p>目标: 以后代码变更, 如何重新打包呢</p></blockquote><ol><li><p>新建src&#x2F;tool&#x2F;tool.js - 定义导出数组求和方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getArrSum</span> = arr =&gt; arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, val</span>) =&gt;</span> sum += val, <span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><p>src&#x2F;index.js - 导入使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;addFn&#125; <span class="keyword">from</span> <span class="string">&#x27;./add/add&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;getArrSum&#125; <span class="keyword">from</span> <span class="string">&#x27;./tool/tool&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">addFn</span>(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getArrSum</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]));</span><br></pre></td></tr></table></figure></li><li><p>重新打包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn build</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>总结1: src下开发环境, dist是打包后, 分别独立</p><p>总结2: 打包后格式压缩, 变量压缩等</p></blockquote><h2 id="3-webpack的配置"><a href="#3-webpack的配置" class="headerlink" title="3. webpack的配置"></a>3. webpack的配置</h2><h3 id="3-0-webpack-入口和出口"><a href="#3-0-webpack-入口和出口" class="headerlink" title="3.0_webpack-入口和出口"></a>3.0_webpack-入口和出口</h3><blockquote><p>目标: 告诉webpack从哪开始打包, 打包后输出到哪里</p></blockquote><p>默认入口: .&#x2F;src&#x2F;index.js</p><p>默认出口: .&#x2F;dist&#x2F;main.js</p><p>webpack配置 - webpack.config.js(默认)</p><ol><li>新建src并列处, webpack.config.js</li><li>填入配置项</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>, <span class="comment">// 入口</span></span><br><span class="line">    <span class="attr">output</span>: &#123; </span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;dist&quot;</span>), <span class="comment">// 出口路径</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span> <span class="comment">// 出口文件名</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>修改package.json, 自定义打包命令 - 让webpack使用配置文件</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><ol><li>打包观察效果</li></ol><h3 id="3-1-打包流程图"><a href="#3-1-打包流程图" class="headerlink" title="3.1_打包流程图"></a>3.1_打包流程图</h3><h3 id="3-2-案例-webpack隔行变色"><a href="#3-2-案例-webpack隔行变色" class="headerlink" title="3.2_案例-webpack隔行变色"></a>3.2_案例-webpack隔行变色</h3><blockquote><p>目标: 工程化模块化开发前端项目, webpack会对ES6模块化处理</p></blockquote><ol><li><p>回顾从0准备环境</p><ul><li>初始化包环境</li><li>下载依赖包</li><li>配置自定义打包命令</li></ul></li><li><p>下载jquery, 新建public&#x2F;index.html</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add jquery</span><br></pre></td></tr></table></figure></li><li><p>index.html 准备一些li</p><ul><li>&#x3D;&#x3D;因为import语法浏览器支持性不好, 需要被webpack转换后, 再使用JS代码&#x3D;&#x3D;</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ul&gt;li&#123;我是第$个li&#125;*10 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第1个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第2个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第3个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第4个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第5个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第6个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第7个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第8个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第9个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在src&#x2F;main.js引入jquery</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add jquery</span><br></pre></td></tr></table></figure></li><li><p>src&#x2F;main.js中编写隔行变色代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入jquery</span></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&#x27;jquery&#x27;</span></span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  $(<span class="string">&#x27;#app li:nth-child(odd)&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">  $(<span class="string">&#x27;#app li:nth-child(even)&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;green&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>执行打包命令观察效果</p></li><li><p>可以在dist下把public&#x2F;index.html引入过来</p><p>在index.html中&#x3D;&#x3D;手动&#x3D;&#x3D;引入js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;../dist/bundle.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>总结: 前端工程化模块化, 需要的包yarn下, 被webpack打包后引入到html中使用</p></blockquote><h3 id="3-3-插件-自动生成html文件"><a href="#3-3-插件-自动生成html文件" class="headerlink" title="3.3_插件-自动生成html文件"></a>3.3_插件-自动生成html文件</h3><blockquote><p>目标: html-webpack-plugin插件, 让webpack打包后生成html文件并自动引入打包后的js</p></blockquote><p><a href="https://www.webpackjs.com/plugins/html-webpack-plugin/">html-webpack-plugin插件地址</a></p><ol><li><p>下载插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add html-webpack-plugin  -D</span><br></pre></td></tr></table></figure></li><li><p>webpack.config.js配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入自动生成 html 的插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// ...省略其他代码</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;./public/index.html&#x27;</span> <span class="comment">// 以此为基准生成打包后html文件</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重新打包后观察dist下是否多出html并运行看效果</p><p>&#x3D;&#x3D;打包后的index.html自动引入打包后的js文件&#x3D;&#x3D;</p></li></ol><blockquote><p>总结: webpack就像一个人, webpack.config.js是人物属性, 给它穿什么装备它就干什么活</p></blockquote><h3 id="3-4-加载器-处理css文件问题"><a href="#3-4-加载器-处理css文件问题" class="headerlink" title="3.4_加载器 - 处理css文件问题"></a>3.4_加载器 - 处理css文件问题</h3><blockquote><p>目标: 自己准备css文件, 引入到webpack入口, 测试webpack是否能打包css文件</p></blockquote><p>1.新建 - src&#x2F;css&#x2F;index.css</p><p>2.编写去除li圆点样式代码</p><p>3.(重要) 一定要引入到入口才会被webpack打包</p><p>4.执行打包命令观察效果</p><blockquote><p>总结: 保存原因, 因为webpack默认只能处理js类型文件</p></blockquote><h3 id="3-5-加载器-处理css文件"><a href="#3-5-加载器-处理css文件" class="headerlink" title="3.5_加载器 - 处理css文件"></a>3.5_加载器 - 处理css文件</h3><blockquote><p>目标: loaders加载器, 可让webpack处理其他类型的文件, 打包到js中</p></blockquote><p>原因: webpack默认只认识 js 文件和 json文件</p><p><a href="https://webpack.docschina.org/loaders/style-loader/">style-loader文档</a></p><p><a href="https://webpack.docschina.org/loaders/css-loader/">css-loader文档</a></p><ol><li><p>安装依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add style-loader css-loader -D</span><br></pre></td></tr></table></figure></li><li><p>webpack.config.js 配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// ...其他代码</span></span><br><span class="line">    <span class="attr">module</span>: &#123; </span><br><span class="line">        <span class="attr">rules</span>: [ <span class="comment">// loader的规则</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="comment">// 匹配所有的css文件</span></span><br><span class="line">            <span class="comment">// use数组里从右向左运行</span></span><br><span class="line">            <span class="comment">// 先用 css-loader 让webpack能够识别 css 文件的内容并打包</span></span><br><span class="line">            <span class="comment">// 再用 style-loader 将样式, 把css插入到dom中</span></span><br><span class="line">            <span class="attr">use</span>: [ <span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建src&#x2F;css&#x2F;li.css - 去掉li默认样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>, <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>引入到main.js (因为这里是入口需要产生关系, 才会被webpack找到打包起来)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./css/index.css&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>运行打包后dist&#x2F;index.html观察效果和css引入情况</p></li></ol><blockquote><p>总结: 万物皆模块, 引到入口, 才会被webpack打包, css打包进js中, 然后被嵌入在style标签插入dom上</p></blockquote><h3 id="3-6-加载器-处理less文件"><a href="#3-6-加载器-处理less文件" class="headerlink" title="3.6_加载器 - 处理less文件"></a>3.6_加载器 - 处理less文件</h3><blockquote><p>目标: less-loader让webpack处理less文件, less模块翻译less代码</p></blockquote><p><a href="https://webpack.docschina.org/loaders/less-loader/">less-loader文档</a></p><ol><li><p>下载依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add less less-loader -D</span><br></pre></td></tr></table></figure></li><li><p>webpack.config.js 配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [ <span class="comment">// loader的规则</span></span><br><span class="line">    <span class="comment">// ...省略其他</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">    <span class="comment">// 使用less-loader, 让webpack处理less文件, 内置还会用less翻译less代码成css内容</span></span><br><span class="line">        <span class="attr">use</span>: [ <span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&#x27;less-loader&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>src&#x2F;less&#x2F;index.less  - 设置li字体大小24px</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@size:</span><span class="number">24px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span>, <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">@size</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>引入到main.js中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./less/index.less&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>打包运行dist&#x2F;index.html 观察效果</p></li></ol><blockquote><p>总结: 只要找到对应的loader加载器, 就能让webpack处理不同类型文件</p></blockquote><h3 id="3-7-加载器-处理图片文件"><a href="#3-7-加载器-处理图片文件" class="headerlink" title="3.7_加载器 - 处理图片文件"></a>3.7_加载器 - 处理图片文件</h3><blockquote><p>目标: 用asset module方式(webpack5版本新增)</p></blockquote><p><a href="https://webpack.docschina.org/guides/asset-modules/">asset module文档</a></p><p>如果使用的是webpack5版本的, 直接配置在webpack.config.js - 的 rules里即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif|jpeg)$/i</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;asset&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你用的是webpack4及以前的, 请使用者里的配置</p><p><a href="https://webpack.docschina.org/loaders/url-loader/">url-loader文档</a></p><p><a href="https://webpack.docschina.org/loaders/file-loader/">file-loader文档</a></p><ol><li><p>下载依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add url-loader file-loader -D</span><br></pre></td></tr></table></figure></li><li><p>webpack.config.js 配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif|jpeg)$/i</span>,</span><br><span class="line">  <span class="attr">use</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>, <span class="comment">// 匹配文件, 尝试转base64字符串打包到js中</span></span><br><span class="line">      <span class="comment">// 配置limit, 超过8k, 不转, file-loader复制, 随机名, 输出文件</span></span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">limit</span>: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图片转成 base64 字符串</p><ul><li>好处就是浏览器不用发请求了，直接可以读取</li><li>坏处就是如果图片太大，再转<code>base64</code>就会让图片的体积增大 30% 左右</li></ul></li><li><p>src&#x2F;assets&#x2F;准备老师发的2个图文件</p></li><li><p>在css&#x2F;less&#x2F;index.less - 把小图片用做背景图</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: url(<span class="string">../assets/logo_small.png</span>) no-repeat center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在src&#x2F;main.js - 把大图插入到创建的img标签上, 添加body上显示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入图片-使用</span></span><br><span class="line"><span class="keyword">import</span> imgUrl <span class="keyword">from</span> <span class="string">&#x27;./assets/1.gif&#x27;</span></span><br><span class="line"><span class="keyword">const</span> theImg = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>)</span><br><span class="line">theImg.<span class="property">src</span> = imgUrl</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(theImg)</span><br></pre></td></tr></table></figure></li><li><p>打包运行dist&#x2F;index.html观察2个图片区别</p></li></ol><blockquote><p>总结:  url-loader 把文件转base64 打包进js中, 会有30%的增大, file-loader 把文件直接复制输出</p></blockquote><h3 id="3-8-webpack加载文件优缺点"><a href="#3-8-webpack加载文件优缺点" class="headerlink" title="3.8_webpack加载文件优缺点"></a>3.8_webpack加载文件优缺点</h3><p>图片转成 base64 字符串</p><ul><li>好处就是浏览器不用发请求了，直接可以读取</li><li>坏处就是如果图片太大，再转<code>base64</code>就会让图片的体积增大 30% 左右</li></ul><h3 id="3-9-加载器-处理字体文件"><a href="#3-9-加载器-处理字体文件" class="headerlink" title="3.9_加载器 - 处理字体文件"></a>3.9_加载器 - 处理字体文件</h3><blockquote><p>目标: 用asset module技术, asset&#x2F;resource直接输出到dist目录下</p></blockquote><p>webpack5使用这个配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="comment">// webpack5默认内部不认识这些文件, 所以当做静态资源直接输出即可</span></span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.(eot|svg|ttf|woff|woff2)$/</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;asset/resource&#x27;</span>,</span><br><span class="line">    <span class="attr">generator</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;font/[name].[hash:6][ext]&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>webpack4及以前使用下面的配置</p><ol><li><p>webpack.config.js - 准备配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="comment">// 处理字体图标的解析</span></span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.(eot|svg|ttf|woff|woff2)$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">                <span class="attr">options</span>: &#123;</span><br><span class="line">                    <span class="attr">limit</span>: <span class="number">2</span> * <span class="number">1024</span>,</span><br><span class="line">                    <span class="comment">// 配置输出的文件名</span></span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;[name].[ext]&#x27;</span>,</span><br><span class="line">                    <span class="comment">// 配置输出的文件目录</span></span><br><span class="line">                    <span class="attr">outputPath</span>: <span class="string">&quot;fonts/&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>src&#x2F;assets&#x2F; - 放入字体库fonts文件夹</p></li><li><p>在main.js引入iconfont.css</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入字体图标文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./assets/fonts/iconfont.css&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>在public&#x2F;index.html使用字体图标样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-weixin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>执行打包命令-观察打包后网页效果</p></li></ol><blockquote><p>总结: url-loader和file-loader 可以打包静态资源文件</p></blockquote><h3 id="3-10-加载器-处理高版本js语法"><a href="#3-10-加载器-处理高版本js语法" class="headerlink" title="3.10_加载器 - 处理高版本js语法"></a>3.10_加载器 - 处理高版本js语法</h3><blockquote><p>目标: 让webpack对高版本 的js代码, 降级处理后打包</p></blockquote><p>写代码演示: 高版本的js代码(箭头函数), 打包后, 直接原封不动打入了js文件中, 遇到一些低版本的浏览器就会报错</p><p>原因: <strong>webpack 默认仅内置了 模块化的 兼容性处理</strong>   <code>import  export</code></p><p>babel 的介绍 &#x3D;&gt; 用于处理高版本 js语法 的兼容性  <a href="https://www.babeljs.cn/">babel官网</a></p><p>解决: 让webpack配合babel-loader 对js语法做处理</p><p><a href="https://webpack.docschina.org/loaders/babel-loader/">babel-loader文档</a></p><ol><li><p>安装包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D babel-loader @babel/core @babel/preset-env</span><br></pre></td></tr></table></figure></li><li><p>配置规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">        <span class="attr">use</span>: &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>] <span class="comment">// 预设:转码规则(用bable开发环境本来预设的)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在main.js中使用箭头函数(高版本js)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高级语法</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;你好babel&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn) <span class="comment">// 这里必须打印不能调用/不使用, 不然webpack会精简成一句打印不要函数了/不会编译未使用的代码</span></span><br><span class="line"><span class="comment">// 没有babel集成时, 原样直接打包进lib/bundle.js</span></span><br><span class="line"><span class="comment">// 有babel集成时, 会翻译成普通函数打包进lib/bundle.js</span></span><br></pre></td></tr></table></figure></li><li><p>打包后观察lib&#x2F;bundle.js - 被转成成普通函数使用了 - 这就是babel降级翻译的功能</p></li></ol><blockquote><p>总结: babel-loader 可以让webpack 对高版本js语法做降级处理后打包</p></blockquote><h2 id="4-webpack-开发服务器"><a href="#4-webpack-开发服务器" class="headerlink" title="4. webpack 开发服务器"></a>4. webpack 开发服务器</h2><h3 id="4-0-webpack开发服务器-为何学"><a href="#4-0-webpack开发服务器-为何学" class="headerlink" title="4.0_webpack开发服务器-为何学?"></a>4.0_webpack开发服务器-为何学?</h3><p>文档地址: <a href="https://webpack.docschina.org/configuration/dev-server/">https://webpack.docschina.org/configuration/dev-server/</a></p><p>抛出问题: 每次修改代码, 都需要重新 yarn build 打包, 才能看到最新的效果, 实际工作中, 打包 yarn build 非常费时 (30s - 60s) 之间</p><p>为什么费时? </p><ol><li>构建依赖</li><li>磁盘读取对应的文件到内存, 才能加载  </li><li>用对应的 loader 进行处理  </li><li>将处理完的内容, 输出到磁盘指定目录</li></ol><p>解决问题: 起一个开发服务器,  在电脑内存中打包, 缓存一些已经打包过的内容, 只重新打包修改的文件, 最终运行加载在内存中给浏览器使用</p><h3 id="x3D-x3D-4-1-webpack-dev-server自动刷新-x3D-x3D"><a href="#x3D-x3D-4-1-webpack-dev-server自动刷新-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;4.1_webpack-dev-server自动刷新&#x3D;&#x3D;"></a>&#x3D;&#x3D;4.1_webpack-dev-server自动刷新&#x3D;&#x3D;</h3><blockquote><p>目标: 启动本地服务, 可实时更新修改的代码, 打包<strong>变化代码</strong>到内存中, 然后直接提供端口和网页访问</p></blockquote><ol><li><p>下载包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack-dev-server -D</span><br></pre></td></tr></table></figure></li><li><p>配置自定义命令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scripts</span>: &#123;</span><br><span class="line"><span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span>,</span><br><span class="line"><span class="string">&quot;serve&quot;</span>: <span class="string">&quot;webpack serve&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行命令-启动webpack开发服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn serve</span><br><span class="line"><span class="comment">#或者 npm run serve</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>总结: 以后改了src下的资源代码, 就会直接更新到内存打包, 然后反馈到浏览器上了</p></blockquote><h3 id="4-2-webpack-dev-server配置"><a href="#4-2-webpack-dev-server配置" class="headerlink" title="4.2_webpack-dev-server配置"></a>4.2_webpack-dev-server配置</h3><ol><li><p>在webpack.config.js中添加服务器配置</p><p>更多配置参考这里: <a href="https://webpack.docschina.org/configuration/dev-server/#devserverafter">https://webpack.docschina.org/configuration/dev-server/#devserverafter</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// ...其他配置</span></span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">port</span>: <span class="number">3000</span> <span class="comment">// 端口号</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h2><ul><li><input disabled="" type="checkbox"> 什么是webpack, 它有什么作用</li><li><input disabled="" type="checkbox"> 知道yarn的使用过程, 自定义命令, 下载删除包</li><li><input disabled="" type="checkbox"> 有了webpack让模块化开发前端项目成为了可能, 底层需要node支持</li><li><input disabled="" type="checkbox"> 对webpack各种配置项了解</li><li><input disabled="" type="checkbox"> 入口&#x2F;出口</li><li><input disabled="" type="checkbox"> 插件</li><li><input disabled="" type="checkbox"> 加载器</li><li><input disabled="" type="checkbox"> mode模式</li><li><input disabled="" type="checkbox"> devServer</li><li><input disabled="" type="checkbox"> webpack开发服务器的使用和运作过程</li></ul><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="1、什么是webpack（必会）"><a href="#1、什么是webpack（必会）" class="headerlink" title="1、什么是webpack（必会）"></a>1、什么是webpack（必会）</h3><p>​webpack是一个打包模块化javascript的工具，在webpack里一切文件皆模块，通过loader转换文件，通过plugin注入钩子，最后输出由多个模块组合成的文件，webpack专注构建模块化项目</p><h3 id="2、Webpack的优点是什么？（必会）"><a href="#2、Webpack的优点是什么？（必会）" class="headerlink" title="2、Webpack的优点是什么？（必会）"></a>2、Webpack的优点是什么？（必会）</h3><ol><li>专注于处理模块化的项目，能做到开箱即用，一步到位</li><li>通过plugin扩展，完整好用又不失灵活</li><li>通过loaders扩展, 可以让webpack把所有类型的文件都解析打包</li><li>区庞大活跃，经常引入紧跟时代发展的新特性，能为大多数场景找到已有的开源扩展</li></ol><h3 id="3、webpack的构建流程是什么-从读取配置到输出文件这个过程尽量说全（必会）"><a href="#3、webpack的构建流程是什么-从读取配置到输出文件这个过程尽量说全（必会）" class="headerlink" title="3、webpack的构建流程是什么?从读取配置到输出文件这个过程尽量说全（必会）"></a>3、webpack的构建流程是什么?从读取配置到输出文件这个过程尽量说全（必会）</h3><p>​    Webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：</p><p>​1. 初始化参数：从配置文件读取与合并参数，得出最终的参数</p><ol><li>开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，开始执行编译<ol><li>确定入口：根据配置中的 entry 找出所有的入口文件</li><li>编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理</li><li>完成模块编译：在经过第4步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系</li><li>输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会</li><li>输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。</li></ol></li></ol><p>在以上过程中，Webpack 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果</p><h3 id="4、说一下-Webpack-的热更新原理-必会"><a href="#4、说一下-Webpack-的热更新原理-必会" class="headerlink" title="4、说一下 Webpack 的热更新原理(必会)"></a>4、说一下 Webpack 的热更新原理(必会)</h3><p>​webpack 的热更新又称热替换（Hot Module Replacement），缩写为 HMR。这个机制可以做到不用刷新浏览器而将新变更的模块替换掉旧的模块。</p><p>​    HMR的核心就是客户端从服务端拉去更新后的文件，准确的说是 chunk diff (chunk 需要更新的部分)，实际上 WDS 与浏览器之间维护了一个 Websocket，当本地资源发生变化时，WDS 会向浏览器推送更新，并带上构建时的 hash，让客户端与上一次资源进行对比。客户端对比出差异后会向 WDS 发起 Ajax 请求来获取更改内容(文件列表、hash)，这样客户端就可以再借助这些信息继续向 WDS 发起 jsonp 请求获取该chunk的增量更新。</p><p>​    后续的部分(拿到增量更新之后如何处理？哪些状态该保留？哪些又需要更新？)由 HotModulePlugin 来完成，提供了相关 API 以供开发者针对自身场景进行处理，像react-hot-loader 和 vue-loader 都是借助这些 API 实现 HMR。</p><h3 id="5、webpack与grunt、gulp的不同？（必会）"><a href="#5、webpack与grunt、gulp的不同？（必会）" class="headerlink" title="5、webpack与grunt、gulp的不同？（必会）"></a>5、webpack与grunt、gulp的不同？（必会）</h3><p>​    <strong>1)</strong> <strong>三者之间的区别</strong></p><p>​       三者都是前端构建工具，grunt和gulp在早期比较流行，现在webpack相对来说比较主流，不过一些轻量化的任务还是会用gulp来处理，比如单独打包CSS文件等。</p><p>​       grunt和gulp是基于任务和流（Task、Stream）的。类似jQuery，找到一个（或一类）文件，对其做一系列链式操作，更新流上的数据， 整条链式操作构成了一个任务，多个任务就构成了整个web的构建流程。</p><p>​       webpack是基于入口的。webpack会自动地递归解析入口所需要加载的所有资源文件，然后用不同的Loader来处理不同的文件，用Plugin来扩展webpack功能。</p><p>​    <strong>2)</strong> <strong>从构建思路来说</strong></p><p>​       gulp和grunt需要开发者将整个前端构建过程拆分成多个<code>Task</code>，并合理控制所有<code>Task</code>的调用关系 webpack需要开发者找到入口，并需要清楚对于不同的资源应该使用什么Loader做何种解析和加工</p><p>​    <strong>3)</strong> <strong>对于知识背景来说</strong></p><p>​       gulp更像后端开发者的思路，需要对于整个流程了如指掌 webpack更倾向于前端开发者的思路</p><h3 id="6、有哪些常见的Loader？他们是解决什么问题的？（必会）"><a href="#6、有哪些常见的Loader？他们是解决什么问题的？（必会）" class="headerlink" title="6、有哪些常见的Loader？他们是解决什么问题的？（必会）"></a>6、有哪些常见的Loader？他们是解决什么问题的？（必会）</h3><p>1、  file-loader：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件</p><p>2、  url-loader：和 file-loader 类似，但是能在文件很小的情况下以 base64 的方式把文件内容注入到代码中去</p><p>3、  source-map-loader：加载额外的 Source Map 文件，以方便断点调试</p><p>4、  image-loader：加载并且压缩图片文件</p><p>5、  babel-loader：把 ES6 转换成 ES5</p><p>6、  css-loader：加载 CSS，支持模块化、压缩、文件导入等特性</p><p>7、  style-loader：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS。</p><p>8、  eslint-loader：通过 ESLint 检查 JavaScript 代码</p><h3 id="7、Loader和Plugin的不同？（必会）"><a href="#7、Loader和Plugin的不同？（必会）" class="headerlink" title="7、Loader和Plugin的不同？（必会）"></a>7、Loader和Plugin的不同？（必会）</h3><p>​    <strong>1)</strong> <strong>不同的作用</strong></p><p>​       Loader直译为”加载器”。Webpack将一切文件视为模块，但是webpack原生是只能解析js文件，如果想将其他文件也打包的话，就会用到loader。 所以Loader的作用是让webpack拥有了加载和解析非JavaScript文件的能力。</p><p>​    Plugin直译为”插件”。Plugin可以扩展webpack的功能，让webpack具有更多的灵活性。 在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</p><p><strong>2)</strong> <strong>不同的用法</strong></p><p>​    Loader在module.rules中配置，也就是说他作为模块的解析规则而存在。 类型为数组，每一项都是一个Object，里面描述了对于什么类型的文件（test），使用什么加载(loader)和使用的参数（options）</p><p>​    Plugin在plugins中单独配置。 类型为数组，每一项是一个plugin的实例，参数都通过构造函数传入。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Vue基础&quot;&gt;&lt;a href=&quot;#Vue基础&quot; class=&quot;headerlink&quot; title=&quot;Vue基础&quot;&gt;&lt;/a&gt;Vue基础&lt;/h2&gt;&lt;h3 id=&quot;yarn包管理器&quot;&gt;&lt;a href=&quot;#yarn包管理器&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="资料" scheme="http://example.com/categories/%E8%B5%84%E6%96%99/"/>
    
    
    <category term="Vue基础" scheme="http://example.com/tags/Vue%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>初识(六)</title>
    <link href="http://example.com/2022/11/06/%E5%88%9D%E8%AF%86-%E5%85%AD/"/>
    <id>http://example.com/2022/11/06/%E5%88%9D%E8%AF%86-%E5%85%AD/</id>
    <published>2022-11-06T03:43:48.000Z</published>
    <updated>2022-11-06T03:55:36.174Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-jQuery-选择器"><a href="#1-jQuery-选择器" class="headerlink" title="1.jQuery 选择器"></a>1.jQuery 选择器</h2><h3 id="1-1-jQuery-基础选择器"><a href="#1-1-jQuery-基础选择器" class="headerlink" title="1.1  jQuery 基础选择器"></a>1.1  jQuery 基础选择器</h3><p> [jQuery 1.3参考手册.chm](E:\一点东西\前端资料\05-jQuery\jQuery手册\jQuery 1.3参考手册.chm) </p><p> [jQuery 1.4参考手册.CHM](E:\一点东西\前端资料\05-jQuery\jQuery手册\jQuery 1.4参考手册.CHM) </p><p> [jQuery1.7 中文手册.chm](E:\一点东西\前端资料\05-jQuery\jQuery手册\jQuery1.7 中文手册.chm) </p><p> [jQuery_3.3.1_API_Docs_CN.CHM](E:\一点东西\前端资料\05-jQuery\jQuery 第一天\2-素材\jQuery_3.3.1_API_Docs_CN.CHM) </p><p>原生 JS 获取元素方式很多，很杂，而且兼容性情况不一致，因此 jQuery 给我们做了封装，使获取元素统一标准。</p><p>$(“选择器”)   &#x2F;&#x2F;  里面选择器直接写 CSS 选择器即可，但是要加引号</p><p><img src="C:\Users\25134\AppData\Roaming\Typora\typora-user-images\image-20220620115654797.png" alt="image-20220620115654797"></p><h3 id="1-2-jQuery-层级选择器"><a href="#1-2-jQuery-层级选择器" class="headerlink" title="1.2  jQuery 层级选择器"></a>1.2  jQuery 层级选择器</h3><p><img src="C:\Users\25134\AppData\Roaming\Typora\typora-user-images\image-20220620115857638.png" alt="image-20220620115857638"></p><p>jQuery 设置样式</p><p>$(‘div’).css(‘属性’, ‘值’)</p><h3 id="1-3-隐式迭代（重要）"><a href="#1-3-隐式迭代（重要）" class="headerlink" title="1.3  隐式迭代（重要）"></a>1.3  隐式迭代（重要）</h3><p>遍历内部 DOM 元素（伪数组形式存储）的过程就叫做隐式迭代。</p><p>简单理解：给匹配到的所有元素进行循环遍历，执行相应的方法，而不用我们再进行循环，简化我们的操作，方便我们调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">script&gt;</span><br><span class="line">  <span class="comment">// 1.获取四个div</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;div&#x27;</span>))</span><br><span class="line">  <span class="comment">// 2.给四个div设置背景颜色</span></span><br><span class="line">  $(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>)</span><br><span class="line">  <span class="comment">// 3.隐式迭代就是把匹配的所有元素内部进行遍历循环，给每一个元素添加css</span></span><br><span class="line">  $(<span class="string">&#x27;ul li&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="1-4-jQuery-筛选选择器"><a href="#1-4-jQuery-筛选选择器" class="headerlink" title="1.4  jQuery 筛选选择器"></a>1.4  jQuery 筛选选择器</h3><p><img src="C:\Users\25134\AppData\Roaming\Typora\typora-user-images\image-20220620120015778.png" alt="image-20220620120015778"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="comment">// 第一个li</span></span><br><span class="line">      $(<span class="string">&#x27;ul li:first&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">      <span class="comment">// 第三个li</span></span><br><span class="line">      $(<span class="string">&#x27;ul li:eq(2)&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">      <span class="comment">// 第基数个li</span></span><br><span class="line">      $(<span class="string">&#x27;ul li:odd&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;skyblue&#x27;</span>)</span><br><span class="line">      <span class="comment">// 第偶数个li</span></span><br><span class="line">      $(<span class="string">&#x27;ul li:even&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>)</span><br><span class="line">      <span class="comment">// 第最后一个li</span></span><br><span class="line">      $(<span class="string">&#x27;ul li:last&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="1-5-jQuery-筛选方法（重点）"><a href="#1-5-jQuery-筛选方法（重点）" class="headerlink" title="1.5  jQuery 筛选方法（重点）"></a>1.5  jQuery 筛选方法（重点）</h3><p><img src="C:\Users\25134\AppData\Roaming\Typora\typora-user-images\image-20220620120039255.png" alt="image-20220620120039255"></p><p>重点记住： parent()  children()  find()  siblings()  eq()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>儿子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//1. 父 parent()  返回最近一级的父元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&#x27;son&#x27;</span>).<span class="title function_">parent</span>())</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 2.儿子</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 1.1亲儿子 children()  类似子代选择器  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      $(<span class="string">&#x27;.nav&#x27;</span>).<span class="title function_">children</span>(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 1.2可以选择里面所有的孩子 包括儿子和孙子  find()  类似后代选择器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      $(<span class="string">&#x27;.nav&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;p&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="新浪下拉"><a href="#新浪下拉" class="headerlink" title="新浪下拉"></a>新浪下拉</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 鼠标经过</span></span><br><span class="line">      $(<span class="string">&quot;.nav&gt;li&quot;</span>).<span class="title function_">mouseover</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// $(this) jQuery 当前元素  this不要加引号</span></span><br><span class="line">        <span class="comment">// show() 显示元素  hide() 隐藏元素</span></span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">children</span>(<span class="string">&quot;ul&quot;</span>).<span class="title function_">show</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// 鼠标离开</span></span><br><span class="line">      $(<span class="string">&quot;.nav&gt;li&quot;</span>).<span class="title function_">mouseout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">children</span>(<span class="string">&quot;ul&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="1-6-jQuery-里面的排他思想"><a href="#1-6-jQuery-里面的排他思想" class="headerlink" title="1.6  jQuery 里面的排他思想"></a>1.6  jQuery 里面的排他思想</h3><p>想要多选一的效果，排他思想：当前元素设置样式，其余的兄弟元素清除样式。</p><p>$(this).css(“color”,”red”);</p><p>$(this).siblings(). css(“color”,” ”);</p><p>得到当前元素索引号 $(this).index() </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 1.给所有按钮绑定点击事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      $(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2.当前元素添加背景颜色</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;background&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 3.其他的兄弟去掉背景颜色</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="variable language_">this</span>).<span class="title function_">siblings</span>(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;background&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="1-7链式编程"><a href="#1-7链式编程" class="headerlink" title="1.7链式编程"></a>1.7链式编程</h3><p>链式编程是为了节省代码量，看起来更优雅。</p><p>$(this).css(‘color’, ‘red’).sibling().css(‘color’, ‘’);</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 1. 隐式迭代 给所有的按钮都绑定了点击事件</span></span><br><span class="line">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">// 2. 让当前元素颜色变为红色</span></span><br><span class="line">                <span class="comment">// $(this).css(&quot;color&quot;, &quot;red&quot;);</span></span><br><span class="line">                <span class="comment">// 3. 让其余的姐妹元素不变色 </span></span><br><span class="line">                <span class="comment">// $(this).siblings().css(&quot;color&quot;, &quot;&quot;);</span></span><br><span class="line">                <span class="comment">// 链式编程</span></span><br><span class="line">                $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>).<span class="title function_">siblings</span>().<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="2-jQuery-样式操作"><a href="#2-jQuery-样式操作" class="headerlink" title="2.jQuery 样式操作"></a>2.jQuery 样式操作</h2><h3 id="2-1-操作-css-方法"><a href="#2-1-操作-css-方法" class="headerlink" title="2.1  操作 css 方法"></a>2.1  操作 css 方法</h3><p>1.参数只写属性名，则是返回属性值</p><p>$(this).css(‘’color’’);</p><p>2.参数是属性名，属性值，逗号分隔，是设置一组样式，属性必须加引号，值如果是数字可以不用跟单位和引号</p><p>$(this).css(‘’color’’, ‘’red’’);</p><p>3.参数可以是对象形式，方便设置多组样式。属性名和属性值用冒号隔开， 属性可以不用加引号，</p><p>$(this).css({ “color”:”white”,”font-size”:”20px”});</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       <span class="comment">// 操作样式之css方法</span></span><br><span class="line">       $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;width&quot;</span>));</span><br><span class="line">           <span class="comment">// $(&quot;div&quot;).css(&quot;width&quot;, &quot;300px&quot;);</span></span><br><span class="line">           <span class="comment">// $(&quot;div&quot;).css(&quot;width&quot;, 300);</span></span><br><span class="line">           <span class="comment">// $(&quot;div&quot;).css(height, &quot;300px&quot;); 属性名一定要加引号</span></span><br><span class="line">           $(<span class="string">&quot;div&quot;</span>).<span class="title function_">css</span>(&#123;</span><br><span class="line">               <span class="attr">width</span>: <span class="number">400</span>,</span><br><span class="line">               <span class="attr">height</span>: <span class="number">400</span>,</span><br><span class="line">               <span class="attr">backgroundColor</span>: <span class="string">&quot;red&quot;</span></span><br><span class="line">                   <span class="comment">// 如果是复合属性则必须采取驼峰命名法，如果值不是数字，则需要加引号</span></span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;)</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-2-设置类样式方法"><a href="#2-2-设置类样式方法" class="headerlink" title="2.2  设置类样式方法"></a>2.2  设置类样式方法</h3><p>作用等同于以前的 classList，可以操作类样式， 注意操作类里面的参数不要加点。</p><p>1.添加类</p><p>$(“div”).addClass(‘’current’’);</p><p>2.移除类</p><p>$(“div”).removeClass(‘’current’’);</p><p>3.切换类</p><p>$(“div”).toggleClass(‘’current’’);</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 1. 添加类 addClass()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $(&quot;div&quot;).click(function() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     // $(this).addClass(&quot;current&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 2. 删除类 removeClass()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $(&quot;div&quot;).click(function() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     $(this).removeClass(&quot;current&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 3. 切换类 toggleClass()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;div&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="variable language_">this</span>).<span class="title function_">toggleClass</span>(<span class="string">&quot;current&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>tab栏切换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 1.点击上部的li，当前li 添加current类，其余兄弟移除类</span></span><br><span class="line">            $(<span class="string">&quot;.tab_list li&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">// 链式编程操作</span></span><br><span class="line">                $(<span class="variable language_">this</span>).<span class="title function_">addClass</span>(<span class="string">&quot;current&quot;</span>).<span class="title function_">siblings</span>().<span class="title function_">removeClass</span>(<span class="string">&quot;current&quot;</span>);</span><br><span class="line">                <span class="comment">// 2.点击的同时，得到当前li 的索引号</span></span><br><span class="line">                <span class="keyword">var</span> index = $(<span class="variable language_">this</span>).<span class="title function_">index</span>();</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line">                <span class="comment">// 3.让下部里面相应索引号的item显示，其余的item隐藏</span></span><br><span class="line">                $(<span class="string">&quot;.tab_con .item&quot;</span>).<span class="title function_">eq</span>(index).<span class="title function_">show</span>().<span class="title function_">siblings</span>().<span class="title function_">hide</span>();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-3-类操作与className区别"><a href="#2-3-类操作与className区别" class="headerlink" title="2.3  类操作与className区别"></a>2.3  类操作与className区别</h3><p>原生 JS 中 className 会覆盖元素原先里面的类名。</p><p>jQuery 里面类操作只是对指定类进行操作，不影响原先的类名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// var one = document.querySelector(&quot;.one&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// one.className = &quot;two&quot;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// $(&quot;.one&quot;).addClass(&quot;two&quot;);  这个addClass相当于追加类名 不影响以前的类名</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="string">&quot;.one&quot;</span>).<span class="title function_">removeClass</span>(<span class="string">&quot;two&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="3-jQuery效果"><a href="#3-jQuery效果" class="headerlink" title="3.jQuery效果"></a>3.jQuery效果</h2><h3 id="3-1-显示隐藏效果"><a href="#3-1-显示隐藏效果" class="headerlink" title="3.1  显示隐藏效果"></a>3.1  显示隐藏效果</h3><p>1.显示语法规范</p><p>show([speed,[easing],[fn]])</p><p>2.隐藏语法规范</p><p>hide([speed,[easing],[fn]])</p><p>3.切换语法规范</p><p>toggle([speed,[easing],[fn]])</p><p>显示参数</p><p>（1）参数都可以省略， 无动画直接显示。</p><p>（2）speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)</p><p>（3）easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。</p><p>（4）fn:  回调函数，在动画完成时执行的函数，每个元素执行一次。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>显示<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;div&quot;</span>).<span class="title function_">show</span>(<span class="number">1000</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="title function_">alert</span>(<span class="number">1</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;div&quot;</span>).<span class="title function_">hide</span>(<span class="number">1000</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="title function_">alert</span>(<span class="number">1</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">2</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    $(<span class="string">&quot;div&quot;</span>).<span class="title function_">toggle</span>(<span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 一般情况下，我们都不加参数直接显示隐藏就可以了</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="3-2-滑动效果"><a href="#3-2-滑动效果" class="headerlink" title="3.2 滑动效果"></a>3.2 滑动效果</h3><p>1.下滑效果语法规范</p><p>slideDown([speed,[easing],[fn]])</p><p>2.上滑效果语法规范</p><p>slideUp([speed,[easing],[fn]])</p><p>3.滑动切换效果语法规范</p><p>slideToggle([speed,[easing],[fn]])</p><p>显示参数</p><p>（1）参数都可以省略， 无动画直接显示。</p><p>（2）speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)</p><p>（3）easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。</p><p>（4）fn:  回调函数，在动画完成时执行的函数，每个元素执行一次。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>下拉滑动<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>上拉滑动<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>切换滑动<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 下滑动 slideDown()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;div&quot;</span>).<span class="title function_">slideDown</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 上滑动 slideUp()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;div&quot;</span>).<span class="title function_">slideUp</span>(<span class="number">500</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">2</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 滑动切换 slideToggle()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;div&quot;</span>).<span class="title function_">slideToggle</span>(<span class="number">500</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="3-3-事件切换"><a href="#3-3-事件切换" class="headerlink" title="3.3  事件切换"></a>3.3  事件切换</h3><p>hover([over,]out)</p><p>（1）over:鼠标移到元素上要触发的函数（相当于mouseenter）</p><p>（2）out:鼠标移出元素要触发的函数（相当于mouseleave）</p><p>（3）如果只写一个函数，则鼠标经过和离开都会触发它</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 鼠标经过</span></span><br><span class="line">            <span class="comment">// $(&quot;.nav&gt;li&quot;).mouseover(function() &#123;</span></span><br><span class="line">            <span class="comment">//     // $(this) jQuery 当前元素  this不要加引号</span></span><br><span class="line">            <span class="comment">//     // show() 显示元素  hide() 隐藏元素</span></span><br><span class="line">            <span class="comment">//     $(this).children(&quot;ul&quot;).slideDown(200);</span></span><br><span class="line">            <span class="comment">// &#125;);</span></span><br><span class="line">            <span class="comment">// // 鼠标离开</span></span><br><span class="line">            <span class="comment">// $(&quot;.nav&gt;li&quot;).mouseout(function() &#123;</span></span><br><span class="line">            <span class="comment">//     $(this).children(&quot;ul&quot;).slideUp(200);</span></span><br><span class="line">            <span class="comment">// &#125;);</span></span><br><span class="line">            <span class="comment">// 1. 事件切换 hover 就是鼠标经过和离开的复合写法</span></span><br><span class="line">            <span class="comment">// $(&quot;.nav&gt;li&quot;).hover(function() &#123;</span></span><br><span class="line">            <span class="comment">//     $(this).children(&quot;ul&quot;).slideDown(200);</span></span><br><span class="line">            <span class="comment">// &#125;, function() &#123;</span></span><br><span class="line">            <span class="comment">//     $(this).children(&quot;ul&quot;).slideUp(200);</span></span><br><span class="line">            <span class="comment">// &#125;);</span></span><br><span class="line">            <span class="comment">// 2. 事件切换 hover  如果只写一个函数，那么鼠标经过和鼠标离开都会触发这个函数</span></span><br><span class="line">            $(<span class="string">&quot;.nav&gt;li&quot;</span>).<span class="title function_">hover</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                $(<span class="variable language_">this</span>).<span class="title function_">children</span>(<span class="string">&quot;ul&quot;</span>).<span class="title function_">slideToggle</span>();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="3-4-动画队列及其停止排队方法"><a href="#3-4-动画队列及其停止排队方法" class="headerlink" title="3.4  动画队列及其停止排队方法"></a>3.4  动画队列及其停止排队方法</h3><p>1.动画或效果队列</p><p>动画或者效果一旦触发就会执行，如果多次触发，就造成多个动画或者效果排队执行。</p><p>2.停止排队 stop()</p><p>(1）stop() 方法用于停止动画或效果。</p><p>(2)  注意： stop() 写到动画或者效果的前面， 相当于停止结束上一次的动画。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="comment">// 鼠标经过</span></span><br><span class="line">           <span class="comment">// $(&quot;.nav&gt;li&quot;).mouseover(function() &#123;</span></span><br><span class="line">           <span class="comment">//     // $(this) jQuery 当前元素  this不要加引号</span></span><br><span class="line">           <span class="comment">//     // show() 显示元素  hide() 隐藏元素</span></span><br><span class="line">           <span class="comment">//     $(this).children(&quot;ul&quot;).slideDown(200);</span></span><br><span class="line">           <span class="comment">// &#125;);</span></span><br><span class="line">           <span class="comment">// // 鼠标离开</span></span><br><span class="line">           <span class="comment">// $(&quot;.nav&gt;li&quot;).mouseout(function() &#123;</span></span><br><span class="line">           <span class="comment">//     $(this).children(&quot;ul&quot;).slideUp(200);</span></span><br><span class="line">           <span class="comment">// &#125;);</span></span><br><span class="line">           <span class="comment">// 1. 事件切换 hover 就是鼠标经过和离开的复合写法</span></span><br><span class="line">           <span class="comment">// $(&quot;.nav&gt;li&quot;).hover(function() &#123;</span></span><br><span class="line">           <span class="comment">//     $(this).children(&quot;ul&quot;).slideDown(200);</span></span><br><span class="line">           <span class="comment">// &#125;, function() &#123;</span></span><br><span class="line">           <span class="comment">//     $(this).children(&quot;ul&quot;).slideUp(200);</span></span><br><span class="line">           <span class="comment">// &#125;);</span></span><br><span class="line">           <span class="comment">// 2. 事件切换 hover  如果只写一个函数，那么鼠标经过和鼠标离开都会触发这个函数</span></span><br><span class="line">           $(<span class="string">&quot;.nav&gt;li&quot;</span>).<span class="title function_">hover</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">               <span class="comment">// stop 方法必须写到动画的前面</span></span><br><span class="line">               $(<span class="variable language_">this</span>).<span class="title function_">children</span>(<span class="string">&quot;ul&quot;</span>).<span class="title function_">stop</span>().<span class="title function_">slideToggle</span>();</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;)</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="3-5-淡入淡出效果"><a href="#3-5-淡入淡出效果" class="headerlink" title="3.5  淡入淡出效果"></a>3.5  淡入淡出效果</h3><p>1.淡入效果语法规范</p><p>fadeIn([speed,[easing],[fn]])</p><p>2.淡出效果语法规范</p><p>fadeOut([speed,[easing],[fn]])</p><p>3.淡入淡出切换效果语法规范</p><p>fadeToggle([speed,[easing],[fn]])</p><p>淡入淡出效果参数</p><p>（1）参数都可以省略。</p><p>（2）speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)</p><p>（3）easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。</p><p>（4）fn:  回调函数，在动画完成时执行的函数，每个元素执行一次。</p><p>4.渐进方式调整到指定的不透明度</p><p>fadeTo([[speed],opacity,[easing],[fn]])</p><p>显示参数</p><p>（1）opacity 透明度必须写，取值 0~1 之间。</p><p>（2）speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。必须写</p><p>（3）easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。</p><p>（4）fn:  回调函数，在动画完成时执行的函数，每个元素执行一次。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>淡入效果<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>淡出效果<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>淡入淡出切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>修改透明度<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 淡入 fadeIn()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;div&quot;</span>).<span class="title function_">fadeIn</span>(<span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 淡出 fadeOut()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;div&quot;</span>).<span class="title function_">fadeOut</span>(<span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">2</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 淡入淡出切换 fadeToggle()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;div&quot;</span>).<span class="title function_">fadeToggle</span>(<span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">eq</span>(<span class="number">3</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//  修改透明度 fadeTo() 这个速度和透明度要必须写</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;div&quot;</span>).<span class="title function_">fadeTo</span>(<span class="number">1000</span>, <span class="number">0.5</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="3-6-自定义动画-animate"><a href="#3-6-自定义动画-animate" class="headerlink" title="3.6  自定义动画 animate"></a>3.6  自定义动画 animate</h3><p>1.语法</p><p>animate(params,[speed],[easing],[fn])</p><p>2.参数</p><p>（1）params: 想要更改的样式属性，以对象形式传递，必须写。 属性名可以不用带引号， 如果是复合属性则需要采取驼峰命名法 borderLeft。其余参数都可以省略。</p><p>（2）speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)</p><p>（3）easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。</p><p>（4）fn:  回调函数，在动画完成时执行的函数，每个元素执行一次。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>动起来<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(<span class="string">&quot;div&quot;</span>).<span class="title function_">animate</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">left</span>: <span class="number">500</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">top</span>: <span class="number">300</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">opacity</span>: <span class="number">.4</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">width</span>: <span class="number">500</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;, <span class="number">500</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="4-jQuery-属性操作"><a href="#4-jQuery-属性操作" class="headerlink" title="4.jQuery 属性操作"></a>4.jQuery 属性操作</h2><h3 id="4-1、设置或获取元素固有属性值-prop"><a href="#4-1、设置或获取元素固有属性值-prop" class="headerlink" title="4.1、设置或获取元素固有属性值 prop()"></a>4.1、设置或获取元素固有属性值 prop()</h3><p>所谓元素固有属性就是元素本身自带的属性，比如 <a> 元素里面的 href ，比如 <input> 元素里面的 type。</p><p>1.获取属性语法</p><p>prop(‘’属性’’)</p><p>2.设置属性语法</p><p>prop(‘’属性’’, ‘’属性值’’)</p><h3 id="4-2、设置或获取元素自定义属性值-attr"><a href="#4-2、设置或获取元素自定义属性值-attr" class="headerlink" title="4.2、设置或获取元素自定义属性值 attr()"></a>4.2、设置或获取元素自定义属性值 attr()</h3><p>用户自己给元素添加的属性，我们称为自定义属性。 比如给 div 添加 index &#x3D;“1”。 </p><p>1.获取属性语法</p><p>attr(‘’属性’’)      &#x2F;&#x2F; 类似原生 getAttribute()</p><p>2.设置属性语法</p><p>attr(‘’属性’’, ‘’属性值’’)   &#x2F;&#x2F; 类似原生 setAttribute()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.itcast.cn&quot;</span> <span class="attr">title</span>=<span class="string">&quot;都挺好&quot;</span>&gt;</span>都挺好<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">checked</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-index</span>=<span class="string">&quot;2&quot;</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//1. element.prop(&quot;属性名&quot;) 获取元素固有的属性值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;a&quot;</span>).<span class="title function_">prop</span>(<span class="string">&quot;href&quot;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;a&quot;</span>).<span class="title function_">prop</span>(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;我们都挺好&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;input&quot;</span>).<span class="title function_">change</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="variable language_">this</span>).<span class="title function_">prop</span>(<span class="string">&quot;checked&quot;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// console.log($(&quot;div&quot;).prop(&quot;index&quot;));</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 2. 元素的自定义属性 我们通过 attr()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;index&quot;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;div&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;index&quot;</span>, <span class="number">4</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;data-index&quot;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 3. 数据缓存 data() 这个里面的数据是存放在元素的内存里面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;span&quot;</span>).<span class="title function_">data</span>(<span class="string">&quot;uname&quot;</span>, <span class="string">&quot;andy&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;span&quot;</span>).<span class="title function_">data</span>(<span class="string">&quot;uname&quot;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 这个方法获取data-index h5自定义属性 第一个 不用写data-  而且返回的是数字型</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">data</span>(<span class="string">&quot;index&quot;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="4-3-数据缓存-data"><a href="#4-3-数据缓存-data" class="headerlink" title="4.3  数据缓存 data()"></a>4.3  数据缓存 data()</h3><p>data() 方法可以在指定的元素上存取数据，并不会修改 DOM 元素结构。一旦页面刷新，之前存放的数据都将被移除。 </p><p>1.附加数据语法 </p><p>data(‘’name’’,’’value’’)   &#x2F;&#x2F; 向被选元素附加数据   </p><p>2.获取数据语法</p><p>date(‘’name’’)             &#x2F;&#x2F;   向被选元素获取数据   </p><p>同时，还可以读取 HTML5 自定义属性  data-index ，得到的是数字型</p><h2 id="5-jQuery-内容文本值"><a href="#5-jQuery-内容文本值" class="headerlink" title="5.jQuery 内容文本值"></a>5.jQuery 内容文本值</h2><p>主要针对元素的内容还有表单的值操作。</p><p>1.普通元素内容 html()（ 相当于原生inner HTML)</p><p>​html()             &#x2F;&#x2F; 获取元素的内容</p><p>​html(‘’内容’’)   &#x2F;&#x2F; 设置元素的内容</p><p>2.普通元素文本内容 text()   (相当与原生 innerText)</p><p>​text()                     &#x2F;&#x2F; 获取元素的文本内容</p><p>3.表单的值 val()（ 相当于原生value)</p><p>​val()              &#x2F;&#x2F; 获取表单的值</p><p>​val(‘’内容’’)   &#x2F;&#x2F; 设置表单的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;请输入内容&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 获取设置元素内容 html()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">html</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// $(&quot;div&quot;).html(&quot;123&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. 获取设置元素文本内容 text()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">text</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="string">&quot;div&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;123&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 3. 获取设置表单值 val()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;input&quot;</span>).<span class="title function_">val</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="string">&quot;input&quot;</span>).<span class="title function_">val</span>(<span class="string">&quot;123&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="6-jQuery-元素操作"><a href="#6-jQuery-元素操作" class="headerlink" title="6.jQuery 元素操作"></a>6.jQuery 元素操作</h2><p>主要是遍历、创建、添加、删除元素操作。</p><h3 id="6-1-遍历元素"><a href="#6-1-遍历元素" class="headerlink" title="6.1.遍历元素"></a>6.1.遍历元素</h3><p>jQuery 隐式迭代是对同一类元素做了同样的操作。 如果想要给同一类元素做不同操作，就需要用到遍历。</p><p>​语法1、语法：$(“div”).each(function (index, domEle) { xxx; }）       </p><p>​1.each() 方法遍历匹配的每一个元素。主要用DOM处理。 each 每一个</p><p>​2.里面的回调函数有2个参数：  index 是每个元素的索引号;  demEle 是每个DOM元素对象，不是jquery对象</p><p>​3.所以要想使用jquery方法，需要给这个dom元素转换为jquery对象  $(domEle)</p><p>​语法2、$.each(object，function (index, element) { xxx; }）       </p><p>​1.$.each()方法可用于遍历任何对象。主要用于数据处理，比如数组，对象</p><p>​2.里面的函数有2个参数：  index 是每个元素的索引号;  element  遍历内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $(&quot;div&quot;).css(&quot;color&quot;, &quot;red&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 如果针对于同一类元素做不同操作，需要用到遍历元素（类似for，但是比for强大）</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> sum = <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 1. each() 方法遍历元素 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> arr = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;div&quot;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params">i, domEle</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 回调函数第一个参数一定是索引号  可以自己指定索引号号名称</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// console.log(index);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// console.log(i);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 回调函数第二个参数一定是 dom元素对象 也是自己命名</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// console.log(domEle);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// domEle.css(&quot;color&quot;); dom对象没有css方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                $(domEle).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>, arr[i]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                sum += <span class="built_in">parseInt</span>($(domEle).<span class="title function_">text</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 2. $.each() 方法遍历元素 主要用于遍历数据，处理数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $.each($(&quot;div&quot;), function(i, ele) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     console.log(i);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     console.log(ele);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $.each(arr, function(i, ele) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     console.log(i);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//     console.log(ele);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $.<span class="title function_">each</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">name</span>: <span class="string">&quot;andy&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">age</span>: <span class="number">18</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;, <span class="keyword">function</span>(<span class="params">i, ele</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 输出的是 name age 属性名</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(ele); <span class="comment">// 输出的是 andy  18 属性值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="6-2-创建元素"><a href="#6-2-创建元素" class="headerlink" title="6.2 创建元素"></a>6.2 创建元素</h3><p>语法：$(‘’<li></li>‘’);     动态的创建一个li</p><h3 id="6-3-添加元素"><a href="#6-3-添加元素" class="headerlink" title="6.3 添加元素"></a>6.3 添加元素</h3><p>1.内部添加</p><p>element.append(‘’内容’’)  把内容放入匹配元素内部最后面，类似原生 appendChild。</p><p>element.prepend(‘’内容’’)     把内容放入匹配元素内部最前面。</p><p>2.外部添加</p><p>element.after(‘’内容’’)        &#x2F;&#x2F;  把内容放入目标元素后面</p><p>element.before(‘’内容’’)    &#x2F;&#x2F;  把内容放入目标元素前面 </p><p>内部添加元素，生成之后，它们是父子关系。外部添加元素，生成之后，他们是兄弟关系。</p><h3 id="6-4-删除元素"><a href="#6-4-删除元素" class="headerlink" title="6.4 删除元素"></a>6.4 删除元素</h3><p>​1、element.remove()   &#x2F;&#x2F;  删除匹配的元素（本身）</p><p>​2、element.empty()    &#x2F;&#x2F;  删除匹配的元素集合中所有的子节点</p><p>​3、element.html(‘’ ‘’)   &#x2F;&#x2F;  清空匹配的元素内容</p><p>1.remove 删除元素本身。</p><p>2.empt() 和  html(‘’’’) 作用等价，都可以删除元素里面的内容，只不过 html 还可以设置内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>原先的li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span>我是原先的div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 1. 创建元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> li = $(<span class="string">&quot;&lt;li&gt;我是后来创建的li&lt;/li&gt;&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 2. 添加元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// (1) 内部添加</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $(&quot;ul&quot;).append(li);  内部添加并且放到内容的最后面 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;ul&quot;</span>).<span class="title function_">prepend</span>(li); <span class="comment">// 内部添加并且放到内容的最前面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// (2) 外部添加</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> div = $(<span class="string">&quot;&lt;div&gt;我是后妈生的&lt;/div&gt;&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $(&quot;.test&quot;).after(div);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;.test&quot;</span>).<span class="title function_">before</span>(div);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 3. 删除元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $(&quot;ul&quot;).remove(); 可以删除匹配的元素 自杀</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// $(&quot;ul&quot;).empty(); // 可以删除匹配的元素里面的子节点 孩子</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $(<span class="string">&quot;ul&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// 可以删除匹配的元素里面的子节点 孩子</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="7-jQuery-尺寸、位置操作"><a href="#7-jQuery-尺寸、位置操作" class="headerlink" title="7.jQuery 尺寸、位置操作"></a>7.jQuery 尺寸、位置操作</h2><h3 id="7-1-jQuery-尺寸"><a href="#7-1-jQuery-尺寸" class="headerlink" title="7.1  jQuery 尺寸"></a>7.1  jQuery 尺寸</h3><p><img src="C:\Users\25134\AppData\Roaming\Typora\typora-user-images\image-20220620155204606.png" alt="image-20220620155204606"></p><p>以上参数为空，则是获取相应值，返回的是数字型。</p><p>如果参数为数字，则是修改相应值。</p><p>参数可以不必写单位。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1. width() / height() 获取设置元素 width和height大小 </span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">width</span>());</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// $(&quot;div&quot;).width(300);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 2. innerWidth() / innerHeight()  获取设置元素 width和height + padding 大小 </span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">innerWidth</span>());</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 3. outerWidth()  / outerHeight()  获取设置元素 width和height + padding + border 大小 </span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">outerWidth</span>());</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 4. outerWidth(true) / outerHeight(true) 获取设置 width和height + padding + border + margin</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">outerWidth</span>(<span class="literal">true</span>));</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-2-jQuery-位置"><a href="#7-2-jQuery-位置" class="headerlink" title="7.2  jQuery 位置"></a>7.2  jQuery 位置</h3><p>位置主要有三个： offset()、position()、scrollTop()&#x2F;scrollLeft()</p><p>1.offset() 设置或获取元素偏移</p><p>​1.1offset() 方法设置或返回被选元素相对于文档的偏移坐标，跟父级没有关系。该方法有2个属性 left、top。</p><p>​1.2offset().top  用于获取距离文档顶部的距离，offset().left 用于获取距离文档左侧的距离。</p><p>​1.3可以设置元素的偏移：offset({ top: 10, left: 30 });</p><p>2.position() 获取元素偏移</p><p>​2.1position() 方法用于返回被选元素相对于带有定位的父级偏移坐标，如果父级都没有定位，则以文档为准。</p><p>​2.2该方法有2个属性 left、top。position().top 用于获取距离定位父级顶部的距离，position().left 用于获取距离定位父级左侧的距离。</p><p>​2.3该方法只能获取。</p><ol><li><p>scrollTop()&#x2F;scrollLeft() 设置或获取元素被卷去的头部和左侧</p><p>​3.1scrollTop() 方法设置或返回被选元素被卷去的头部。</p><p>​3.2不跟参数是获取，参数为不带单位的数字则是设置被卷去的头部。</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1. 获取设置距离文档的位置（偏移） offset</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;.son&quot;</span>).<span class="title function_">offset</span>());</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;.son&quot;</span>).<span class="title function_">offset</span>().<span class="property">top</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// $(&quot;.son&quot;).offset(&#123;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     top: 200,</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     left: 200</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 2. 获取距离带有定位父级位置（偏移） position   如果没有带有定位的父级，则以文档为准</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 这个方法只能获取不能设置偏移</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;.son&quot;</span>).<span class="title function_">position</span>());</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// $(&quot;.son&quot;).position(&#123;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     top: 200,</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     left: 200</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;back&quot;</span>&gt;</span>返回顶部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="variable language_">document</span>).<span class="title function_">scrollTop</span>(<span class="number">100</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 被卷去的头部 scrollTop()  / 被卷去的左侧 scrollLeft()</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 页面滚动事件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> boxTop = $(<span class="string">&quot;.container&quot;</span>).<span class="title function_">offset</span>().<span class="property">top</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;.container&quot;</span>).<span class="title function_">offset</span>());</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            $(<span class="variable language_">window</span>).<span class="title function_">scroll</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(11);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="variable language_">document</span>).<span class="title function_">scrollTop</span>());</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> ($(<span class="variable language_">document</span>).<span class="title function_">scrollTop</span>() &gt;= boxTop) &#123;</span></span><br><span class="line"><span class="language-javascript">                    $(<span class="string">&quot;.back&quot;</span>).<span class="title function_">fadeIn</span>();</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    $(<span class="string">&quot;.back&quot;</span>).<span class="title function_">fadeOut</span>();</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 返回顶部</span></span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;.back&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// $(document).scrollTop(0);</span></span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&quot;body, html&quot;</span>).<span class="title function_">stop</span>().<span class="title function_">animate</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">scrollTop</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// $(document).stop().animate(&#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     scrollTop: 0</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// &#125;); 不能是文档而是 html和body元素做动画</span></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-jQuery-事件注册"><a href="#8-jQuery-事件注册" class="headerlink" title="8.jQuery 事件注册"></a>8.jQuery 事件注册</h2><p>​语法：element.事件(function(){})       </p><p>​$(“div”).click(function(){  事件处理程序 })       </p><p>其他事件和原生基本一致。比如mouseover、mouseout、blur、focus、change、keydown、keyup、resize、scroll 等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="comment">//  单个事件注册</span></span><br><span class="line">            $(<span class="string">&quot;div&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;purple&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            $(<span class="string">&quot;div&quot;</span>).<span class="title function_">mouseenter</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;skyblue&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure><h2 id="9-jQuery-事件处理"><a href="#9-jQuery-事件处理" class="headerlink" title="9.jQuery 事件处理"></a>9.jQuery 事件处理</h2><h3 id="9-1事件处理-on-绑定事件"><a href="#9-1事件处理-on-绑定事件" class="headerlink" title="9.1事件处理 on() 绑定事件"></a>9.1事件处理 on() 绑定事件</h3><p>on() 方法在匹配元素上绑定一个或多个事件的事件处理函数</p><p>​语法：element.on(events,[selector],fn)       </p><ol><li>events:一个或多个用空格分隔的事件类型，如”click”或”keydown” 。</li><li>selector: 元素的子元素选择器 。</li><li>fn:回调函数 即绑定在元素身上的侦听函数。</li></ol><p>on() 方法优势1：可以绑定多个事件，多个处理事件处理程序。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> $(“div”).<span class="title function_">on</span>(&#123;</span><br><span class="line">  <span class="attr">mouseover</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;, </span><br><span class="line">  <span class="attr">mouseout</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">  <span class="attr">click</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;);       </span><br></pre></td></tr></table></figure><p> 如果事件处理相同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(“div”).<span class="title function_">on</span>(“mouseover mouseout”, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">toggleClass</span>(“current”);</span><br><span class="line"> &#125;);       </span><br></pre></td></tr></table></figure><p>on() 方法优势2：可以事件委派操作 。事件委派的定义就是，把原来加给子元素身上的事件绑定在父元素身上，就是把事件委派给父元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;ul&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;li&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;hello world!&#x27;</span>);</span><br><span class="line">&#125;);       </span><br></pre></td></tr></table></figure><p>在此之前有bind(), live() delegate()等方法来处理事件绑定或者事件委派，最新版本的请用on替代他们。</p><p>on() 方法优势3：动态创建的元素，click() 没有办法绑定事件， on() 可以给动态生成的元素绑定事件 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(“div<span class="string">&quot;).on(&quot;</span>click<span class="string">&quot;,”p”, function()&#123;</span></span><br><span class="line"><span class="string">    alert(&quot;</span>俺可以给动态生成的元素绑定事件<span class="string">&quot;)</span></span><br><span class="line"><span class="string">&#125;);       </span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">append</span>($(<span class="string">&quot;&lt;p&gt;我是动态创建的p&lt;/p&gt;&quot;</span>));</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 事件处理on</span></span><br><span class="line">            <span class="comment">// (1) on可以绑定1个或者多个事件处理程序</span></span><br><span class="line">            <span class="comment">// $(&quot;div&quot;).on(&#123;</span></span><br><span class="line">            <span class="comment">//     mouseenter: function() &#123;</span></span><br><span class="line">            <span class="comment">//         $(this).css(&quot;background&quot;, &quot;skyblue&quot;);</span></span><br><span class="line">            <span class="comment">//     &#125;,</span></span><br><span class="line">            <span class="comment">//     click: function() &#123;</span></span><br><span class="line">            <span class="comment">//         $(this).css(&quot;background&quot;, &quot;purple&quot;);</span></span><br><span class="line">            <span class="comment">//     &#125;,</span></span><br><span class="line">            <span class="comment">//     mouseleave: function() &#123;</span></span><br><span class="line">            <span class="comment">//         $(this).css(&quot;background&quot;, &quot;blue&quot;);</span></span><br><span class="line">            <span class="comment">//     &#125;</span></span><br><span class="line">            <span class="comment">// &#125;);</span></span><br><span class="line">            $(<span class="string">&quot;div&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;mouseenter mouseleave&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                $(<span class="variable language_">this</span>).<span class="title function_">toggleClass</span>(<span class="string">&quot;current&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// (2) on可以实现事件委托（委派）</span></span><br><span class="line">            <span class="comment">// $(&quot;ul li&quot;).click();</span></span><br><span class="line">            $(<span class="string">&quot;ul&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;li&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="number">11</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// click 是绑定在ul 身上的，但是 触发的对象是 ul 里面的小li</span></span><br><span class="line">            <span class="comment">// (3) on可以给未来动态创建的元素绑定事件</span></span><br><span class="line">            <span class="comment">// $(&quot;ol li&quot;).click(function() &#123;</span></span><br><span class="line">            <span class="comment">//     alert(11);</span></span><br><span class="line">            <span class="comment">// &#125;)</span></span><br><span class="line">            $(<span class="string">&quot;ol&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;li&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="number">11</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">var</span> li = $(<span class="string">&quot;&lt;li&gt;我是后来创建的&lt;/li&gt;&quot;</span>);</span><br><span class="line">            $(<span class="string">&quot;ol&quot;</span>).<span class="title function_">append</span>(li);</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//微博发布</span></span><br><span class="line">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 1.点击发布按钮， 动态创建一个小li，放入文本框的内容和删除按钮， 并且添加到ul 中</span></span><br><span class="line">            $(<span class="string">&quot;.btn&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> li = $(<span class="string">&quot;&lt;li&gt;&lt;/li&gt;&quot;</span>);</span><br><span class="line">                li.<span class="title function_">html</span>($(<span class="string">&quot;.txt&quot;</span>).<span class="title function_">val</span>() + <span class="string">&quot;&lt;a href=&#x27;javascript:;&#x27;&gt; 删除&lt;/a&gt;&quot;</span>);</span><br><span class="line">                $(<span class="string">&quot;ul&quot;</span>).<span class="title function_">prepend</span>(li);</span><br><span class="line">                li.<span class="title function_">slideDown</span>();</span><br><span class="line">                $(<span class="string">&quot;.txt&quot;</span>).<span class="title function_">val</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2.点击的删除按钮，可以删除当前的微博留言li</span></span><br><span class="line">            <span class="comment">// $(&quot;ul a&quot;).click(function() &#123;  // 此时的click不能给动态创建的a添加事件</span></span><br><span class="line">            <span class="comment">//     alert(11);</span></span><br><span class="line">            <span class="comment">// &#125;)</span></span><br><span class="line">            <span class="comment">// on可以给动态创建的元素绑定事件</span></span><br><span class="line">            $(<span class="string">&quot;ul&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                $(<span class="variable language_">this</span>).<span class="title function_">parent</span>().<span class="title function_">slideUp</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                    $(<span class="variable language_">this</span>).<span class="title function_">remove</span>();</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="9-2事件处理-off-解绑事件"><a href="#9-2事件处理-off-解绑事件" class="headerlink" title="9.2事件处理 off() 解绑事件"></a>9.2事件处理 off() 解绑事件</h3><p>off() 方法可以移除通过 on() 方法添加的事件处理程序。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">off</span>() <span class="comment">// 解绑p元素所有事件处理程序</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">off</span>( <span class="string">&quot;click&quot;</span>)  <span class="comment">// 解绑p元素上面的点击事件 后面的 foo 是侦听函数名</span></span><br><span class="line">$(<span class="string">&quot;ul&quot;</span>).<span class="title function_">off</span>(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;li&quot;</span>);   <span class="comment">// 解绑事件委托</span></span><br></pre></td></tr></table></figure><p>如果有的事件只想触发一次， 可以使用 one() 来绑定事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            $(<span class="string">&quot;div&quot;</span>).<span class="title function_">on</span>(&#123;</span><br><span class="line">                <span class="attr">click</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我点击了&quot;</span>);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">mouseover</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我鼠标经过了&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            $(<span class="string">&quot;ul&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;li&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="number">11</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 1. 事件解绑 off </span></span><br><span class="line">            <span class="comment">// $(&quot;div&quot;).off();  // 这个是解除了div身上的所有事件</span></span><br><span class="line">            $(<span class="string">&quot;div&quot;</span>).<span class="title function_">off</span>(<span class="string">&quot;click&quot;</span>); <span class="comment">// 这个是解除了div身上的点击事件</span></span><br><span class="line">            $(<span class="string">&quot;ul&quot;</span>).<span class="title function_">off</span>(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;li&quot;</span>);</span><br><span class="line">            <span class="comment">// 2. one() 但是它只能触发事件一次</span></span><br><span class="line">            $(<span class="string">&quot;p&quot;</span>).<span class="title function_">one</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="number">11</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="9-3自动触发事件-trigger"><a href="#9-3自动触发事件-trigger" class="headerlink" title="9.3自动触发事件 trigger()"></a>9.3自动触发事件 trigger()</h3><p>有些事件希望自动触发, 比如轮播图自动播放功能跟点击右侧按钮一致。可以利用定时器自动触发右侧按钮点击事件，不必鼠标点击触发。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">click</span>()  <span class="comment">// 第一种简写形式</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">trigger</span>(<span class="string">&quot;type&quot;</span>) <span class="comment">// 第二种自动触发模式</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;hi~&quot;</span>);</span><br><span class="line">&#125;); </span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">trigger</span>(<span class="string">&quot;click&quot;</span>); <span class="comment">// 此时自动触发点击事件，不需要鼠标点击</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">triggerHandler</span>(type)  <span class="comment">// 第三种自动触发模式</span></span><br></pre></td></tr></table></figure><p>triggerHandler模式不会触发元素的默认行为，这是和前面两种的区别。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            $(<span class="string">&quot;div&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="number">11</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 自动触发事件</span></span><br><span class="line">            <span class="comment">// 1. 元素.事件()</span></span><br><span class="line">            <span class="comment">// $(&quot;div&quot;).click();会触发元素的默认行为</span></span><br><span class="line">            <span class="comment">// 2. 元素.trigger(&quot;事件&quot;)</span></span><br><span class="line">            <span class="comment">// $(&quot;div&quot;).trigger(&quot;click&quot;);会触发元素的默认行为</span></span><br><span class="line">            $(<span class="string">&quot;input&quot;</span>).<span class="title function_">trigger</span>(<span class="string">&quot;focus&quot;</span>);</span><br><span class="line">            <span class="comment">// 3. 元素.triggerHandler(&quot;事件&quot;) 就是不会触发元素的默认行为</span></span><br><span class="line">            $(<span class="string">&quot;div&quot;</span>).<span class="title function_">triggerHandler</span>(<span class="string">&quot;click&quot;</span>);</span><br><span class="line">            $(<span class="string">&quot;input&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;focus&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                $(<span class="variable language_">this</span>).<span class="title function_">val</span>(<span class="string">&quot;你好吗&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// $(&quot;input&quot;).triggerHandler(&quot;focus&quot;);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="10-jQuery-事件对象"><a href="#10-jQuery-事件对象" class="headerlink" title="10.jQuery 事件对象"></a>10.jQuery 事件对象</h2><p>事件被触发，就会有事件对象的产生。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">on</span>(events,[selector],<span class="keyword">function</span>(<span class="params">event</span>) &#123;&#125;)       </span><br></pre></td></tr></table></figure><p>阻止默认行为：event.preventDefault()   或者 return  false 阻止冒泡： event.stopPropagation()      </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            $(<span class="variable language_">document</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;点击了document&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;div&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;点击了div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                event.<span class="title function_">stopPropagation</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="11-多对象拷贝"><a href="#11-多对象拷贝" class="headerlink" title="11.多对象拷贝"></a>11.多对象拷贝</h2><p>如果想要把某个对象拷贝（合并） 给另外一个对象使用，此时可以使用 $.extend() 方法</p><p>​语法：$.extend([deep], target, object1, [objectN])    </p><ol><li>deep: 如果设为true 为深拷贝， 默认为false  浅拷贝 </li><li>target: 要拷贝的目标对象</li><li>object1:待拷贝到第一个对象的对象。</li><li>objectN:待拷贝到第N个对象的对象。</li><li>浅拷贝是把被拷贝的对象复杂数据类型中的地址拷贝给目标对象，修改目标对象会影响被拷贝对象。</li><li>深拷贝，前面加true， 完全克隆(拷贝的对象,而不是地址)，修改目标对象不会影响被拷贝对象。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// var targetObj = &#123;&#125;;</span></span><br><span class="line">            <span class="comment">// var obj = &#123;</span></span><br><span class="line">            <span class="comment">//     id: 1,</span></span><br><span class="line">            <span class="comment">//     name: &quot;andy&quot;</span></span><br><span class="line">            <span class="comment">// &#125;;</span></span><br><span class="line">            <span class="comment">// // $.extend(target, obj);</span></span><br><span class="line">            <span class="comment">// $.extend(targetObj, obj);</span></span><br><span class="line">            <span class="comment">// console.log(targetObj);</span></span><br><span class="line">            <span class="comment">// var targetObj = &#123;</span></span><br><span class="line">            <span class="comment">//     id: 0</span></span><br><span class="line">            <span class="comment">// &#125;;</span></span><br><span class="line">            <span class="comment">// var obj = &#123;</span></span><br><span class="line">            <span class="comment">//     id: 1,</span></span><br><span class="line">            <span class="comment">//     name: &quot;andy&quot;</span></span><br><span class="line">            <span class="comment">// &#125;;</span></span><br><span class="line">            <span class="comment">// // $.extend(target, obj);</span></span><br><span class="line">            <span class="comment">// $.extend(targetObj, obj);</span></span><br><span class="line">            <span class="comment">// console.log(targetObj); // 会覆盖targetObj 里面原来的数据</span></span><br><span class="line">            <span class="keyword">var</span> targetObj = &#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">msg</span>: &#123;</span><br><span class="line">                    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">var</span> obj = &#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&quot;andy&quot;</span>,</span><br><span class="line">                <span class="attr">msg</span>: &#123;</span><br><span class="line">                    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// // $.extend(target, obj);</span></span><br><span class="line">            <span class="comment">// $.extend(targetObj, obj);</span></span><br><span class="line">            <span class="comment">// console.log(targetObj); // 会覆盖targetObj 里面原来的数据</span></span><br><span class="line">            <span class="comment">// // 1. 浅拷贝把原来对象里面的复杂数据类型地址拷贝给目标对象</span></span><br><span class="line">            <span class="comment">// targetObj.msg.age = 20;</span></span><br><span class="line">            <span class="comment">// console.log(targetObj);</span></span><br><span class="line">            <span class="comment">// console.log(obj);</span></span><br><span class="line">            <span class="comment">// 2. 深拷贝把里面的数据完全复制一份给目标对象 如果里面有不冲突的属性,会合并到一起 </span></span><br><span class="line">            $.<span class="title function_">extend</span>(<span class="literal">true</span>, targetObj, obj);</span><br><span class="line">            <span class="comment">// console.log(targetObj); // 会覆盖targetObj 里面原来的数据</span></span><br><span class="line">            targetObj.<span class="property">msg</span>.<span class="property">age</span> = <span class="number">20</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(targetObj); <span class="comment">// msg :&#123;sex: &quot;男&quot;, age: 20&#125;</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="12-多库共存"><a href="#12-多库共存" class="headerlink" title="12.多库共存"></a>12.多库共存</h2><p>jQuery使用$作为标示符，随着jQuery的流行,其他 js 库也会用这$作为标识符， 这样一起使用会引起冲突。</p><p>需要一个解决方案，让jQuery 和其他的js库不存在冲突，可以同时存在，这就叫做多库共存。</p><p>jQuery 解决方案：</p><p>1.把里面的 $ 符号 统一改为 jQuery。 比如 jQuery(‘’div’’)</p><p>2.jQuery 变量规定新的名称：$.noConflict()        var xx &#x3D; $.noConflict();</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        $(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">$</span>(<span class="params">ele</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(ele);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>));</span><br><span class="line">            <span class="comment">// 1. 如果$ 符号冲突 我们就使用 jQuery</span></span><br><span class="line">            jQuery.<span class="title function_">each</span>();</span><br><span class="line">            <span class="comment">// 2. 让jquery 释放对$ 控制权 让用自己决定</span></span><br><span class="line">            <span class="keyword">var</span> suibian = jQuery.<span class="title function_">noConflict</span>();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">suibian</span>(<span class="string">&quot;span&quot;</span>));</span><br><span class="line">            suibian.<span class="title function_">each</span>();</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="13-jQuery-插件"><a href="#13-jQuery-插件" class="headerlink" title="13.jQuery 插件"></a>13.jQuery 插件</h2><p>jQuery 功能比较有限，想要更复杂的特效效果，可以借助于 jQuery 插件完成。 注意: 这些插件也是依赖于jQuery来完成的，所以必须要先引入jQuery文件，因此也称为 jQuery 插件。</p><p>jQuery 插件常用的网站：</p><ol><li>jQuery 插件库  <a href="http://www.jq22.com/">http://www.jq22.com/</a>     </li><li><ol><li>jQuery 之家   <a href="http://www.htmleaf.com/">http://www.htmleaf.com/</a></li></ol></li></ol><p>jQuery 插件使用步骤：</p><ol><li>引入相关文件。（jQuery 文件 和 插件文件）    </li><li>复制相关html、css、js (调用插件)。</li></ol><p>jQuery 插件演示：</p><p>1.瀑布流</p><p>2.图片懒加载（图片使用延迟加载在可提高网页下载速度。它也能帮助减轻服务器负载）  当我们页面滑动到可视区域，再显示图片。 </p><p> 我们使用jquery 插件库  EasyLazyload。 注意，此时的js引入文件和js调用必须写到 DOM元素（图片）最后面</p><p>3.全屏滚动（fullpage.js）     </p><p>​ gitHub： <a href="https://github.com/alvarotrigo/fullPage.js">https://github.com/alvarotrigo/fullPage.js</a>      </p><p>​中文翻译网站： <a href="http://www.dowebok.com/demo/2014/77/">http://www.dowebok.com/demo/2014/77/</a></p><p>本地存储的数据格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> todolist = [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">title</span>: <span class="string">&#x27;我今天吃八个馒头&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">done</span>: <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">title</span>: <span class="string">&#x27;我今天学习jq&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">done</span>: <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, ];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// localStorage.setItem(&quot;todo&quot;, todolist);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 本地存储里面只能存储字符串的数据格式 把我们的数组对象转换为字符串格式 JSON.stringify()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;todo&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(todolist));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> data = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;todo&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// console.log(typeof data);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// console.log(data[0].title);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. 获取本地存储的数据 我们需要把里面的字符串数据转换为 对象格式 JSON.parse()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data[<span class="number">0</span>].<span class="property">title</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="案例tudolist"><a href="#案例tudolist" class="headerlink" title="案例tudolist"></a>案例tudolist</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// alert(11);</span></span><br><span class="line">    <span class="comment">// 1. 按下回车 把完整数据 存储到本地存储里面</span></span><br><span class="line">    <span class="comment">// 存储的数据格式  var todolist = [&#123;title: &quot;xxx&quot;, done: false&#125;]</span></span><br><span class="line">    <span class="title function_">load</span>();</span><br><span class="line">    $(<span class="string">&quot;#title&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;keydown&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (event.<span class="property">keyCode</span> === <span class="number">13</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($(<span class="variable language_">this</span>).<span class="title function_">val</span>() === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;请输入您要的操作&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 先读取本地存储原来的数据</span></span><br><span class="line">                <span class="keyword">var</span> local = <span class="title function_">getDate</span>();</span><br><span class="line">                <span class="comment">// console.log(local);</span></span><br><span class="line">                <span class="comment">// 把local数组进行更新数据 把最新的数据追加给local数组</span></span><br><span class="line">                local.<span class="title function_">push</span>(&#123; <span class="attr">title</span>: $(<span class="variable language_">this</span>).<span class="title function_">val</span>(), <span class="attr">done</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">                <span class="comment">// 把这个数组local 存储给本地存储</span></span><br><span class="line">                <span class="title function_">saveDate</span>(local);</span><br><span class="line">                <span class="comment">// 2. toDoList 本地存储数据渲染加载到页面</span></span><br><span class="line">                <span class="title function_">load</span>();</span><br><span class="line">                $(<span class="variable language_">this</span>).<span class="title function_">val</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 3. toDoList 删除操作</span></span><br><span class="line">    $(<span class="string">&quot;ol, ul&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// alert(11);</span></span><br><span class="line">        <span class="comment">// 先获取本地存储</span></span><br><span class="line">        <span class="keyword">var</span> data = <span class="title function_">getDate</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">        <span class="comment">// 修改数据</span></span><br><span class="line">        <span class="keyword">var</span> index = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line">        data.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 保存到本地存储</span></span><br><span class="line">        <span class="title function_">saveDate</span>(data);</span><br><span class="line">        <span class="comment">// 重新渲染页面</span></span><br><span class="line">        <span class="title function_">load</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 4. toDoList 正在进行和已完成选项操作</span></span><br><span class="line">    $(<span class="string">&quot;ol, ul&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;input&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// alert(11);</span></span><br><span class="line">        <span class="comment">// 先获取本地存储的数据</span></span><br><span class="line">        <span class="keyword">var</span> data = <span class="title function_">getDate</span>();</span><br><span class="line">        <span class="comment">// 修改数据</span></span><br><span class="line">        <span class="keyword">var</span> index = $(<span class="variable language_">this</span>).<span class="title function_">siblings</span>(<span class="string">&quot;a&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line">        <span class="comment">// data[?].done = ?</span></span><br><span class="line">        data[index].<span class="property">done</span> = $(<span class="variable language_">this</span>).<span class="title function_">prop</span>(<span class="string">&quot;checked&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存到本地存储</span></span><br><span class="line">        <span class="title function_">saveDate</span>(data);</span><br><span class="line">        <span class="comment">// 重新渲染页面</span></span><br><span class="line">        <span class="title function_">load</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 读取本地存储的数据 </span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getDate</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> data = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;todolist&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (data !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 本地存储里面的数据是字符串格式的 但是我们需要的是对象格式的</span></span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> [];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保存本地存储数据  [&#123;&#125;,&#123;&#125;,&#123;&#125;]</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">saveDate</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;todolist&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 渲染加载数据</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">load</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 读取本地存储的数据</span></span><br><span class="line">        <span class="keyword">var</span> data = <span class="title function_">getDate</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">        <span class="comment">// 遍历之前先要清空ol里面的元素内容</span></span><br><span class="line">        $(<span class="string">&quot;ol, ul&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">        <span class="keyword">var</span> todoCount = <span class="number">0</span>; <span class="comment">// 正在进行的个数</span></span><br><span class="line">        <span class="keyword">var</span> doneCount = <span class="number">0</span>; <span class="comment">// 已经完成的个数</span></span><br><span class="line">        <span class="comment">// 遍历这个数据</span></span><br><span class="line">        $.<span class="title function_">each</span>(data, <span class="keyword">function</span>(<span class="params">i, n</span>) &#123;</span><br><span class="line">            <span class="comment">// console.log(n);</span></span><br><span class="line">            <span class="keyword">if</span> (n.<span class="property">done</span>) &#123;</span><br><span class="line">                $(<span class="string">&quot;ul&quot;</span>).<span class="title function_">prepend</span>(<span class="string">&quot;&lt;li&gt;&lt;input type=&#x27;checkbox&#x27; checked=&#x27;checked&#x27; &gt; &lt;p&gt;&quot;</span> + n.<span class="property">title</span> + <span class="string">&quot;&lt;/p&gt; &lt;a href=&#x27;javascript:;&#x27; id=&quot;</span> + i + <span class="string">&quot; &gt;&lt;/a&gt;&lt;/li&gt;&quot;</span>);</span><br><span class="line">                doneCount++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $(<span class="string">&quot;ol&quot;</span>).<span class="title function_">prepend</span>(<span class="string">&quot;&lt;li&gt;&lt;input type=&#x27;checkbox&#x27; &gt; &lt;p&gt;&quot;</span> + n.<span class="property">title</span> + <span class="string">&quot;&lt;/p&gt; &lt;a href=&#x27;javascript:;&#x27; id=&quot;</span> + i + <span class="string">&quot; &gt;&lt;/a&gt;&lt;/li&gt;&quot;</span>);</span><br><span class="line">                todoCount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        $(<span class="string">&quot;#todocount&quot;</span>).<span class="title function_">text</span>(todoCount);</span><br><span class="line">        $(<span class="string">&quot;#donecount&quot;</span>).<span class="title function_">text</span>(doneCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-jQuery-选择器&quot;&gt;&lt;a href=&quot;#1-jQuery-选择器&quot; class=&quot;headerlink&quot; title=&quot;1.jQuery 选择器&quot;&gt;&lt;/a&gt;1.jQuery 选择器&lt;/h2&gt;&lt;h3 id=&quot;1-1-jQuery-基础选择器&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="资料" scheme="http://example.com/categories/%E8%B5%84%E6%96%99/"/>
    
    
    <category term="jQuery" scheme="http://example.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>初识(五)</title>
    <link href="http://example.com/2022/11/06/%E5%88%9D%E8%AF%86-%E4%BA%94/"/>
    <id>http://example.com/2022/11/06/%E5%88%9D%E8%AF%86-%E4%BA%94/</id>
    <published>2022-11-06T03:43:38.000Z</published>
    <updated>2022-11-06T03:55:21.736Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><p>Node.js 是一个基于 Chrome v8 引擎的 JavaScript运行环境。</p><p>注意：</p><p>① 浏览器是 JavaScript 的前端运行环境。 </p><p>② Node.js 是 JavaScript 的后端运行环境。 </p><p>③ Node.js 中无法调用 DOM 和 BOM 等浏览器内置 API。</p><p><strong>Node可以做什么</strong></p><p>Node.js 作为一个 JavaScript 的运行环境，仅仅提供了基础的功能和 API。然而，基于 Node.js 提供的这些基础能，很多强大</p><p>的工具和框架如雨后春笋，层出不穷，所以学会了 Node.js ，可以让前端程序员胜任更多的工作和岗位：</p><p>① 基于 Express 框架（<a href="http://www.expressjs.com.cn/%EF%BC%89%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA">http://www.expressjs.com.cn/），可以快速构建</a> Web 应用</p><p>② 基于 Electron 框架（<a href="https://electronjs.org/%EF%BC%89%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%9E%84%E5%BB%BA%E8%B7%A8%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8">https://electronjs.org/），可以构建跨平台的桌面应用</a></p><p>③ 基于 restify 框架（<a href="http://restify.com/%EF%BC%89%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA">http://restify.com/），可以快速构建</a> API 接口项目</p><p>④ 读写和操作数据库、创建实用的命令行工具辅助前端开发、etc…</p><h3 id="1-fs-文件系统模块"><a href="#1-fs-文件系统模块" class="headerlink" title="1. fs 文件系统模块"></a>1. fs 文件系统模块</h3><p>fs 模块是 Node.js 官方提供的、用来操作文件的模块。它提供了一系列的方法和属性，用来满足用户对文件的操作需求。</p><p>例如：</p><p>fs.readFile() 方法，用来读取指定文件中的内容</p><p>fs.writeFile() 方法，用来向指定的文件中写入内容</p><h4 id="1-1导入fs"><a href="#1-1导入fs" class="headerlink" title="1.1导入fs"></a>1.1导入fs</h4><p>使用 fs 模块来操作文件，则需要使用如下的方式先导入它：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="1-2-读取"><a href="#1-2-读取" class="headerlink" title="1.2 读取"></a>1.2 读取</h4><p>使用 fs.readFile() 方法，可以读取指定文件中的内容，语法格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(path[,options],callback)</span><br></pre></td></tr></table></figure><p>参数解读：</p><p>⚫ 参数1：必选参数，字符串，表示文件的路径。</p><p>⚫ 参数2：可选参数，表示以什么编码格式来读取文件。</p><p>⚫ 参数3：必选参数，文件读取完成后，通过回调函数拿到读取的结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./1.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, dataStr</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-------------------------&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(dataStr)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断文件是否读取成功</span></span><br><span class="line"><span class="comment">//可以判断 err 对象是否为 null，从而知晓文件读取的结果</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./1.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err,dataStr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取失败&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取文件成功&#x27;</span> + dataStr)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="1-3-fs-writeFile"><a href="#1-3-fs-writeFile" class="headerlink" title="1.3 fs.writeFile()"></a>1.3 fs.writeFile()</h4><p>使用 fs.writeFile() 方法，可以向指定的文件中写入内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">// 调用 fs.writeFile() 方法 写入文件的内容</span></span><br><span class="line"><span class="comment">// 参数1：表示文件的存放路径</span></span><br><span class="line"><span class="comment">// 参数2：表示要写入的内容</span></span><br><span class="line"><span class="comment">// 参数3：回调函数</span></span><br><span class="line"><span class="comment">// 有该文件 修改内容  没有该文件创建文件</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;./3.txt&#x27;</span>, <span class="string">&#x27;小马&#x27;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="comment">// 写入成功 null</span></span><br><span class="line">  <span class="comment">// 写入失败 错误对象</span></span><br><span class="line">  <span class="comment">// console.log(err)</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件写入失败&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件写入成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意：</p><p>① fs.writeFile() 方法只能用来创建文件，不能用来创建路径</p><p>② 重复调用 fs.writeFile() 写入同一个文件，新写入的内容会覆盖之前的旧内容</p><h4 id="小案例-成绩读取"><a href="#小案例-成绩读取" class="headerlink" title="小案例-成绩读取"></a>小案例-成绩读取</h4><p>使用 fs 文件系统模块，将素材目录下成绩.txt文件中的考试数据，整理到成绩-ok.txt文件中。</p><p>步骤：</p><p>① 导入需要的 fs 文件系统模块</p><p>② 使用 fs.readFile() 方法，读取素材目录下的 成绩.txt 文件</p><p>③ 判断文件是否读取失败</p><p>④ 文件读取成功后，处理成绩数据</p><p>⑤ 将处理完成的成绩数据，调用 fs.writeFile() 方法，写入到新文件 成绩-ok.txt 中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./text/成绩.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, dataStr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取失败&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取成功&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(dataStr)</span><br><span class="line">  <span class="comment">// 变成数组</span></span><br><span class="line">  <span class="keyword">let</span> arr = dataStr.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">  <span class="comment">// 遍历数组</span></span><br><span class="line">  arr = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> item.<span class="title function_">replace</span>(<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line">  <span class="comment">// 换行</span></span><br><span class="line">  <span class="keyword">let</span> str = arr.<span class="title function_">join</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line">  <span class="comment">// 写入新文件</span></span><br><span class="line">  fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;./04_成绩-ok.txt&#x27;</span>, str, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入失败&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入成功&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-path-路径模块"><a href="#2-path-路径模块" class="headerlink" title="2 path 路径模块"></a>2 path 路径模块</h3><p>path 模块是 Node.js 官方提供的、用来处理路径的模块。它提供了一系列的方法和属性，用来满足用户对路径的处理</p><p>需求。</p><p>例如：</p><p>⚫ path.join() 方法，用来将多个路径片段拼接成一个完整的路径字符串</p><p>⚫ path.basename() 方法，用来从路径字符串中，将文件名解析出来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br></pre></td></tr></table></figure><p> path.join() 的语法格式</p><p>使用 path.join() 方法，可以把多个路径片段拼接为完整的路径字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">join</span>([...paths])</span><br></pre></td></tr></table></figure><p>参数解读：</p><p>⚫ …paths <string> 路径片段的序列</p><p>⚫ 返回值: <string></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// path 路径的相关模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="comment">// join  拼接路径</span></span><br><span class="line"><span class="comment">// basename 获取文件名</span></span><br><span class="line"><span class="comment">// extname 获取文件后缀名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// path.join(各种路径) 该方法可以把各种路径拼接一起</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(__dirname + <span class="string">&#x27;text&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// join 可识别路径拼接</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;../&#x27;</span>, <span class="string">&#x27;c/d/e/f&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// path.basename(&#x27;路径&#x27;,&#x27;去除的后缀名&#x27;)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">basename</span>(<span class="string">&#x27;./text.txt&#x27;</span>, <span class="string">&#x27;.txt&#x27;</span>))</span><br><span class="line"><span class="comment">// path.extname(&#x27;路径&#x27;)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">extname</span>(<span class="string">&#x27;./text.txt&#x27;</span>))</span><br></pre></td></tr></table></figure><h4 id="2-1-path-basename-获取路径中的文件名"><a href="#2-1-path-basename-获取路径中的文件名" class="headerlink" title="2.1  path.basename() 获取路径中的文件名"></a>2.1  path.basename() 获取路径中的文件名</h4><p>使用 path.basename() 方法，可以获取路径中的最后一部分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">basename</span>(path[,ext])</span><br></pre></td></tr></table></figure><p>参数解读：</p><p>⚫ path <string> 必选参数，表示一个路径的字符串</p><p>⚫ ext <string> 可选参数，表示文件扩展名</p><p>⚫ 返回: <string> 表示路径中的最后一部分</p><p>使用 path.basename() 方法，可以从一个文件路径中，获取到文件的名称部分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义文件的存放路径</span></span><br><span class="line"><span class="keyword">const</span> fpath = <span class="string">&#x27;/a/b/c/index.html&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const fullName = path.basename(fpath)</span></span><br><span class="line"><span class="comment">// console.log(fullName)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nameWithoutExt = path.<span class="title function_">basename</span>(fpath, <span class="string">&#x27;.html&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nameWithoutExt)  <span class="comment">//index</span></span><br></pre></td></tr></table></figure><h4 id="2-2-path-extname-获取路径中的文件扩展名"><a href="#2-2-path-extname-获取路径中的文件扩展名" class="headerlink" title="2.2 path.extname() 获取路径中的文件扩展名"></a>2.2 path.extname() 获取路径中的文件扩展名</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">extname</span>(path)</span><br></pre></td></tr></table></figure><p>参数解读：</p><p>⚫ path <string>必选参数，表示一个路径的字符串</p><p>⚫ 返回: <string> 返回得到的扩展名字符串</p><p>使用 path.extname() 方法，可以获取路径中的扩展名部分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是文件的存放路径</span></span><br><span class="line"><span class="keyword">const</span> fpath = <span class="string">&#x27;/a/b/c/index.html&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fext = path.<span class="title function_">extname</span>(fpath)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fext)   <span class="comment">//.html</span></span><br></pre></td></tr></table></figure><h4 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h4><p>将素材目录下的 index.html 页面，拆分成三个文件，分别是：index.css &#x2F; index.js &#x2F; index.html 并且将拆分出来的 3 个文件，存放到 clock 目录中。</p><p>案例的实现步骤</p><p>① 创建两个正则表达式，分别用来匹配 <style> 和 <script> 标签</p><p>② 使用 fs 模块，读取需要被处理的 HTML 文件</p><p>③ 自定义 resolveCSS 方法，来写入 index.css 样式文件</p><p>④ 自定义 resolveJS 方法，来写入 index.js 脚本文件</p><p>⑤ 自定义 resolveHTML 方法，来写入 index.html 文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把 index.html 拆解出单独的 html css js </span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> past = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// __dirname 拼接路径</span></span><br><span class="line"><span class="keyword">const</span> mypath = past.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"><span class="comment">// console.log(mypath)</span></span><br><span class="line"><span class="comment">// 读取文件</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(mypath, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, dataStr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取失败&#x27;</span>)</span><br><span class="line">  <span class="comment">// console.log(dataStr)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理css</span></span><br><span class="line">  <span class="comment">// 正则表达式.exec(dataStr)</span></span><br><span class="line">  <span class="keyword">let</span> cssreg = <span class="regexp">/&lt;style&gt;([\s\S]*)&lt;\/style&gt;/</span></span><br><span class="line">  <span class="comment">// let css = reg.exec(dataStr)</span></span><br><span class="line">  <span class="keyword">let</span> css = cssreg.<span class="title function_">exec</span>(dataStr)[<span class="number">1</span>]</span><br><span class="line">  <span class="comment">// console.log(css)</span></span><br><span class="line">  <span class="keyword">let</span> csspath = past.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;index.css&#x27;</span>)</span><br><span class="line">  <span class="comment">// console.log(csspath)</span></span><br><span class="line">  <span class="comment">// fs.writeFile(csspath, css, &#x27;utf8&#x27;, (err) =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   if (err) return console.log(&#x27;写入失败&#x27;)</span></span><br><span class="line">  <span class="comment">//   console.log(&#x27;css写入成功&#x27;)</span></span><br><span class="line">  <span class="comment">// &#125;)</span></span><br><span class="line">  <span class="keyword">let</span> cssname = <span class="string">&#x27;css&#x27;</span></span><br><span class="line">  <span class="title function_">fn</span>(csspath, css, cssname)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理js</span></span><br><span class="line">  <span class="keyword">let</span> jsreg = <span class="regexp">/&lt;script&gt;([\s\S]*)&lt;\/script&gt;/</span></span><br><span class="line">  <span class="comment">// console.log(jsreg)</span></span><br><span class="line">  <span class="keyword">let</span> js = jsreg.<span class="title function_">exec</span>(dataStr)[<span class="number">1</span>]</span><br><span class="line">  <span class="comment">// console.log(js)</span></span><br><span class="line">  <span class="keyword">let</span> jspath = past.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;index.js&#x27;</span>)</span><br><span class="line">  <span class="comment">// console.log(jspath)</span></span><br><span class="line">  <span class="comment">// fs.writeFile(jspath, js, &#x27;utf8&#x27;, err =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   if (err) return console.log(&#x27;写入失败&#x27;)</span></span><br><span class="line">  <span class="comment">//   console.log(&#x27;js写入成功&#x27;)</span></span><br><span class="line">  <span class="comment">// &#125;)</span></span><br><span class="line">  <span class="keyword">let</span> jsname = <span class="string">&#x27;js&#x27;</span></span><br><span class="line">  <span class="title function_">fn</span>(jspath, js, jsname)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理html</span></span><br><span class="line">  <span class="keyword">let</span> html = dataStr.<span class="title function_">replace</span>(cssreg.<span class="title function_">exec</span>(dataStr)[<span class="number">0</span>], <span class="string">&#x27;&lt;link rel=&quot;stylesheet&quot; href=&quot;./index.css&quot;&gt;&#x27;</span>).<span class="title function_">replace</span>(jsreg.<span class="title function_">exec</span>(dataStr)[<span class="number">0</span>], <span class="string">&#x27;&lt;script src=&quot;./index.js&quot;&gt;&lt;/script&gt;&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> htmlpath = past.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">  <span class="comment">// fs.writeFile(htmlpath, html, &#x27;utf8&#x27;, err =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   if (err) return console.log(&#x27;写入失败&#x27;)</span></span><br><span class="line">  <span class="comment">//   console.log(&#x27;html写入成功&#x27;)</span></span><br><span class="line">  <span class="comment">// &#125;)</span></span><br><span class="line">  <span class="keyword">let</span> htmlname = <span class="string">&#x27;html&#x27;</span></span><br><span class="line">  <span class="title function_">fn</span>(htmlpath, html, htmlname)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">path, html, name</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">writeFile</span>(path, html, <span class="string">&#x27;utf8&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入失败&#x27;</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(name + <span class="string">&#x27;写入成功&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-http模块"><a href="#3-http模块" class="headerlink" title="3.http模块"></a>3.http模块</h3><p>http 模块是 Node.js 官方提供的、用来创建 web 服务器的模块。通过 http 模块提供的 http.createServer() 方法，就能方便的把一台普通的电脑，变成一台 Web 服务器，从而对外提供 Web 资源服务。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.导入模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="comment">// 2.创建web服务器</span></span><br><span class="line"><span class="keyword">let</span> app = http.<span class="title function_">createServer</span>()</span><br><span class="line"><span class="comment">// 3.监听请求</span></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人来请求了，请求的地址是：&#x27;</span> + req.<span class="property">url</span>)</span><br><span class="line">  <span class="comment">// 请求的类型</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求的类型是：&#x27;</span> + req.<span class="property">method</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----------------------------&#x27;</span>)</span><br><span class="line">  <span class="comment">// 防止中文乱码</span></span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html;charset=utf-8&#x27;</span>)</span><br><span class="line">  <span class="comment">// 相应的返回值</span></span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;加油&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 4.启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器开启&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3-1-req-请求对象"><a href="#3-1-req-请求对象" class="headerlink" title="3.1 req 请求对象"></a>3.1 req 请求对象</h4><p>只要服务器接收到了客户端的请求，就会调用通过 server.on() 为服务器绑定的 request 事件处理函数。</p><p>在事件处理函数中，访问与客户端相关的数据或属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>,<span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//req 是请求对象，它包含了与客户端相关的数据和属性</span></span><br><span class="line">  <span class="comment">//req.url 是客户端请求的 URL 地址</span></span><br><span class="line">  <span class="comment">//req.method 是客户端的 method 请求类型</span></span><br><span class="line">  <span class="keyword">const</span> str = <span class="string">`请求的地址是： <span class="subst">$&#123;req.url&#125;</span>,请求的类型是：<span class="subst">$&#123;req.method&#125;</span>`</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str) <span class="comment">//终端显示</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3-2-res-响应对象"><a href="#3-2-res-响应对象" class="headerlink" title="3.2  res 响应对象"></a>3.2  res 响应对象</h4><p>在服务器的 request 事件处理函数中，访问与服务器相关的数据或属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>,<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//res 是响应对象，它包含了与服务器相关的数据和属性</span></span><br><span class="line">  <span class="comment">//要发送到服务器的字符串</span></span><br><span class="line">  <span class="keyword">const</span> str = <span class="string">`请求的地址是： <span class="subst">$&#123;req.url&#125;</span>,请求的类型是：<span class="subst">$&#123;req.method&#125;</span>`</span></span><br><span class="line">  <span class="comment">//res.end() 向客户端发送指定内容，并结束这次请求的处理过程</span></span><br><span class="line">  res.<span class="title function_">end</span>(str)  <span class="comment">//页面显示</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3-3-解决中文乱码问题"><a href="#3-3-解决中文乱码问题" class="headerlink" title="3.3 解决中文乱码问题"></a>3.3 解决中文乱码问题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html;charset=utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="小案例"><a href="#小案例" class="headerlink" title="小案例"></a>小案例</h4><p>根据不同的 url 响应不同的 html 内容</p><p>实现步骤</p><p>① 获取请求的 url 地址</p><p>② 设置默认的响应内容为 404 Not found</p><p>③ 判断用户请求的是否为 / 或 /index.html 首页</p><p>④ 判断用户请求的是否为 /about.html 关于页面</p><p>⑤ 设置 Content-Type 响应头，防止中文乱码</p><p>⑥ 使用 res.end() 把内容响应给客户端</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"><span class="comment">// 监听服务器</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 获取请求的地址</span></span><br><span class="line">  <span class="keyword">const</span> url = req.<span class="property">url</span></span><br><span class="line">  <span class="comment">// 设置，默认的相应内容为 404</span></span><br><span class="line">  <span class="keyword">let</span> content = <span class="string">&#x27;&lt;h1&gt;404 Not Found!&lt;h1&gt;&#x27;</span></span><br><span class="line">  <span class="comment">// 判断用户输入的页面</span></span><br><span class="line">  <span class="keyword">if</span> (url === <span class="string">&#x27;/&#x27;</span> || url === <span class="string">&#x27;index.html&#x27;</span>) &#123;</span><br><span class="line">    content = <span class="string">&#x27;&lt;h1&gt;首页&lt;/h1&gt;&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">&#x27;/about.html&#x27;</span>) &#123;</span><br><span class="line">    content = <span class="string">&#x27;&lt;h1&gt;关于页面&lt;/h1&gt;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 防止中文乱码</span></span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html;charset=utf-8&#x27;</span>)</span><br><span class="line">  <span class="comment">// 把内容相应给客户端</span></span><br><span class="line">  res.<span class="title function_">end</span>(content)</span><br><span class="line">&#125;)</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="综合案例-1"><a href="#综合案例-1" class="headerlink" title="综合案例"></a>综合案例</h4><p>实现 clock 时钟的 web 服务器</p><p>实现步骤</p><p>① 导入需要的模块</p><p>② 创建基本的 web 服务器</p><p>③ 将资源的请求 url 地址映射为文件的存放路径</p><p>④ 读取文件内容并响应给客户端</p><p>⑤ 优化资源的请求路径</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="comment">// 2.创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"><span class="comment">// 3.监听web服务器</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 5.获取客户端请求的URL地址</span></span><br><span class="line">  <span class="keyword">const</span> url = req.<span class="property">url</span></span><br><span class="line">  <span class="comment">// 具体文件存放路径</span></span><br><span class="line">  <span class="keyword">let</span> fpath = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (url === <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">    fpath = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./clock/index.html&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fpath = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./clock&#x27;</span>, url)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// const fpath = path.join(__dirname, &#x27;./clock&#x27;, url)</span></span><br><span class="line">  <span class="comment">// 6.根据文件路径读取内容</span></span><br><span class="line">  fs.<span class="title function_">readFile</span>(fpath, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, dataStr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 读取失败 返回错误提示</span></span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> res.<span class="title function_">end</span>(<span class="string">&#x27;404 访问错误&#x27;</span>)</span><br><span class="line">    <span class="comment">// 读取成功 返回读取内容</span></span><br><span class="line">    res.<span class="title function_">end</span>(dataStr)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 4.开启服务器</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 服务器开启后的提示消息</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="4-模块化"><a href="#4-模块化" class="headerlink" title="4.模块化"></a>4.模块化</h3><p>模块化是指解决一个复杂问题时，自顶向下逐层把系统划分成若干模块的过程。对于整个系统来说，模块是可组合、分解和更换的单元。</p><p>编程领域中的模块化，就是遵守固定的规则，把一个大文件拆成独立并互相依赖的多个小模块。</p><p>把代码进行模块化拆分的好处：</p><p>① 提高了代码的复用性</p><p>② 提高了代码的可维护性</p><p>③ 可以实现按需加载</p><h4 id="4-1-Node-js-中模块的模块化"><a href="#4-1-Node-js-中模块的模块化" class="headerlink" title="4.1  Node.js 中模块的模块化"></a>4.1  Node.js 中模块的模块化</h4><h5 id="4-1-1-Node-js-中模块的分类"><a href="#4-1-1-Node-js-中模块的分类" class="headerlink" title="4.1.1 Node.js 中模块的分类"></a>4.1.1 Node.js 中模块的分类</h5><p>Node.js 中根据模块来源的不同，将模块分为了 3 大类，分别是：</p><p>⚫ 内置模块（内置模块是由 Node.js 官方提供的，例如 fs、path、http 等）</p><p>⚫ 自定义模块（用户创建的每个 .js 文件，都是自定义模块）</p><p>⚫ 第三方模块（由第三方开发出来的模块，并非官方提供的内置模块，也不是用户创建的自定义模块，使用前需要先下载）</p><h5 id="4-1-2-加载模块"><a href="#4-1-2-加载模块" class="headerlink" title="4.1.2 加载模块"></a>4.1.2 加载模块</h5><p>使用强大的 require() 方法，可以加载需要的内置模块、用户自定义模块、第三方模块进行使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.加载内置的 fs 模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">//2.加载用户的自定义模块</span></span><br><span class="line"><span class="keyword">const</span> custom = <span class="built_in">require</span>(<span class="string">&#x27;./custom.js&#x27;</span>)</span><br><span class="line"><span class="comment">//3.加载第三方模块</span></span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">&#x27;moment&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="4-1-3-Node-js-中的模块作用域"><a href="#4-1-3-Node-js-中的模块作用域" class="headerlink" title="4.1.3 Node.js 中的模块作用域"></a>4.1.3 Node.js 中的模块作用域</h5><p>和函数作用域类似，在自定义模块中定义的变量、方法等成员，只能在当前模块内被访问，这种模块级别的访问限制，叫做模块作用域。</p><p>防止了全局变量污染的问题</p><h5 id="4-1-4-向外共享模块作用域中的成员"><a href="#4-1-4-向外共享模块作用域中的成员" class="headerlink" title="4.1.4 向外共享模块作用域中的成员"></a>4.1.4 向外共享模块作用域中的成员</h5><p>​module 对象</p><p>​在每个 .js 自定义模块中都有一个 module 对象，它里面存储了和当前模块有关的信息</p><p><img src="E:\能放\前端\截图\node\module.png" alt="module"></p><p>​module.exports 对象</p><p>​在自定义模块中，可以使用 module.exports 对象，将模块内的成员共享出去，供外界使用。外界用 require() 方法导</p><p>​入自定义模块时，得到的就是 module.exports 所指向的对象。</p><p>​由于 module.exports 单词写起来比较复杂，为了简化向外共享成员的代码，Node 提供了 exports 对象。默认情下，</p><p>​exports 和 module.exports 指向同一个对象。最终共享的结果，还是以 module.exports 指向的对象为准。</p><p>​使用 require() 方法导入模块时，导入的结果，<strong>永远以 module.exports 指向的对象为准。</strong></p><p><img src="E:\能放\前端\截图\node\exports.png" alt="exports"></p><p><img src="E:\能放\前端\截图\node\exports2.png" alt="exports2"></p><p><img src="E:\能放\前端\截图\node\exports3.png" alt="exports3"></p><h5 id="4-1-5-Node-js-中的模块化规范"><a href="#4-1-5-Node-js-中的模块化规范" class="headerlink" title="4.1.5 Node.js 中的模块化规范"></a>4.1.5 Node.js 中的模块化规范</h5><p>Node.js 遵循了 CommonJS 模块化规范，CommonJS 规定了模块的特性和各模块之间如何相互依赖。</p><p>CommonJS 规定：</p><p>① 每个模块内部，module 变量代表当前模块。</p><p>② module 变量是一个对象，它的 exports 属性（即 module.exports）是对外的接口。 </p><p>③ 加载某个模块，其实是加载该模块的 module.exports 属性。require() 方法用于加载模块。</p><h3 id="5-npm与包"><a href="#5-npm与包" class="headerlink" title="5-npm与包"></a>5-npm与包</h3><h4 id="5-1-包"><a href="#5-1-包" class="headerlink" title="5.1 包"></a>5.1 包</h4><p>Node.js 中的第三方模块又叫做包。</p><p>就像电脑和计算机指的是相同的东西，第三方模块和包指的是同一个概念，只不过叫法不同。</p><p>不同于 Node.js 中的内置模块与自定义模块，包是由第三方个人或团队开发出来的，免费供所有人使用。</p><p>注意：Node.js 中的包都是免费且开源的，不需要付费即可免费下载使用。</p><p>由于 Node.js 的内置模块仅提供了一些底层的 API，导致在基于内置模块进行项目开发的时，效率很低。</p><p>包是基于内置模块封装出来的，提供了更高级、更方便的 API，极大的提高了开发效率。 </p><p>包和内置模块之间的关系，类似于 jQuery 和 浏览器内置 API 之间的关系。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//查看自己电脑上所安装的 npm 包管理工具的版本号</span><br><span class="line">npm -v</span><br><span class="line">//项目中安装指定名称的包  tab补齐名称</span><br><span class="line">npm install 包的完整名</span><br><span class="line">npm i 包的完整名</span><br></pre></td></tr></table></figure><h4 id="5-2-初次装包后多了的文件"><a href="#5-2-初次装包后多了的文件" class="headerlink" title="5.2 初次装包后多了的文件"></a>5.2 初次装包后多了的文件</h4><p>初次装包完成后，在项目文件夹下多一个叫做 node_modules 的文件夹和 package-lock.json 的配置文件。</p><p>其中：</p><p>node_modules 文件夹用来存放所有已安装到项目中的包。require() 导入第三方包时，就是从这个目录中查找并加载包。</p><p>package-lock.json 配置文件用来记录 node_modules 目录下的每一个包的下载信息，例如包的名字、版本号、下载地址等。</p><p>注意：程序员不要手动修改 node_modules 或 package-lock.json 文件中的任何代码，npm 包管理工具会自动维护它们。</p><h5 id="5-2-1-安装指定版本的包"><a href="#5-2-1-安装指定版本的包" class="headerlink" title="5.2.1 安装指定版本的包"></a>5.2.1 安装指定版本的包</h5><p>使用 npm install 命令安装包的时候，会自动安装最新版本的包。如果需要安装指定版本的包，可以在包名之后，通过 @ 符号指定具体的版本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i moment@2.22.2</span><br></pre></td></tr></table></figure><h5 id="5-2-2-包的语义化版本规范"><a href="#5-2-2-包的语义化版本规范" class="headerlink" title="5.2.2 包的语义化版本规范"></a>5.2.2 包的语义化版本规范</h5><p>包的版本号是以“点分十进制”形式进行定义的，总共有三位数字，例如 2.24.0</p><p>其中每一位数字所代表的的含义如下：</p><p>第1位数字：大版本</p><p>第2位数字：功能版本</p><p>第3位数字：Bug修复版本</p><p>版本号提升的规则：只要前面的版本号增长了，则后面的版本号归零。</p><h4 id="5-3-包管理配置文件"><a href="#5-3-包管理配置文件" class="headerlink" title="5.3 包管理配置文件"></a>5.3 包管理配置文件</h4><p>npm 规定，在项目根目录中，必须提供一个叫做 package.json 的包管理配置文件。用来记录与项目有关的一些配置</p><p>信息。例如：</p><p>⚫ 项目的名称、版本号、描述等</p><p>⚫ 项目中都用到了哪些包</p><p>⚫ 哪些包只在开发期间会用到</p><p>⚫ 那些包在开发和部署时都需要用到</p><h5 id="5-3-1-记录项目中安装了哪些包"><a href="#5-3-1-记录项目中安装了哪些包" class="headerlink" title="5.3.1 记录项目中安装了哪些包"></a>5.3.1 记录项目中安装了哪些包</h5><p>在项目根目录中，创建一个叫做 package.json 的配置文件，即可用来记录项目中安装了哪些包。从而方便剔除</p><p>node_modules 目录之后，在团队成员之间共享项目的源代码。</p><p>注意：今后在项目开发中，一定要把 node_modules 文件夹，添加到 .gitignore 忽略文件中。</p><h5 id="5-3-2-快速创建-package-json"><a href="#5-3-2-快速创建-package-json" class="headerlink" title="5.3.2 快速创建 package.json"></a>5.3.2 快速创建 package.json</h5><p>npm 包管理工具提供了一个快捷命令，可以在执行命令时所处的目录中，快速创建 package.json 这个包管理配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>注意：</p><p>① 上述命令只能在英文的目录下成功运行！所以，项目文件夹的名称一定要使用英文命名，不要使用中文，不能出现空格。 </p><p>② 运行 npm install 命令安装包的时候，npm 包管理工具会自动把包的名称和版本号，记录到 package.json 中。</p><h5 id="5-3-3-dependencies-节点"><a href="#5-3-3-dependencies-节点" class="headerlink" title="5.3.3 dependencies 节点"></a>5.3.3 dependencies 节点</h5><p>package.json 文件中，有一个 dependencies 节点，专门用来记录您使用 npm install 命令安装了哪些包。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//下载 dependencies 记录的所有包</span><br><span class="line">npm install</span><br><span class="line">npm i</span><br><span class="line">//卸载包 </span><br><span class="line">npm uninstall 具体包名</span><br><span class="line">注意：npm uninstall 命令执行成功后，会把卸载的包，自动从 package.json 的 dependencies 中移除掉。</span><br></pre></td></tr></table></figure><h5 id="5-3-4-devDependencies-节点"><a href="#5-3-4-devDependencies-节点" class="headerlink" title="5.3.4 devDependencies 节点"></a>5.3.4 devDependencies 节点</h5><p>如果某些包只在项目开发阶段会用到，在项目上线之后不会用到，则建议把这些包记录到 devDependencies 节点中。</p><p>与之对应的，如果某些包在开发和项目上线之后都需要用到，则建议把这些包记录到 dependencies 节点中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//安装指定包到 devDependencies 节点中</span><br><span class="line">npm i 包名 -D</span><br><span class="line">npm install 包名 --save-dev-- </span><br></pre></td></tr></table></figure><h4 id="5-4-切换-npm-的下包镜像源"><a href="#5-4-切换-npm-的下包镜像源" class="headerlink" title="5.4 切换 npm 的下包镜像源"></a>5.4 切换 npm 的下包镜像源</h4><p>下包的镜像源，指的就是下包的服务器地址。</p><p>为了更方便的切换下包的镜像源，我们可以安装 nrm 这个小工具，利用 nrm 提供的终端命令，可以快速查看和切换下</p><p>包的镜像源。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//下载</span><br><span class="line">npm i nrm -g</span><br><span class="line">//查看所有镜像源</span><br><span class="line">nrm ls</span><br><span class="line">//切换下载镜像源</span><br><span class="line">nrm use 镜像源名</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//查看当前下载包镜像源</span><br><span class="line">npm config get registry</span><br><span class="line">//查看当前下载包镜像源下载是否成功</span><br><span class="line">npm config set registry</span><br></pre></td></tr></table></figure><h4 id="5-5-包的分类"><a href="#5-5-包的分类" class="headerlink" title="5.5 包的分类"></a>5.5 包的分类</h4><p>使用 npm 包管理工具下载的包，共分为两大类，分别是：项目包和全局包</p><h5 id="5-5-1-项目包"><a href="#5-5-1-项目包" class="headerlink" title="5.5.1 项目包"></a>5.5.1 项目包</h5><p>那些被安装到项目的 node_modules 目录中的包，都是项目包。</p><p>项目包又分为两类，分别是：</p><p>⚫ 开发依赖包（被记录到 devDependencies 节点中的包，只在开发期间会用到）</p><p>⚫ 核心依赖包（被记录到 dependencies 节点中的包，在开发期间和项目上线之后都会用到）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//开发依赖包</span><br><span class="line">npm i 包名 -D</span><br><span class="line">//核心依赖包</span><br><span class="line">npm i 包名</span><br></pre></td></tr></table></figure><h5 id="5-5-2-全局包"><a href="#5-5-2-全局包" class="headerlink" title="5.5.2 全局包"></a>5.5.2 全局包</h5><p>在执行 npm install 命令时，如果提供了 -g 参数，则会把包安装为全局包。</p><p>全局包会被安装到 C:\Users\用户目录\AppData\Roaming\npm\node_modules 目录下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//全局安装指定的包</span><br><span class="line">npm i 包名 -g</span><br><span class="line">//卸载全局安装指定的包</span><br><span class="line">npm uninstall 包名 -g</span><br></pre></td></tr></table></figure><p>注意：</p><p>① 只有工具性质的包，才有全局安装的必要性。因为它们提供了好用的终端命令。</p><p>② 判断某个包是否需要全局安装后才能使用，可以参考官方提供的使用说明即可。</p><h6 id="5-5-2-1-i5ting-toc"><a href="#5-5-2-1-i5ting-toc" class="headerlink" title="5.5.2.1  i5ting_toc"></a>5.5.2.1  i5ting_toc</h6><p>i5ting_toc 是一个可以把 md 文档转为 html 页面的小工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//安装</span><br><span class="line">npm i i5ting_toc -g</span><br><span class="line">//调用</span><br><span class="line">i5ting_toc -f 要转换的md文件路径 -o</span><br></pre></td></tr></table></figure><h4 id="5-6-规范的包结构"><a href="#5-6-规范的包结构" class="headerlink" title="5.6 规范的包结构"></a>5.6 规范的包结构</h4><p>一个规范的包，它的组成结构，必须符合以下 3 点要求：</p><p>① 包必须以单独的目录而存在</p><p>② 包的顶级目录下要必须包含 package.json 这个包管理配置文件</p><p>③ package.json 中必须包含 name，version，main 这三个属性，分别代表包的名字、版本号、包的入口。</p><p>参考网站：<a href="https://yarnpkg.com/zh-Hans/docs/package-json">https://yarnpkg.com/zh-Hans/docs/package-json</a></p><h4 id="5-7-开发属于自己的包"><a href="#5-7-开发属于自己的包" class="headerlink" title="5.7 开发属于自己的包"></a>5.7 开发属于自己的包</h4><h5 id="5-7-1-初始化包的基本结构"><a href="#5-7-1-初始化包的基本结构" class="headerlink" title="5.7.1 初始化包的基本结构"></a>5.7.1 初始化包的基本结构</h5><p>① 新建 wt-tools 文件夹，作为包的根目录</p><p>② 在 wt-tools 文件夹中，新建如下三个文件：</p><p>⚫ package.json （包管理配置文件）</p><p>⚫ index.js （包的入口文件）</p><p>⚫ README.md （包的说明文档）</p><p>创建的这个包的 README.md 文档中，会包含以下 6 项内容：</p><p>安装方式、导入方式、格式化时间、转义 HTML 中的特殊字符、还原 HTML 中的特殊字符、开源协议</p><h5 id="5-7-2-将不同的功能进行模块化拆分"><a href="#5-7-2-将不同的功能进行模块化拆分" class="headerlink" title="5.7.2 将不同的功能进行模块化拆分"></a>5.7.2 将不同的功能进行模块化拆分</h5><p>① 将格式化时间的功能，拆分到 src -> dateFormat.js 中 </p><p>② 将处理 HTML 字符串的功能，拆分到 src -> htmlEscape.js 中 </p><p>③ 在 index.js 中，导入两个模块，得到需要向外共享的方法</p><p>④ 在 index.js 中，使用 module.exports 把对应的方法共享出去</p><p>index.js拆分</p><p>⚫dataFormat.js（格式化时间）</p><p>⚫htmlEscape.js（转义 HTML 中的特殊字符）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;wt-tools&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;提供了格式化时间，HTMLEscape的功能&quot;,</span><br><span class="line">  &quot;keywords&quot;: [</span><br><span class="line">    &quot;wt&quot;,</span><br><span class="line">    &quot;mjx&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 定义格式化时间函数</span><br><span class="line">function dateFormat(dateStr) &#123;</span><br><span class="line">  const dt = new Date(dateStr)</span><br><span class="line"></span><br><span class="line">  const y = padZero(dt.getFullYear())</span><br><span class="line">  const m = padZero(dt.getMonth() + 1)</span><br><span class="line">  const d = padZero(dt.getDate())</span><br><span class="line"></span><br><span class="line">  const hh = padZero(dt.getHours())</span><br><span class="line">  const mm = padZero(dt.getMinutes())</span><br><span class="line">  const ss = padZero(dt.getSeconds())</span><br><span class="line"></span><br><span class="line">  return `$&#123;y&#125;-$&#123;m&#125;-$&#123;d&#125; $&#123;hh&#125;:$&#123;mm&#125;:$&#123;ss&#125;`</span><br><span class="line">&#125;</span><br><span class="line">// 补零函数</span><br><span class="line">function padZero(n) &#123;</span><br><span class="line">  return n &gt; 9 ? n : &#x27;0&#x27; + n</span><br><span class="line">&#125;</span><br><span class="line">// 向外暴露</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  dateFormat</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// 转译html特殊字符</span><br><span class="line">function htmlEscape(htmlstr) &#123;</span><br><span class="line">  return htmlstr.replace(/&lt;|&gt;|&quot;|&amp;/g, match =&gt; &#123;</span><br><span class="line">    switch (match) &#123;</span><br><span class="line">      case &#x27;&lt;&#x27;:</span><br><span class="line">        return &#x27;&amp;lt;&#x27;</span><br><span class="line">      case &#x27;&gt;&#x27;:</span><br><span class="line">        return &#x27;&amp;gt;&#x27;</span><br><span class="line">      case &#x27;&quot;&#x27;:</span><br><span class="line">        return &#x27;&amp;quot;&#x27;</span><br><span class="line">      case &#x27;&amp;&#x27;:</span><br><span class="line">        return &#x27;&amp;amp;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">// 还原html字符串</span><br><span class="line">function htmlUnEscape(str) &#123;</span><br><span class="line">  return str.replace(/&amp;lt;|&amp;gt;|&amp;quot;|&amp;amp;/g, match =&gt; &#123;</span><br><span class="line">    switch (match) &#123;</span><br><span class="line">      case &#x27;&amp;lt;&#x27;:</span><br><span class="line">        return &#x27;&lt;&#x27;</span><br><span class="line">      case &#x27;&amp;gt;&#x27;:</span><br><span class="line">        return &#x27;&gt;&#x27;</span><br><span class="line">      case &#x27;&amp;quot;&#x27;:</span><br><span class="line">        return &#x27;&quot;&#x27;</span><br><span class="line">      case &#x27;&amp;amp;&#x27;:</span><br><span class="line">        return &#x27;&amp;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">// 向外暴露需要的成员</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  htmlEscape,</span><br><span class="line">  htmlUnEscape</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 包入口文件</span><br><span class="line">const data = require(&#x27;./dataFormat&#x27;)</span><br><span class="line">const escape = require(&#x27;./htmlEscape&#x27;)</span><br><span class="line"></span><br><span class="line">// 向外暴露需要的成员</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  ...data,</span><br><span class="line">  ...escape</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">### 安装</span><br><span class="line">​``` </span><br><span class="line">npm install wu-tools</span><br><span class="line">​```</span><br><span class="line"></span><br><span class="line">### 导入</span><br><span class="line">​```js</span><br><span class="line">const wt = require(&#x27;./wt-tools/index&#x27;)</span><br><span class="line">​```</span><br><span class="line"></span><br><span class="line">### 格式化时间</span><br><span class="line">​```js</span><br><span class="line">//调用 dadateFormat 对时间进行格式化</span><br><span class="line">const dtStr = wt.dateFormat(new Date())</span><br><span class="line">// 结果 2022-07-17 15:51:33</span><br><span class="line">console.log(dtStr)</span><br><span class="line">​```</span><br><span class="line"></span><br><span class="line">### 转义 HTML 中的特殊字符</span><br><span class="line">​```js</span><br><span class="line">// 待转换的 HTML 字符串</span><br><span class="line">const htmlStr = &#x27;&lt;h1&gt;六六六&lt;/h1&gt;&#x27;</span><br><span class="line">// 调用 htmlEscape 方法进行转换</span><br><span class="line">const str = wt.htmlEscape(htmlStr)</span><br><span class="line">// 结果 &amp;lt;h1&amp;gt;六六六&amp;lt;/h1&amp;gt;</span><br><span class="line">console.log(str)</span><br><span class="line">​```</span><br><span class="line"></span><br><span class="line">### 还原 HTML 中的特殊字符</span><br><span class="line">​```js</span><br><span class="line">// 待还原的 HTML 字符串</span><br><span class="line">const uhtmlstr = wt.htmlUnEscape(str)</span><br><span class="line">// 结果 &lt;h1&gt;六六六&lt;/h1&gt;</span><br><span class="line">console.log(uhtmlstr)</span><br><span class="line">​```</span><br><span class="line"></span><br><span class="line">### 开源协议</span><br><span class="line">ISC</span><br></pre></td></tr></table></figure><h4 id="5-8-yarn"><a href="#5-8-yarn" class="headerlink" title="5.8 yarn"></a>5.8 yarn</h4><p>跟 npm 相似的一个东西（第三方包的管理工具）公司用yarn比较多</p><p>与npm相比的优势：</p><p>1.速度快（并行下载）</p><p>2.离线安装（存在缓存）</p><p>3.版本信息统一（子依赖包信息清楚明确）</p><p>4.提示信息简介</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//安装</span><br><span class="line">npm i yarn -g</span><br><span class="line">//安装包</span><br><span class="line">yarn add 包名</span><br><span class="line">//卸载包</span><br><span class="line">yarn remove 包名</span><br><span class="line">//一次性安装包</span><br><span class="line">yarn</span><br></pre></td></tr></table></figure><h4 id="5-9-发布包"><a href="#5-9-发布包" class="headerlink" title="5.9 发布包"></a>5.9 发布包</h4><h5 id="5-9-1-注册-npm-账号"><a href="#5-9-1-注册-npm-账号" class="headerlink" title="5.9.1  注册 npm 账号"></a>5.9.1  注册 npm 账号</h5><p>① 访问 <a href="https://www.npmjs.com/">https://www.npmjs.com/</a> 网站，点击 sign up 按钮，进入注册用户界面</p><p>② 填写账号相关的信息：Full Name、Public Email、Username、Password</p><p>③ 点击 Create an Account 按钮，注册账号</p><p>④ 登录邮箱，点击验证链接，进行账号的验证</p><h5 id="5-9-2-登录-npm-账号"><a href="#5-9-2-登录-npm-账号" class="headerlink" title="5.9.2 登录 npm 账号"></a>5.9.2 登录 npm 账号</h5><p>npm 账号注册完成后，可以在终端中执行 npm login 命令，依次输入用户名、密码、邮箱后，即可登录成功。</p><p><strong>注意：在运行 npm login 命令之前，必须先把下包的服务器地址切换为 npm 的官方服务器。否则会导致发布包失败！</strong></p><h5 id="5-9-3-把包发布到-npm-上"><a href="#5-9-3-把包发布到-npm-上" class="headerlink" title="5.9.3 把包发布到 npm 上"></a>5.9.3 把包发布到 npm 上</h5><p>将终端切换到包的根目录之后，运行 npm publish 命令，即可将包发布到 npm 上（注意：包名不能雷同）。</p><h5 id="5-9-4-删除已发布的包"><a href="#5-9-4-删除已发布的包" class="headerlink" title="5.9.4 删除已发布的包"></a>5.9.4 删除已发布的包</h5><p>运行 npm unpublish 包名 --force 命令，即可从 npm 删除已发布的包。</p><p>注意：</p><p>① npm unpublish 命令只能删除 72 小时以内发布的包</p><p>② npm unpublish 删除的包，在 24 小时内不允许重复发布</p><p>③ 发布包的时候要慎重，尽量不要往 npm 上发布没有意义的包！</p><h3 id="6-模块加载机制"><a href="#6-模块加载机制" class="headerlink" title="6-模块加载机制"></a>6-模块加载机制</h3><h4 id="6-1-优先从缓存中加载"><a href="#6-1-优先从缓存中加载" class="headerlink" title="6.1 优先从缓存中加载"></a>6.1 优先从缓存中加载</h4><p>模块在第一次加载后会被缓存。 这也意味着多次调用 require() 不会导致模块的代码被执行多次。</p><p>注意：不论是内置模块、用户自定义模块、还是第三方模块，它们都会优先从缓存中加载，从而提高模块的加载效率。</p><h4 id="6-2-内置模块的加载机制"><a href="#6-2-内置模块的加载机制" class="headerlink" title="6.2 内置模块的加载机制"></a>6.2 内置模块的加载机制</h4><p>内置模块是由 Node.js 官方提供的模块，内置模块的加载优先级最高。</p><p>例如，require('fs') 始终返回内置的 fs 模块，即使在 node_modules 目录下有名字相同的包也叫做 fs。</p><h4 id="6-3-自定义模块的加载机制"><a href="#6-3-自定义模块的加载机制" class="headerlink" title="6.3 自定义模块的加载机制"></a>6.3 自定义模块的加载机制</h4><p>使用 require() 加载自定义模块时，必须指定以 ./ 或 ../ 开头的路径标识符。在加载自定义模块时，如果没有指定 ./ 或 ../ </p><p>这样的路径标识符，则 node 会把它当作内置模块或第三方模块进行加载。</p><p>同时，在使用 require() 导入自定义模块时，如果省略了文件的扩展名，则 Node.js 会按顺序分别尝试加载以下的文件：</p><p>① 按照确切的文件名进行加载</p><p>② 补全 .js 扩展名进行加载</p><p>③ 补全 .json 扩展名进行加载</p><p>④ 补全 .node 扩展名进行加载</p><p>⑤ 加载失败，终端报错</p><h4 id="6-4-第三方模块的加载机制"><a href="#6-4-第三方模块的加载机制" class="headerlink" title="6.4 第三方模块的加载机制"></a>6.4 第三方模块的加载机制</h4><p>如果传递给 require() 的模块标识符不是一个内置模块，也没有以 ‘./’ 或 ‘../’ 开头，则 Node.js 会从当前模块的父</p><p>目录开始，尝试从 /node_modules 文件夹中加载第三方模块。</p><p>如果没有找到对应的第三方模块，则移动到再上一层父目录中，进行加载，直到文件系统的根目录。</p><p>例如，假设在 'C:\Users\itheima\project\foo.js' 文件里调用了 require('tools')，则 Node.js 会按以下顺序查找：</p><p>① C:\Users\itheima\project\node_modules\tools</p><p>② C:\Users\itheima\node_modules\tools</p><p>③ C:\Users\node_modules\tools</p><p>④ C:\node_modules\tools</p><h4 id="6-5-目录作为模块"><a href="#6-5-目录作为模块" class="headerlink" title="6.5 目录作为模块"></a>6.5 目录作为模块</h4><p>当把目录作为模块标识符，传递给 require() 进行加载的时候，有三种加载方式：</p><p>① 在被加载的目录下查找一个叫做 package.json 的文件，并寻找 main 属性，作为 require() 加载的入口</p><p>② 如果目录里没有 package.json 文件，或者 main 入口不存在或无法解析，则 Node.js 将会试图加载目录下的 index.js 文件。 </p><p>③ 如果以上两步都失败了，则 Node.js 会在终端打印错误消息，报告模块的缺失：Error: Cannot find module 'xxx'</p><h3 id="7-Express"><a href="#7-Express" class="headerlink" title="7- Express"></a>7- Express</h3><h4 id="7-1-Express-简介"><a href="#7-1-Express-简介" class="headerlink" title="7.1 Express 简介"></a>7.1 Express 简介</h4><p>官方给出的概念：Express 是基于 Node.js 平台，快速、开放、极简的 Web 开发框架。</p><p>通俗的理解：Express 的作用和 Node.js 内置的 http 模块类似，是专门用来创建 Web 服务器的。</p><p><strong>Express 的本质：就是一个 npm 上的第三方包，提供了快速创建 Web 服务器的便捷方法。</strong></p><p>Express 的中文官网： <a href="http://www.expressjs.com.cn/">http://www.expressjs.com.cn/</a></p><p>对于前端程序员来说，最常见的两种服务器，分别是：</p><p>⚫ Web 网站服务器：专门对外提供 Web 网页资源的服务器。</p><p>⚫ API 接口服务器：专门对外提供 API 接口的服务器。</p><p><strong>使用 Express，我们可以方便、快速的创建 Web 网站的服务器或 API 接口的服务器。</strong></p><h4 id="7-2-Express-使用"><a href="#7-2-Express-使用" class="headerlink" title="7.2 Express 使用"></a>7.2 Express 使用</h4><h5 id="7-2-1-安装express"><a href="#7-2-1-安装express" class="headerlink" title="7.2.1 安装express"></a>7.2.1 安装express</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//安装</span><br><span class="line">npm i express</span><br></pre></td></tr></table></figure><h5 id="7-2-2-创建web服务器"><a href="#7-2-2-创建web服务器" class="headerlink" title="7.2.2 创建web服务器"></a>7.2.2 创建web服务器</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导入</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">//2.创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">//3.调用启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器已启动&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="7-2-3-监听-GET-请求"><a href="#7-2-3-监听-GET-请求" class="headerlink" title="7.2.3 监听 GET 请求"></a>7.2.3 监听 GET 请求</h5><p>通过 app.get() 方法，可以监听客户端的 GET 请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;请求url&#x27;</span>,<span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发起了get请求&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//参数1：客户端请求的url地址</span></span><br><span class="line"><span class="comment">//参数2：请求对应的处理函数</span></span><br><span class="line"><span class="comment">//req:请求对象</span></span><br><span class="line"><span class="comment">//res:响应对象</span></span><br></pre></td></tr></table></figure><h5 id="7-2-4-监听-POST-请求"><a href="#7-2-4-监听-POST-请求" class="headerlink" title="7.2.4 监听 POST 请求"></a>7.2.4 监听 POST 请求</h5><p>通过 app.post() 方法，可以监听客户端的 POST 请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;请求url&#x27;</span>,<span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发起了post请求&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//参数1：客户端请求的url地址</span></span><br><span class="line"><span class="comment">//参数2：请求对应的处理函数</span></span><br><span class="line"><span class="comment">//req:请求对象</span></span><br><span class="line"><span class="comment">//res:响应对象</span></span><br></pre></td></tr></table></figure><h5 id="7-2-5-把内容响应给客户端"><a href="#7-2-5-把内容响应给客户端" class="headerlink" title="7.2.5 把内容响应给客户端"></a>7.2.5 把内容响应给客户端</h5><p>通过 res.send() 方法，可以把处理好的内容，发送给客户端：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">//向客户发送JSON对象</span></span><br><span class="line">  res.<span class="title function_">send</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>, <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">//向客户端发送文本内容</span></span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;请求成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="7-2-6-获取-URL-中携带的查询参数"><a href="#7-2-6-获取-URL-中携带的查询参数" class="headerlink" title="7.2.6 获取 URL 中携带的查询参数"></a>7.2.6 获取 URL 中携带的查询参数</h5><p>通过 req.query 对象，可以访问到客户端通过查询字符串的形式，发送到服务器的参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">ger</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">//req.query 默认是一个空对象</span></span><br><span class="line">  <span class="comment">//客户端使用 ？name=zs&amp;age=20 这种查询字符串形式，发送到服务器的参数</span></span><br><span class="line">  <span class="comment">//可以通过 req.query 对象访问 如：</span></span><br><span class="line">  <span class="comment">// req.query.name    req.query.age</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="7-2-7-获取-URL-中的动态参数"><a href="#7-2-7-获取-URL-中的动态参数" class="headerlink" title="7.2.7 获取 URL 中的动态参数"></a>7.2.7 获取 URL 中的动态参数</h5><p>通过 req.params 对象，可以访问到 URL 中，通过 : 匹配到的动态参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//url地址中，可以通过：参数名 的形式，匹配动态参数值</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user/id:&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//req.params 默认是一个空对象</span></span><br><span class="line">  <span class="comment">//里面存放着：动态匹配到的参数值</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">params</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="7-3-托管静态资源"><a href="#7-3-托管静态资源" class="headerlink" title="7.3 托管静态资源"></a>7.3 托管静态资源</h4><h5 id="7-3-1-express-static"><a href="#7-3-1-express-static" class="headerlink" title="7.3.1 express.static()"></a>7.3.1 express.static()</h5><p>express 提供了一个非常好用的函数，叫做 express.static()，通过它，我们可以非常方便地创建一个静态资源服务器，</p><p>例如，通过如下代码就可以将 public 目录下的图片、CSS 文件、JavaScript 文件对外开放访问了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>))</span><br></pre></td></tr></table></figure><p>现在，你就可以访问 public 目录中的所有文件了：</p><p>h1ttp://localhost:3000/images/bg.jpg</p><p>h1ttp://localhost:3000/css/style.css</p><p>h1ttp://localhost:3000/js/login.js</p><p>注意：Express 在指定的静态目录中查找文件，并对外提供资源的访问路径。</p><p>因此，存放静态文件的目录名不会出现在 URL 中。</p><h5 id="7-3-2-托管多个静态资源目录"><a href="#7-3-2-托管多个静态资源目录" class="headerlink" title="7.3.2 托管多个静态资源目录"></a>7.3.2 托管多个静态资源目录</h5><p>如果要托管多个静态资源目录，请多次调用 express.static() 函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>))</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;files&#x27;</span>))</span><br></pre></td></tr></table></figure><p>访问静态资源文件时，express.static() 函数会根据目录的添加顺序查找所需的文件</p><h5 id="7-3-3-挂载路径前缀"><a href="#7-3-3-挂载路径前缀" class="headerlink" title="7.3.3 挂载路径前缀"></a>7.3.3 挂载路径前缀</h5><p>如果希望在托管的静态资源访问路径之前，挂载路径前缀，则可以使用如下的方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/public&#x27;</span>, express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>))</span><br></pre></td></tr></table></figure><p>现在，你就可以通过带有 /public 前缀地址来访问 public 目录中的文件了：</p><p>h1ttp://localhost:3000/public/images/kitten.jpg</p><p>h1ttp://localhost:3000/public/css/style.css</p><p>h1ttp://localhost:3000/public/js/app.js</p><h5 id="7-3-4-nodemon"><a href="#7-3-4-nodemon" class="headerlink" title="7.3.4 nodemon"></a>7.3.4 nodemon</h5><p>在编写调试 Node.js 项目的时候，如果修改了项目的代码，则需要频繁的手动 close 掉，然后再重新启动，非常繁琐。</p><p>现在，我们可以使用 nodemon（<a href="https://www.npmjs.com/package/nodemon%EF%BC%89">https://www.npmjs.com/package/nodemon）</a> 这个工具，它能够监听项目文件</p><p>的变动，当代码被修改后，nodemon 会自动帮我们重启项目，极大方便了开发和调试。</p><h6 id="7-3-4-1-安装nodemon"><a href="#7-3-4-1-安装nodemon" class="headerlink" title="7.3.4.1 安装nodemon"></a>7.3.4.1 安装nodemon</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i nodemon -g</span><br></pre></td></tr></table></figure><h6 id="7-3-4-2-使用nodemon"><a href="#7-3-4-2-使用nodemon" class="headerlink" title="7.3.4.2 使用nodemon"></a>7.3.4.2 使用nodemon</h6><p>当基于 Node.js 编写了一个网站应用的时候，传统的方式，是运行 node app.js 命令，来启动项目。这样做的坏处是：</p><p>代码被修改之后，需要手动重启项目。</p><p>现在，我们可以将 node 命令替换为 nodemon 命令，使用 nodemon app.js 来启动项目。这样做的好处是：代码</p><p>被修改之后，会被 nodemon 监听到，从而实现自动重启项目的效果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nodemon 文件名</span><br></pre></td></tr></table></figure><h4 id="7-4-Express-路由"><a href="#7-4-Express-路由" class="headerlink" title="7.4 Express 路由"></a>7.4 Express 路由</h4><p>在 Express 中，路由指的是客户端的请求与服务器处理函数之间的映射关系。</p><p>Express 中的路由分 3 部分组成，分别是请求的类型、请求的 URL 地址、处理函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.请求的类型(请求的url地址, 处理函数)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="7-4-1-路由的匹配过程"><a href="#7-4-1-路由的匹配过程" class="headerlink" title="7.4.1 路由的匹配过程"></a>7.4.1 路由的匹配过程</h5><p>每当一个请求到达服务器之后，需要先经过路由的匹配，只有匹配成功之后，才会调用对应的处理函数。</p><p>在匹配时，会按照路由的顺序进行匹配，如果请求类型和请求的 URL 同时匹配成功，则 Express 会将这次请求，转</p><p>交给对应的 function 函数进行处理。</p><h5 id="7-4-2-模块化路由"><a href="#7-4-2-模块化路由" class="headerlink" title="7.4.2 模块化路由"></a>7.4.2 模块化路由</h5><p>为了方便对路由进行模块化的管理，Express 不建议将路由直接挂载到 app 上，而是推荐将路由抽离为单独的模块。</p><p>将路由抽离为单独模块的步骤如下：</p><p>① 创建路由模块对应的 .js 文件</p><p>② 调用 express.Router() 函数创建路由对象</p><p>③ 向路由对象上挂载具体的路由</p><p>④ 使用 module.exports 向外共享路由对象</p><p>⑤ 使用 app.use() 函数注册路由模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建路由模块</span></span><br><span class="line"><span class="comment">//1.导入模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">//2.创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"><span class="comment">//3.挂载获取用户列表的路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/user/list&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;获取用户列表&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//4.挂载添加用户列表的路由</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/user/add&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;添加用户列表&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//5.向外导出路由对象</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册路由模块</span></span><br><span class="line"><span class="comment">//1.导入路由模块</span></span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="built_in">require</span>(<span class="string">&#x27;./router/user.js&#x27;</span>)</span><br><span class="line"><span class="comment">//2.使用app.use() 注册路由模块</span></span><br><span class="line">app.<span class="title function_">use</span>(userRouter)</span><br></pre></td></tr></table></figure><p><img src="E:\能放\前端\截图\node\router1.png" alt="router1"></p><h4 id="7-5-中间件"><a href="#7-5-中间件" class="headerlink" title="7.5 中间件"></a>7.5 中间件</h4><h5 id="7-5-1-中间的处理环节"><a href="#7-5-1-中间的处理环节" class="headerlink" title="7.5.1 中间的处理环节"></a>7.5.1 中间的处理环节</h5><p>Express 的中间件，本质上就是一个 function 处理函数</p><p>注意：中间件函数的形参列表中，必须包含 next 参数。而路由处理函数中只包含 req 和 res。</p><p><img src="E:\能放\前端\截图\node\中间件.png" alt="中间件"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn1</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;11111&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line">app.<span class="title function_">use</span>(fn1)</span><br><span class="line"><span class="comment">// 中间件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn2</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;22222&#x27;</span>)</span><br><span class="line">  <span class="comment">// next()</span></span><br><span class="line">&#125;</span><br><span class="line">app.<span class="title function_">use</span>(fn2)</span><br><span class="line"><span class="comment">// 中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;33333&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;开启&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="E:\能放\前端\截图\node\中间件1.png" alt="中间件1"></p><p>没有 next() 将不会往后执行代码</p><h5 id="7-5-2-中间件的5个使用注意事项"><a href="#7-5-2-中间件的5个使用注意事项" class="headerlink" title="7.5.2 中间件的5个使用注意事项"></a>7.5.2 中间件的5个使用注意事项</h5><p>① 一定要在路由之前注册中间件</p><p>② 客户端发送过来的请求，可以连续调用多个中间件进行处理</p><p>③ 执行完中间件的业务代码之后，不要忘记调用 next() 函数</p><p>④ 为了防止代码逻辑混乱，调用 next() 函数后不要再写额外的代码</p><p>⑤ 连续调用多个中间件时，多个中间件之间，共享 req 和 res 对象</p><p>为了方便大家理解和记忆中间件的使用，Express 官方把常见的中间件用法，分成了 5 大类，分别是：</p><p>① 应用级别的中间件</p><p>② 路由级别的中间件</p><p>③ 错误级别的中间件</p><p>④ Express 内置的中间件</p><p>⑤ 第三方的中间件</p><h5 id="7-5-3-错误级别的中间件"><a href="#7-5-3-错误级别的中间件" class="headerlink" title="7.5.3 错误级别的中间件"></a>7.5.3 错误级别的中间件</h5><p>错误级别中间件的作用：专门用来捕获整个项目中发生的异常错误，从而防止项目异常崩溃的问题。</p><p>格式：错误级别中间件的 function 处理函数中，必须有 4 个形参，形参顺序从前到后，分别是 (err, req, res, next)。</p><p>注意：错误级别的中间件，</p><p>必须注册在所有路由之后！<img src="E:\能放\前端\截图\node\错误级别中间件.png" alt="错误级别中间件"></p><h5 id="7-5-4-Express内置的中间件"><a href="#7-5-4-Express内置的中间件" class="headerlink" title="7.5.4 Express内置的中间件"></a>7.5.4 Express内置的中间件</h5><p>自 Express 4.16.0 版本开始，Express 内置了 3 个常用的中间件，极大的提高了 Express 项目的开发效率和体验：</p><p>① express.static 快速托管静态资源的内置中间件，例如： HTML 文件、图片、CSS 样式等（无兼容性）</p><p>② express.json 解析 JSON 格式的请求体数据（有兼容性，仅在 4.16.0+ 版本中可用）</p><p>③ express.urlencoded 解析 URL-encoded 格式的请求体数据（有兼容性，仅在 4.16.0+ 版本中可用）</p><p><img src="E:\能放\前端\截图\node\内置中间件.png" alt="内置中间件"></p><h5 id="7-5-5-第三方的中间件"><a href="#7-5-5-第三方的中间件" class="headerlink" title="7.5.5 第三方的中间件"></a>7.5.5 第三方的中间件</h5><p>非 Express 官方内置的，而是由第三方开发出来的中间件，叫做第三方中间件。在项目中，大家可以按需下载并配置</p><p>第三方中间件，从而提高项目的开发效率。</p><p>例如：在 <a href="mailto:&#x65;&#x78;&#112;&#x72;&#x65;&#115;&#115;&#x40;&#52;&#46;&#x31;&#54;&#x2e;&#48;">&#x65;&#x78;&#112;&#x72;&#x65;&#115;&#115;&#x40;&#52;&#46;&#x31;&#54;&#x2e;&#48;</a> 之前的版本中，经常使用 body-parser 这个第三方中间件，来解析请求体数据。使用步</p><p>骤如下：</p><p>① 运行 npm install body-parser 安装中间件</p><p>② 使用 require 导入中间件</p><p>③ 调用 app.use() 注册并使用中间件</p><p>注意：Express 内置的 express.urlencoded 中间件，就是基于 body-parser 这个第三方中间件进一步封装出来的。</p><h4 id="7-6-Express"><a href="#7-6-Express" class="headerlink" title="7.6 Express"></a>7.6 Express</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">// 配置解析表单数据的中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在路由之前配置 cors</span></span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入路由</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./09_apiRouter&#x27;</span>)</span><br><span class="line"><span class="comment">// 把路由模块注册到app上</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, router)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">85</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器已启动：http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载对应的路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/get&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 通过 res.query 获取客户查询的字符串 发送到服务器数据</span></span><br><span class="line">  <span class="keyword">const</span> query = req.<span class="property">query</span></span><br><span class="line">  <span class="comment">// 调用 res.send() 方法 向客户端响应处理结果</span></span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="comment">// 0:表示处理成功  1:表示处理失败</span></span><br><span class="line">    <span class="attr">status</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 状态描述</span></span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;get请求成功&#x27;</span>,</span><br><span class="line">    <span class="comment">// 需要响应给客户端的数据</span></span><br><span class="line">    <span class="attr">data</span>: query</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// post 接口</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/post&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//  req.body 获取请求体包含的 url-encoded 格式数据</span></span><br><span class="line">  <span class="keyword">const</span> body = req.<span class="property">body</span></span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;post请求&#x27;</span>,</span><br><span class="line">    <span class="attr">body</span>: body</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br></pre></td></tr></table></figure><h5 id="7-6-1-接口的跨域问题"><a href="#7-6-1-接口的跨域问题" class="headerlink" title="7.6.1 接口的跨域问题"></a>7.6.1 接口的跨域问题</h5><p>刚才编写的 GET 和 POST接口，存在一个很严重的问题：不支持跨域请求。</p><p>解决接口跨域问题的方案主要有两种：</p><p>① CORS（主流的解决方案，推荐使用） </p><p>② JSONP（有缺陷的解决方案：只支持 GET 请求）</p><h5 id="7-6-2-使用-cors-中间件解决跨域问题"><a href="#7-6-2-使用-cors-中间件解决跨域问题" class="headerlink" title="7.6.2 使用 cors 中间件解决跨域问题"></a>7.6.2 使用 cors 中间件解决跨域问题</h5><p>cors 是 Express 的一个第三方中间件。通过安装和配置 cors 中间件，可以很方便地解决跨域问题。</p><p>使用步骤分为如下 3 步：</p><p>① 运行 npm install cors 安装中间件</p><p>② 使用 const cors = require('cors') 导入中间件</p><p>③ 在路由之前调用 app.use(cors()) 配置中间件</p><h5 id="7-6-3-CORS-的注意事项"><a href="#7-6-3-CORS-的注意事项" class="headerlink" title="7.6.3 CORS 的注意事项"></a>7.6.3 CORS 的注意事项</h5><p>① CORS 主要在服务器端进行配置。客户端浏览器无须做任何额外的配置，即可请求开启了 CORS 的接口。</p><p>② CORS 在浏览器中有兼容性。只有支持 XMLHttpRequest Level2 的浏览器，才能正常访问开启了 CORS 的服</p><p>务端接口（例如：IE10+、Chrome4+、FireFox3.5+）</p><h5 id="7-6-4-CORS-响应头部-Access-Control-Allow-Origin"><a href="#7-6-4-CORS-响应头部-Access-Control-Allow-Origin" class="headerlink" title="7.6.4  CORS 响应头部 - Access-Control-Allow-Origin"></a>7.6.4  CORS 响应头部 - Access-Control-Allow-Origin</h5><p>响应头部中可以携带一个 Access-Control-Allow-Origin 字段，其语法如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Origin</span>:&lt;origin&gt; | *</span><br></pre></td></tr></table></figure><p>其中，origin 参数的值指定了允许访问该资源的外域 URL。</p><p>例如，下面的字段值将只允许来自 <a href="http://itcast.cn/">http://itcast.cn</a> 的请求：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin:&lt;origin&gt;&#x27;</span>, <span class="string">&#x27;http://itcast.cn&#x27;</span>)</span><br></pre></td></tr></table></figure><p>如果指定了 Access-Control-Allow-Origin 字段的值为通配符 *，表示允许来自任何域的请求，示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin:&lt;origin&gt;&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="7-6-5-CORS-响应头部-Access-Control-Allow-Headers"><a href="#7-6-5-CORS-响应头部-Access-Control-Allow-Headers" class="headerlink" title="7.6.5 CORS 响应头部 - Access-Control-Allow-Headers"></a>7.6.5 CORS 响应头部 - Access-Control-Allow-Headers</h5><p>默认情况下，CORS 仅支持客户端向服务器发送如下的 9 个请求头：</p><p>Accept、Accept-Language、Content-Language、DPR、Downlink、Save-Data、Viewport-Width、Width 、</p><p>Content-Type （值仅限于 text/plain、multipart/form-data、application/x-www-form-urlencoded 三者之一）</p><p>如果客户端向服务器发送了额外的请求头信息，则需要在服务器端，通过 Access-Control-Allow-Headers 对额外</p><p>的请求头进行声明，否则这次请求会失败！</p><p>多个请求头用英文逗号隔开（ , ）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin:&lt;origin&gt;&#x27;</span>, <span class="string">&#x27;Content-Type, X-Custom-Header&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="7-6-6-CORS-响应头部-Access-Control-Allow-Methods"><a href="#7-6-6-CORS-响应头部-Access-Control-Allow-Methods" class="headerlink" title="7.6.6 CORS 响应头部 Access-Control-Allow-Methods"></a>7.6.6 CORS 响应头部 Access-Control-Allow-Methods</h5><p>默认情况下，CORS 仅支持客户端发起 GET、POST、HEAD 请求。</p><p>如果客户端希望通过 PUT、DELETE 等方式请求服务器的资源，则需要在服务器端，通过 Access-Control-Alow-Methods</p><p>来指明实际请求所允许使用的 HTTP 方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只允许 post,get,delete,head 请求方式</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;POST, GET, DELETE, HEAD&#x27;</span>)</span><br><span class="line"><span class="comment">//允许所有的 http 请求方式</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="7-6-7-CORS请求的分类"><a href="#7-6-7-CORS请求的分类" class="headerlink" title="7.6.7 CORS请求的分类"></a>7.6.7 CORS请求的分类</h5><p>客户端在请求 CORS 接口时，根据请求方式和请求头的不同，可以将 CORS 的请求分为两大类，分别是：</p><p>① 简单请求</p><p>② 预检请求</p><h5 id="7-6-8-简单请求"><a href="#7-6-8-简单请求" class="headerlink" title="7.6.8 简单请求"></a>7.6.8 简单请求</h5><p>同时满足以下两大条件的请求，就属于简单请求：</p><p>① 请求方式：GET、POST、HEAD 三者之一</p><p>② HTTP 头部信息不超过以下几种字段：无自定义头部字段、Accept、Accept-Language、Content-Language、DPR、</p><p>Downlink、Save-Data、Viewport-Width、Width 、Content-Type（只有三个值application/x-www-form</p><p>urlencoded、multipart/form-data、text/plain）</p><h5 id="7-6-9-预检请求"><a href="#7-6-9-预检请求" class="headerlink" title="7.6.9 预检请求"></a>7.6.9 预检请求</h5><p>只要符合以下任何一个条件的请求，都需要进行预检请求：</p><p>① 请求方式为 GET、POST、HEAD 之外的请求 Method 类型</p><p>② 请求头中包含自定义头部字段</p><p>③ 向服务器发送了 application/json 格式的数据</p><p>在浏览器与服务器正式通信之前，浏览器会先发送 OPTION 请求进行预检，以获知服务器是否允许该实际请求，所以这一</p><p>次的 OPTION 请求称为“预检请求”。服务器成功响应预检请求后，才会发送真正的请求，并且携带真实数据。</p><p><strong>简单请求和预检请求的区别</strong></p><p>简单请求的特点：客户端与服务器之间只会发生一次请求。</p><p>预检请求的特点：客户端与服务器之间会发生两次请求，OPTION 预检请求成功之后，才会发起真正的请求。</p><h4 id="7-7-JSONP-接口"><a href="#7-7-JSONP-接口" class="headerlink" title="7.7 JSONP 接口"></a>7.7 JSONP 接口</h4><p>概念：浏览器端通过 <script> 标签的 src 属性，请求服务器上的数据，同时，服务器返回一个函数的调用。这种请求数据</p><p>的方式叫做 JSONP。</p><p>特点： </p><p>① JSONP 不属于真正的 Ajax 请求，因为它没有使用 XMLHttpRequest 这个对象。</p><p>② JSONP 仅支持 GET 请求，不支持 POST、PUT、DELETE 等请求。</p><h5 id="7-7-1-创建-JSONP-接口的注意事项"><a href="#7-7-1-创建-JSONP-接口的注意事项" class="headerlink" title="7.7.1 创建 JSONP 接口的注意事项"></a>7.7.1 创建 JSONP 接口的注意事项</h5><p>如果项目中已经配置了 CORS 跨域资源共享，为了防止冲突，必须在配置 CORS 中间件之前声明 JSONP 的接口。否则</p><p>JSONP 接口会被处理成开启了 CORS 的接口。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//优先创建 JSONP 接口 这个接口不会被处理成 cors 接口</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/jsonp&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; &#125;)</span><br><span class="line"><span class="comment">//在配置 cors 中间件 后续的所有接口，都会被处理成 cors 接口</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>())</span><br><span class="line"><span class="comment">//开启cors的接口</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/get&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; &#125;)</span><br></pre></td></tr></table></figure><h5 id="7-7-2-实现-JSONP-接口的步骤"><a href="#7-7-2-实现-JSONP-接口的步骤" class="headerlink" title="7.7.2 实现 JSONP 接口的步骤"></a>7.7.2 实现 JSONP 接口的步骤</h5><p>① 获取客户端发送过来的回调函数的名字</p><p>② 得到要通过 JSONP 形式发送给客户端的数据</p><p>③ 根据前两步得到的数据，拼接出一个函数调用的字符串</p><p>④ 把上一步拼接得到的字符串，响应给客户端的 <script> 标签进行解析执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/jsonp&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//获取客户端发送回调函数的名字</span></span><br><span class="line">  <span class="keyword">const</span> funcName = req.<span class="property">query</span>.<span class="property">callback</span></span><br><span class="line">  <span class="comment">//通过 JSONP 的形式发送客户端数据</span></span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//根据前两步得到的数据 拼接出一个函数调用的字符串</span></span><br><span class="line">  <span class="keyword">const</span> scripStr = <span class="string">`<span class="subst">$&#123;funcName&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>)`</span></span><br><span class="line">  <span class="comment">//把上一步拼接得到的字符串 响应给客户端的 &lt;script&gt; 标签进行解析</span></span><br><span class="line">  res.<span class="title function_">send</span>(scriptStr)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="7-7-3-在网页中使用-jQuery-发起-JSONP-请求"><a href="#7-7-3-在网页中使用-jQuery-发起-JSONP-请求" class="headerlink" title="7.7.3 在网页中使用 jQuery 发起 JSONP 请求"></a>7.7.3 在网页中使用 jQuery 发起 JSONP 请求</h5><p>调用 $.ajax() 函数，提供 JSONP 的配置选项，从而发起 JSONP 请求，示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#btnJSONP&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;127.0.0.1/api/jsonp&#x27;</span>,</span><br><span class="line">    <span class="comment">//表示发起 JSONP 的请求</span></span><br><span class="line">    <span class="attr">dataType</span>:<span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="8-数据库"><a href="#8-数据库" class="headerlink" title="8-数据库"></a>8-数据库</h3><h4 id="8-1-数据库的使用"><a href="#8-1-数据库的使用" class="headerlink" title="8.1 数据库的使用"></a>8.1 数据库的使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 mysql 模块</span></span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"><span class="comment">// 简历数据库连接</span></span><br><span class="line"><span class="keyword">const</span> db = mysql.<span class="title function_">createPool</span>(&#123;</span><br><span class="line">  <span class="comment">// 数据库IP地址</span></span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">  <span class="comment">// 默认端口</span></span><br><span class="line">  <span class="attr">port</span>: <span class="number">3306</span>,</span><br><span class="line">  <span class="comment">// 登录数据库账户</span></span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="comment">// 登录数据库密码</span></span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="comment">// 指定操作那个数据库</span></span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;qianduan48&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试 MySQL 模块是否连接成功</span></span><br><span class="line"><span class="comment">// db.query(&#x27;select 1&#x27;, (err, results) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   if (err) return console.log(err.message)</span></span><br><span class="line"><span class="comment">//   console.log(results)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询数据库表的数据</span></span><br><span class="line">db.<span class="title function_">query</span>(<span class="string">&#x27;select * from student&#x27;</span>, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 查询失败</span></span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">  <span class="comment">// 查询成功</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(results)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入数据</span></span><br><span class="line"><span class="keyword">const</span> studentStr = &#123;</span><br><span class="line">  <span class="attr">stu_id</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">stu_name</span>: <span class="string">&#x27;赵六&#x27;</span>,</span><br><span class="line">  <span class="attr">stu_age</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">stu_sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">  <span class="attr">stu_status</span>: <span class="string">&#x27;在校&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// // 执行sql语句</span></span><br><span class="line"><span class="comment">// const sqlStr = &#x27;insert into student values(?,?,?,?,?)&#x27;</span></span><br><span class="line"><span class="comment">// // 使用数组的形式，依次为？占位符指定具体的值</span></span><br><span class="line"><span class="comment">// db.query(sqlStr, [studentStr.stu_id, studentStr.stu_name, studentStr.stu_age, studentStr.stu_sex, studentStr.stu_status], (err, results) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   if (err) return console.log(err.message)</span></span><br><span class="line"><span class="comment">//   if (results.affectedRows === 1) &#123;</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;数据插入成功&#x27;)</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// 执行sql语句</span></span><br><span class="line"><span class="keyword">const</span> sqlStr = <span class="string">&#x27;insert into student set ?&#x27;</span></span><br><span class="line"><span class="comment">// 使用数组的形式，依次为？占位符指定具体的值</span></span><br><span class="line">db.<span class="title function_">query</span>(sqlStr, [studentStr], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">  <span class="keyword">if</span> (results.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据插入成功&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="8-2-sql语句"><a href="#8-2-sql语句" class="headerlink" title="8.2 sql语句"></a>8.2 sql语句</h4><h5 id="8-2-1-基础"><a href="#8-2-1-基础" class="headerlink" title="8.2.1 基础"></a>8.2.1 基础</h5><ul><li><p>切换数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库的名字;</span><br></pre></td></tr></table></figure></li><li><p>增</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> users (username, password) <span class="keyword">values</span> (<span class="string">&#x27;tl&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> users <span class="keyword">set</span> username<span class="operator">=</span><span class="string">&#x27;tl&#x27;</span>, password <span class="operator">=</span><span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>删</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>改</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> users <span class="keyword">set</span> status <span class="operator">=</span> <span class="number">1</span> <span class="keyword">where</span> username <span class="operator">=</span> <span class="string">&#x27;tl&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>查</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> username, password <span class="keyword">from</span> users;</span><br></pre></td></tr></table></figure></li></ul><h5 id="8-2-2-拓展"><a href="#8-2-2-拓展" class="headerlink" title="8.2.2 拓展"></a>8.2.2 拓展</h5><ul><li><p>where</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">!=</span><span class="number">1</span> <span class="keyword">and</span> status <span class="operator">=</span><span class="number">0</span>;</span><br></pre></td></tr></table></figure></li><li><p>order by</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">desc</span>, status <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure></li><li><p>count</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> users;</span><br></pre></td></tr></table></figure></li><li><p>as</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> total <span class="keyword">from</span> users;<span class="number">8.2</span><span class="number">.3</span> </span><br></pre></td></tr></table></figure></li></ul><h5 id="8-3-2-sql使用"><a href="#8-3-2-sql使用" class="headerlink" title="8.3.2 sql使用"></a>8.3.2 sql使用</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">-- 通过 * 把 users 表中所有的数据查询出来</span><br><span class="line">-- select * <span class="keyword">from</span> users</span><br><span class="line"></span><br><span class="line">-- 从 users 表中把 username 和 password 对应的数据查询出来</span><br><span class="line">-- select username, password <span class="keyword">from</span> users</span><br><span class="line"></span><br><span class="line">-- 向 users 表中，插入新数据，username 的值为 tony stark  password 的值为 <span class="number">098123</span></span><br><span class="line">-- insert into users (username, password) values (<span class="string">&#x27;tony stark&#x27;</span>, <span class="string">&#x27;098123&#x27;</span>)</span><br><span class="line">-- select * <span class="keyword">from</span> users</span><br><span class="line"></span><br><span class="line">-- 将 id 为 <span class="number">4</span> 的用户密码，更新成 <span class="number">888888</span></span><br><span class="line">-- update users set password=<span class="string">&#x27;888888&#x27;</span> where id=<span class="number">4</span></span><br><span class="line">-- select * <span class="keyword">from</span> users</span><br><span class="line"></span><br><span class="line">-- 更新 id 为 <span class="number">2</span> 的用户，把用户密码更新为 admin123  同时，把用户的状态更新为 <span class="number">1</span></span><br><span class="line">-- update users set password=<span class="string">&#x27;admin123&#x27;</span>, status=<span class="number">1</span> where id=<span class="number">2</span></span><br><span class="line">-- select * <span class="keyword">from</span> users</span><br><span class="line"></span><br><span class="line">-- 删除 users 表中， id 为 <span class="number">4</span> 的用户</span><br><span class="line">-- <span class="keyword">delete</span> <span class="keyword">from</span> users where id=<span class="number">4</span></span><br><span class="line">-- select * <span class="keyword">from</span> users</span><br><span class="line"></span><br><span class="line">-- 演示 where 子句的使用</span><br><span class="line">-- select * <span class="keyword">from</span> users where status=<span class="number">1</span></span><br><span class="line">-- select * <span class="keyword">from</span> users where id&gt;=<span class="number">2</span></span><br><span class="line">-- select * <span class="keyword">from</span> users where username&lt;&gt;<span class="string">&#x27;ls&#x27;</span></span><br><span class="line">-- select * <span class="keyword">from</span> users where username!=<span class="string">&#x27;ls&#x27;</span></span><br><span class="line"></span><br><span class="line">-- 使用 <span class="variable constant_">AND</span> 来显示所有状态为<span class="number">0</span>且id小于<span class="number">3</span>的用户</span><br><span class="line">-- select * <span class="keyword">from</span> users where status=<span class="number">0</span> and id&lt;<span class="number">3</span></span><br><span class="line"></span><br><span class="line">-- 使用 or 来显示所有状态为<span class="number">1</span> 或 username 为 zs 的用户</span><br><span class="line">-- select * <span class="keyword">from</span> users where status=<span class="number">1</span> or username=<span class="string">&#x27;zs&#x27;</span></span><br><span class="line"></span><br><span class="line">-- 对users表中的数据，按照 status 字段进行升序排序</span><br><span class="line">-- select * <span class="keyword">from</span> users order by status</span><br><span class="line"></span><br><span class="line">-- 按照 id 对结果进行降序的排序  desc 表示降序排序   asc 表示升序排序（默认情况下，就是升序排序的）</span><br><span class="line">-- select * <span class="keyword">from</span> users order by id desc</span><br><span class="line"></span><br><span class="line">-- 对 users 表中的数据，先按照 status 进行降序排序，再按照 username 字母的顺序，进行升序的排序</span><br><span class="line">-- select * <span class="keyword">from</span> users order by status desc, username asc</span><br><span class="line"></span><br><span class="line">-- 使用 <span class="title function_">count</span>(*) 来统计 users 表中，状态为 <span class="number">0</span> 用户的总数量</span><br><span class="line">-- select <span class="title function_">count</span>(*) <span class="keyword">from</span> users where status=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">-- 使用 <span class="variable constant_">AS</span> 关键字给列起别名</span><br><span class="line">-- select <span class="title function_">count</span>(*) <span class="keyword">as</span> total <span class="keyword">from</span> users where status=<span class="number">0</span></span><br><span class="line">-- select username <span class="keyword">as</span> uname, password <span class="keyword">as</span> upwd <span class="keyword">from</span> users</span><br></pre></td></tr></table></figure><h3 id="9-前后端的身份认证"><a href="#9-前后端的身份认证" class="headerlink" title="9-前后端的身份认证"></a>9-前后端的身份认证</h3><h4 id="9-1-Session-认证机制"><a href="#9-1-Session-认证机制" class="headerlink" title="9.1 Session 认证机制"></a>9.1 Session 认证机制</h4><h5 id="9-1-1-什么是-Cookie"><a href="#9-1-1-什么是-Cookie" class="headerlink" title="9.1.1 什么是 Cookie"></a>9.1.1 什么是 Cookie</h5><p>Cookie 是存储在用户浏览器中的一段不超过 4 KB 的字符串。它由一个名称（Name）、一个值（Value）和其它几个用</p><p>于控制 Cookie 有效期、安全性、使用范围的可选属性组成。</p><p>不同域名下的 Cookie 各自独立，每当客户端发起请求时，会自动把当前域名下所有未过期的 Cookie 一同发送到服务器。</p><p>Cookie的几大特性：</p><p>① 自动发送</p><p>② 域名独立</p><p>③ 过期时限</p><p>④ 4KB 限制</p><h5 id="9-1-2-Cookie-在身份认证中的作用"><a href="#9-1-2-Cookie-在身份认证中的作用" class="headerlink" title="9.1.2 Cookie 在身份认证中的作用"></a>9.1.2 Cookie 在身份认证中的作用</h5><p>客户端第一次请求服务器的时候，服务器通过响应头的形式，向客户端发送一个身份认证的 Cookie，客户端会自动</p><p>将 Cookie 保存在浏览器中。</p><p>随后，当客户端浏览器每次请求服务器的时候，浏览器会自动将身份认证相关的 Cookie，通过请求头的形式发送给</p><p>服务器，服务器即可验明客户端的身份。</p><h5 id="9-1-3-Cookie-不具有安全性"><a href="#9-1-3-Cookie-不具有安全性" class="headerlink" title="9.1.3 Cookie 不具有安全性"></a>9.1.3 Cookie 不具有安全性</h5><p>由于 Cookie 是存储在浏览器中的，而且浏览器也提供了读写 Cookie 的 API，因此 Cookie 很容易被伪造，不具有安全</p><p>性。因此不建议服务器将重要的隐私数据，通过 Cookie 的形式发送给浏览器。</p><h4 id="9-2-什么是-JWT"><a href="#9-2-什么是-JWT" class="headerlink" title="9.2 什么是 JWT"></a>9.2 什么是 JWT</h4><p>JWT（英文全称：JSON Web Token）是目前最流行的跨域认证解决方案。</p><h5 id="9-2-1-JWT-的工作原理"><a href="#9-2-1-JWT-的工作原理" class="headerlink" title="9.2.1 JWT 的工作原理"></a>9.2.1 JWT 的工作原理</h5><p>用户的信息通过 Token 字符串的形式，保存在客户端浏览器中。服务器通过对 Token 字符串进行解析来认证用户的身份。</p><h5 id="9-2-2-JWT-的组成部分"><a href="#9-2-2-JWT-的组成部分" class="headerlink" title="9.2.2 JWT 的组成部分"></a>9.2.2 JWT 的组成部分</h5><p>JWT 通常由三部分组成，分别是 Header（头部）、Payload（有效荷载）、Signature（签名）。三者之间使用英文的“.”分隔。</p><h5 id="9-2-3-JWT-的三个部分各自代表的含义"><a href="#9-2-3-JWT-的三个部分各自代表的含义" class="headerlink" title="9.2.3 JWT 的三个部分各自代表的含义"></a>9.2.3 JWT 的三个部分各自代表的含义</h5><p>JWT 的三个组成部分，从前到后分别是 Header、Payload、Signature。</p><p>其中：</p><p>⚫ Payload 部分才是真正的用户信息，它是用户信息经过加密之后生成的字符串。</p><p>⚫ Header 和 Signature 是安全性相关的部分，只是为了保证 Token 的安全性。</p><h5 id="9-2-4-jwt-了解jwt的使用方式"><a href="#9-2-4-jwt-了解jwt的使用方式" class="headerlink" title="9.2.4 jwt-了解jwt的使用方式"></a>9.2.4 jwt-了解jwt的使用方式</h5><p>问题：</p><ol><li>前端在进行开发的时候，往往是怎样使用jwt的（3点）？<ol><li>客服端往往通过调服务器的登录接口获取token</li><li>客户端收到服务器返回的 JWT 之后，通常会将它储存在 浏览器本地存储空间中。</li><li>此后，客户端调用需要进行用户认证的接口时会在请求头中 带上这个 JWT 的字符串，从而进行身份认证。</li></ol></li></ol><p>思考：</p><ol><li><p>后端需要做哪些事情？</p><ol><li><p>在提供的登录接口，得验证用户名和密码是否合法，如果合法，则返回token(这个token中携带了用户标识)</p></li><li><p>在提供得需要进行用户认证得接口中，得对用户发过来得token做解析，</p><p>要求token是没有过期，而且是合法得，会得到token中隐藏得用户标识</p><p>响应和用户相关的内容</p></li></ol></li></ol><h5 id="9-2-5-jwt-安装并导入jwt相关的包"><a href="#9-2-5-jwt-安装并导入jwt相关的包" class="headerlink" title="9.2.5 jwt-安装并导入jwt相关的包"></a>9.2.5 jwt-安装并导入jwt相关的包</h5><p>问题：</p><ol><li><p>在express中使用jwt需要安装哪两个包？分别有什么用？执行什么命令？</p><ol><li>jsonwebtoken 用于生成 JWT 字符串</li><li>express-jwt 用于将 JWT 字符串解析还原成 JSON 对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install jsonwebtoken express-jwt</span><br></pre></td></tr></table></figure></li></ol><h5 id="9-2-6-jwt-定义secret秘钥"><a href="#9-2-6-jwt-定义secret秘钥" class="headerlink" title="9.2.6 jwt-定义secret秘钥"></a>9.2.6 jwt-定义secret秘钥</h5><p>问题：</p><ol><li><p>为什么需要定义secret秘钥？在哪两个场景中将会使用到secret</p><ul><li><p>为了保证 JWT 字符串的安全性，防止 JWT 字符串在网络传输过程中被别人破解，我们需要专门定义一个用于加密和解密 的 secret 密钥</p><p>① 当生成 JWT 字符串的时候，需要使用 secret 密钥对用户的信息进行加密，最终得到加密好的 JWT 字符串 </p><p>② 当把 JWT 字符串解析还原成 JSON 对象的时候，需要使用 secret 密钥进行解密</p></li></ul></li></ol><h5 id="9-2-7-jwt-调用jsonwebtoken提供的sign方法生成token字符串"><a href="#9-2-7-jwt-调用jsonwebtoken提供的sign方法生成token字符串" class="headerlink" title="9.2.7 jwt-调用jsonwebtoken提供的sign方法生成token字符串"></a>9.2.7 jwt-调用jsonwebtoken提供的sign方法生成token字符串</h5><p>问题：</p><ol><li><p>生成token需要使用谁提供的什么方法？需要指定哪3个参数？</p><ul><li><p>jsonwebtoken提供的sign方法</p></li><li><p>3个参数</p><ul><li>js对象</li><li>密钥</li><li>配置信息，expiresIn是token有效时间</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> token = jwt.<span class="title function_">sign</span>(&#123; <span class="attr">username</span>: userinfo.<span class="property">username</span> &#125;, secretKey, &#123; <span class="attr">expiresIn</span>: <span class="string">&#x27;30s&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h5 id="9-2-8-jwt-将jwt字符串还原为json对象"><a href="#9-2-8-jwt-将jwt字符串还原为json对象" class="headerlink" title="9.2.8 jwt-将jwt字符串还原为json对象"></a>9.2.8 jwt-将jwt字符串还原为json对象</h5><p>问题：</p><ol><li><p>解析token需要配置哪个中间件？配置完这个中间件后会帮我们解析token,并将解析出来的用户信息挂载在req的什么属性上？</p><ul><li>需要配置express-jwt 这个中间件</li><li>只要配置成功了 express-jwt 这个中间件，就可以把解析出来的用户信息，挂载到 req.user 属性上</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意：只要配置成功了 express-jwt 这个中间件，就可以把解析出来的用户信息，挂载到 req.user 属性上</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">expressJWT</span>(&#123; <span class="attr">secret</span>: secretKey &#125;).<span class="title function_">unless</span>(&#123; <span class="attr">path</span>: [<span class="regexp">/^\/api\//</span>] &#125;))</span><br></pre></td></tr></table></figure></li></ol><h5 id="9-2-9-jwt-使用req-user获取用户信息"><a href="#9-2-9-jwt-使用req-user获取用户信息" class="headerlink" title="9.2.9 jwt-使用req.user获取用户信息"></a>9.2.9 jwt-使用req.user获取用户信息</h5><p>问题：</p><ol><li>配置了 express-jwt 这个中间件之后，会把解析出来的用户信息，挂载到 req的什么属性上？<ul><li>req.user</li></ul></li></ol><h5 id="9-2-10-jwt-捕获解析jwt失败后产生的错误"><a href="#9-2-10-jwt-捕获解析jwt失败后产生的错误" class="headerlink" title="9.2.10 jwt-捕获解析jwt失败后产生的错误"></a>9.2.10 jwt-捕获解析jwt失败后产生的错误</h5><p>问题：</p><ol><li><p>哪两种情况下会导致express-jwt中间件解析token失败？</p><ol><li>不合法：token是非法伪造的</li><li>过期：token是正常获取的，但过期了。</li></ol></li><li><p>express-jwt中间件解析token失败后会抛出什么错误异常？我们需要怎样俘获，返回什么结果？</p><ol><li><p>UnauthorizedError</p></li><li><p>使用中间件俘获，返回401的状态码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 这次错误是由 token 解析失败导致的</span></span><br><span class="line">  <span class="keyword">if</span> (err.<span class="property">name</span> === <span class="string">&#x27;UnauthorizedError&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="number">401</span>, &#123;</span><br><span class="line">      <span class="attr">status</span>: <span class="number">401</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;无效的token&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;未知的错误&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>拓展：</p><ol><li>你可以说说有哪些常见的http状态码，各有什么含义吗（面试题）？<ol><li>2xx： 成功<ol><li>200   成功</li><li>201   创建成功</li></ol></li><li>3xx：重定向<ol><li>301：永久重定向</li><li>302：临时重定向</li></ol></li><li>4xx： <strong>客服端的错误</strong><ol><li>400：客服端的错误，请求错误</li><li>401：认证失败：我不知道你是谁</li><li>403：没有权限：我知道你是谁，但是对不起，你没有权限</li><li>404：没找到</li><li>405：请求方式不支持</li></ol></li><li>5xx：<ol><li>500： 服务器的错误</li></ol></li></ol></li></ol><h4 id="9-3-你可以说说你对cookie和session的理解吗？他们之间有什么不同"><a href="#9-3-你可以说说你对cookie和session的理解吗？他们之间有什么不同" class="headerlink" title="9.3 你可以说说你对cookie和session的理解吗？他们之间有什么不同"></a>9.3 你可以说说你对cookie和session的理解吗？他们之间有什么不同</h4><ol><li>cookie的原理：<ol><li>第一次访问登录接口的时候，登录接口的响应头中会包含一个set-cookie的响应头，这个响应头中包含用户的标识</li><li>浏览器在接收到响应之后，会自动的把set-cookie的响应头中的用户标识信息给存储在浏览器的本地存储空间cookie中</li><li>再次访问服务器的时候，浏览器会自动的在请求头中携带cookie信息，服务器对cookie信息进行解析，就能够知道你是谁了</li></ol></li><li>cookie特点：<ol><li>自动发送</li><li>域名独立</li><li>4K限制</li><li>具有时效性</li></ol></li><li>session的原理<ol><li>服务器会给每个客服端开辟一个session的内存空间，来存储用户的关键信息等数据</li><li>每个session的内存空间都拥有不同的标识，这个session内存空间的标识，会通过cookie的形式告诉客服端</li><li>客服端在访问服务器的时候，会在cookie的请求头中携带上session内存空间的标识，后端就会利用session内存空间的标识去找到特定的session存储空间，去把用户的关键信息取出来</li></ol></li><li><strong>他们之间有什么不同</strong><ol><li>session的实现依赖于cookie</li><li>cookie存储在浏览器客服端，session存储在服务器</li><li>cookie是不安全的，cookie里不能放敏感信息，而session是安全的，而session里是可以放敏感信息的。</li></ol></li></ol><h3 id="10-ES6模块化与异步编程高级用法"><a href="#10-ES6模块化与异步编程高级用法" class="headerlink" title="10- ES6模块化与异步编程高级用法"></a>10- ES6模块化与异步编程高级用法</h3><h4 id="10-1-什么是-ES6-模块化规范"><a href="#10-1-什么是-ES6-模块化规范" class="headerlink" title="10.1 什么是 ES6 模块化规范"></a>10.1 什么是 ES6 模块化规范</h4><p>ES6 模块化规范是浏览器端与服务器端通用的模块化开发规范。它的出现极大的降低了前端开发者的模块化学</p><p>习成本，开发者不需再额外学习 AMD、CMD 或 CommonJS 等模块化规范。</p><p>ES6 模块化规范中定义：</p><p>⚫ 每个 js 文件都是一个独立的模块</p><p>⚫ 导入其它模块成员使用 import 关键字</p><p>⚫ 向外共享模块成员使用 export 关键字</p><h5 id="10-1-1-ES6-模块化的基本语法"><a href="#10-1-1-ES6-模块化的基本语法" class="headerlink" title="10.1.1 ES6 模块化的基本语法"></a>10.1.1 ES6 模块化的基本语法</h5><p>ES6 的模块化主要包含如下 3 种用法：</p><p>① 默认导出与默认导入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> 默认导出的成员</span><br><span class="line"><span class="comment">//默认导入</span></span><br><span class="line"><span class="keyword">import</span> 接收名称 <span class="keyword">from</span> <span class="string">&#x27;模块标识符&#x27;</span></span><br></pre></td></tr></table></figure><p>注意：每个模块中，只允许使用唯一的一次 export default，否则会报错！</p><p>② 按需导出与按需导入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按需导出</span></span><br><span class="line"><span class="keyword">export</span> 按需导出的成员</span><br><span class="line"><span class="comment">//按需导入</span></span><br><span class="line"> <span class="keyword">import</span> &#123; s1 &#125; <span class="keyword">from</span> <span class="string">&#x27;模块标识符&#x27;</span></span><br></pre></td></tr></table></figure><p>按需导出与按需导入的注意事项</p><p>1.每个模块中可以使用多次按需导出</p><p>2.按需导入的成员名称必须和按需导出的名称保持一致</p><p>3.按需导入时，可以使用 as 关键字进行重命名</p><p>4.按需导入可以和默认导入一起使用</p><p>③ 直接导入并执行模块中的代码</p><p>如果只想单纯地执行某个模块中的代码，并不需要得到模块中向外共享的成员。此时，可以直接导入并执行模</p><p>块代码，示例代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;模块标识符&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="10-2-Promise"><a href="#10-2-Promise" class="headerlink" title="10.2 Promise"></a>10.2 Promise</h4><h5 id="10-2-1-Promise-的基本概念"><a href="#10-2-1-Promise-的基本概念" class="headerlink" title="10.2.1 Promise 的基本概念"></a>10.2.1 Promise 的基本概念</h5><p>① Promise 是一个构造函数</p><p>⚫ 我们可以创建 Promise 的实例 const p = new Promise()</p><p>⚫ new 出来的 Promise 实例对象，代表一个异步操作</p><p>② Promise.prototype 上包含一个 .then() 方法</p><p>⚫ 每一次 new Promise() 构造函数得到的实例对象，</p><p>⚫ 都可以通过原型链的方式访问到 .then() 方法，例如 p.then()</p><p>③ .then() 方法用来预先指定成功和失败的回调函数</p><p>⚫ p.then(成功的回调函数，失败的回调函数) </p><p>⚫ p.then(result => { }, error => { })</p><p>⚫ 调用 .then() 方法时，成功的回调函数是必选的、失败的回调函数是可选的</p><h5 id="10-2-2-基于-Promise-按顺序读取文件的内容"><a href="#10-2-2-基于-Promise-按顺序读取文件的内容" class="headerlink" title="10.2.2 基于 Promise 按顺序读取文件的内容"></a>10.2.2 基于 Promise 按顺序读取文件的内容</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> thenFS <span class="keyword">from</span> <span class="string">&#x27;then-fs&#x27;</span></span><br><span class="line"></span><br><span class="line">thenFS</span><br><span class="line">  .<span class="title function_">readFile</span>(<span class="string">&#x27;./files/11.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">  <span class="comment">// 捕获11出现错误，后续代码继续执行</span></span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    <span class="keyword">return</span> thenFS.<span class="title function_">readFile</span>(<span class="string">&#x27;./files/2.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    <span class="keyword">return</span> thenFS.<span class="title function_">readFile</span>(<span class="string">&#x27;./files/3.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 捕获catch之前出现的错误，中断后续代码执行</span></span><br><span class="line">  <span class="comment">// .catch((err) =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(err.message)</span></span><br><span class="line">  <span class="comment">// &#125;)</span></span><br></pre></td></tr></table></figure><h5 id="10-2-3-Promise-方法"><a href="#10-2-3-Promise-方法" class="headerlink" title="10.2.3 Promise 方法"></a>10.2.3 Promise 方法</h5><p>Promise.all() 方法会发起并行的 Promise 异步操作，等所有的异步操作全部结束后才会执行下一步的 .then </p><p>操作（等待机制）。</p><p>Promise.race() 方法会发起并行的 Promise 异步操作，只要任何一个异步操作完成，就立即执行下一步的</p><p>.then 操作（赛跑机制）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> thenFs <span class="keyword">from</span> <span class="string">&quot;then-fs&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  thenFs.<span class="title function_">readFile</span>(<span class="string">&#x27;./files/1.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>),</span><br><span class="line">  thenFs.<span class="title function_">readFile</span>(<span class="string">&#x27;./files/2.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>),</span><br><span class="line">  thenFs.<span class="title function_">readFile</span>(<span class="string">&#x27;./files/3.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待 数组中的所有异步操作执行完 再执行 then 并且结果是数组顺序</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>(arr).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赛跑 哪个异步执行的块 就结束 并且拿到快的异步的结果</span></span><br><span class="line"><span class="comment">// Promise.race(arr).then(res =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(res)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br></pre></td></tr></table></figure><h5 id="10-2-4-基于-Promise-封装读文件的方法"><a href="#10-2-4-基于-Promise-封装读文件的方法" class="headerlink" title="10.2.4 基于 Promise 封装读文件的方法"></a>10.2.4 基于 Promise 封装读文件的方法</h5><p>方法的封装要求：</p><p>① 方法的名称要定义为 getFile</p><p>② 方法接收一个形参 fpath，表示要读取的文件的路径</p><p>③ 方法的返回值为 Promise 实例对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFile</span>(<span class="params">path</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(path, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> reject.<span class="property">err</span></span><br><span class="line">      <span class="title function_">resolve</span>(res)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">getFile</span>(<span class="string">&#x27;./files/1.txt&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getFile</span>(<span class="string">&#x27;./files/2.txt&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getFile</span>(<span class="string">&#x27;./files/3.txt&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h4 id="10-3-async-await"><a href="#10-3-async-await" class="headerlink" title="10.3 async/await"></a>10.3 async/await</h4><h5 id="10-3-1-什么是-async-await"><a href="#10-3-1-什么是-async-await" class="headerlink" title="10.3.1 什么是 async/await"></a>10.3.1 什么是 async/await</h5><p>async/await 是 ES8（ECMAScript 2017）引入的新语法，用来简化 Promise 异步操作。在 async/await 出现之前，开发者只能通过链式 .then() 的方式处理 Promise 异步操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> getFn <span class="keyword">from</span> <span class="string">&#x27;then-fs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">getFn</span>(<span class="string">&#x27;./files/1.txt&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> res2 = <span class="keyword">await</span> <span class="title function_">getFn</span>(<span class="string">&#x27;./files/2.txt&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res2)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> res3 = <span class="keyword">await</span> <span class="title function_">getFn</span>(<span class="string">&#x27;./files/3.txt&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>()</span><br></pre></td></tr></table></figure><h5 id="10-3-2-async-await-的使用注意事项"><a href="#10-3-2-async-await-的使用注意事项" class="headerlink" title="10.3.2 async/await 的使用注意事项"></a>10.3.2 async/await 的使用注意事项</h5><p>① 如果在 function 中使用了 await，则 function 必须被 async 修饰</p><p>② 在 async 方法中，第一个 await 之前的代码会同步执行，await 之后的代码会异步执行</p><h4 id="10-4-EventLoop"><a href="#10-4-EventLoop" class="headerlink" title="10.4 EventLoop"></a>10.4 EventLoop</h4><h5 id="10-4-1-JavaScript-是单线程的语言"><a href="#10-4-1-JavaScript-是单线程的语言" class="headerlink" title="10.4.1 JavaScript 是单线程的语言"></a>10.4.1 JavaScript 是单线程的语言</h5><p>JavaScript 是一门单线程执行的编程语言。也就是说，同一时间只能做一件事情。</p><p>单线程执行任务队列的问题：</p><p>如果前一个任务非常耗时，则后续的任务就不得不一直等待，从而导致程序假死的问题。</p><h5 id="10-4-2-同步任务和异步任务"><a href="#10-4-2-同步任务和异步任务" class="headerlink" title="10.4.2 同步任务和异步任务"></a>10.4.2 同步任务和异步任务</h5><p>为了防止某个耗时任务导致程序假死的问题，JavaScript 把待执行的任务分为了两类：</p><p>① 同步任务（synchronous） </p><p>⚫ 又叫做非耗时任务，指的是在主线程上排队执行的那些任务</p><p>⚫ 只有前一个任务执行完毕，才能执行后一个任务</p><p>② 异步任务（asynchronous） </p><p>⚫ 又叫做耗时任务，异步任务由 JavaScript 委托给宿主环境进行执行</p><p>⚫ 当异步任务执行完成后，会通知 JavaScript 主线程执行异步任务的回调函数</p><h5 id="10-4-3-同步任务和异步任务的执行过程"><a href="#10-4-3-同步任务和异步任务的执行过程" class="headerlink" title="10.4.3 同步任务和异步任务的执行过程"></a>10.4.3 同步任务和异步任务的执行过程</h5><p>① 同步任务由 JavaScript 主线程次序执行</p><p>② 异步任务委托给宿主环境执行</p><p>③ 已完成的异步任务对应的回调函数，会被加入到任务队列中等待执行</p><p>④ JavaScript 主线程的执行栈被清空后，会读取任务队列中的回调函数，次序执行</p><p>⑤ JavaScript 主线程不断重复上面的第 4 步</p><h5 id="10-4-5-EventLoop-的基本概念"><a href="#10-4-5-EventLoop-的基本概念" class="headerlink" title="10.4.5 EventLoop 的基本概念"></a>10.4.5 EventLoop 的基本概念</h5><p>JavaScript 主线程从“任务队列”中读取异步任务的回调函数，放到执行栈中依次执行。这个过程是循环不断的，所以整个的这种运行机制又称为 EventLoop（事件循环）。</p><h5 id="10-4-6-宏任务和微任务"><a href="#10-4-6-宏任务和微任务" class="headerlink" title="10.4.6 宏任务和微任务"></a>10.4.6 宏任务和微任务</h5><p>JavaScript 把异步任务又做了进一步的划分，异步任务又分为两类，分别是：</p><p>① 宏任务（macrotask） </p><p>⚫ 异步 Ajax 请求、</p><p>⚫ setTimeout、setInterval、 </p><p>⚫ 文件操作</p><p>⚫ 其它宏任务</p><p>② 微任务（microtask） </p><p>⚫ Promise.then、.catch 和 .finally</p><p>⚫ process.nextTick</p><p>⚫ 其它微任务</p><p><strong>每一个宏任务执行完之后，都会检查是否存在待执行的微任务，如果有，则执行完所有微任务之后，再继续执行下一个宏任务。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Node&quot;&gt;&lt;a href=&quot;#Node&quot; class=&quot;headerlink&quot; title=&quot;Node&quot;&gt;&lt;/a&gt;Node&lt;/h2&gt;&lt;p&gt;Node.js 是一个基于 Chrome v8 引擎的 JavaScript运行环境。&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="资料" scheme="http://example.com/categories/%E8%B5%84%E6%96%99/"/>
    
    
    <category term="Node" scheme="http://example.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>初识(四)</title>
    <link href="http://example.com/2022/11/06/%E5%88%9D%E8%AF%86-%E5%9B%9B/"/>
    <id>http://example.com/2022/11/06/%E5%88%9D%E8%AF%86-%E5%9B%9B/</id>
    <published>2022-11-06T03:43:20.000Z</published>
    <updated>2022-11-06T04:10:23.416Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><h3 id="1-URL地址"><a href="#1-URL地址" class="headerlink" title="1- URL地址"></a>1- URL地址</h3><p>URL(UniformResourceLocator) 中文叫统一资源定位符，用于标识互联网上每个资源的唯一存放位置。</p><p>浏览器只有通过URL地址，才能正确定位资源的存放位置，从而成功访问到对应的资源。</p><h4 id="1-1-URL地址一般由三部分组成："><a href="#1-1-URL地址一般由三部分组成：" class="headerlink" title="1.1 URL地址一般由三部分组成："></a>1.1 URL地址一般由三部分组成：</h4><p>1.客户端与服务器之间的通信协议</p><p>2.存有该资源的服务器名称</p><p>3.资源在服务器上具体的存放位置</p><p><img src="E:\能放\前端\截图\Ajax\URL组成.png" alt="URL组成"></p><p><img src="E:\能放\前端\截图\Ajax\客户端和服务器的通信过程.png" alt="客户端和服务器的通信过程"></p><h4 id="1-2-资源的请求方式"><a href="#1-2-资源的请求方式" class="headerlink" title="1.2 资源的请求方式"></a>1.2 资源的请求方式</h4><p>客户端请求服务器时，请求的方式有很多种，最常见的两种方式分别为get和post请求。</p><p>1.get 请求通常用于获取服务端资源（向服务器要资源）</p><p>例如：根据URL地址,从服务器获取HTML文件、css文件、js文件、图片文件、数据资源等</p><p>2.post请求通常用于向服务器提交数据（往服务器发送资源）</p><p>例如：登录时向服务器提交的登录信息、注册时向服务器提交的注册信息、添加用户时向服务器提交的用户信息等各种数据提交操作。</p><h3 id="2-Ajax"><a href="#2-Ajax" class="headerlink" title="2- Ajax"></a>2- Ajax</h3><p>Ajax全称是：Asynchronous Javascript And XML（异步JavaScript和<a href="https://baike.baidu.com/item/XML/86251">XML</a>）</p><p>通俗的理解：在网页中利用<a href="https://baike.baidu.com/item/XMLHttpRequest">XMLHttpRequest</a> 对象和服务器进行数据交互的方式，就是Ajax。</p><p>Ajax能让我们轻松实线网页与服务器之间的数据交互。</p><p>Ajax的应用场景</p><p>用户名检测：注册用户时，通过Ajax的形式，动态检测用户名是否被占用</p><p>搜索提示：当输入搜索关键字时，通过Ajax的形态，动态加载搜索提示列表</p><h3 id="3-jQuery中的Ajax"><a href="#3-jQuery中的Ajax" class="headerlink" title="3- jQuery中的Ajax"></a>3- jQuery中的Ajax</h3><h4 id="3-1-get-函数的语法"><a href="#3-1-get-函数的语法" class="headerlink" title="3.1 $.get()函数的语法"></a>3.1 $.get()函数的语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">get</span>(url,[data],[callback])</span><br></pre></td></tr></table></figure><p><strong>url:请求的资源地址（string）必写</strong></p><p>data：请求资源期间要携带的参数（object）可写</p><p>callback：请求成功时的回调函数（function）可写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">get</span>(<span class="string">&#x27;http://ajax-base-api-t.itheima.net/api/getbooks&#x27;</span>, &#123; <span class="attr">author</span>: <span class="string">&#x27;曹雪芹&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$.<span class="title function_">get</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;http://ajax-base-api-t.itheima.net/api/getbooks&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1527</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="3-2-post-语法"><a href="#3-2-post-语法" class="headerlink" title="3.2 $.post()语法"></a>3.2 $.post()语法</h4><p>用来发起 post 请求，从而向服务器提交数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">post</span>(url,[data],[callback])</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">post</span>(<span class="string">&quot;http://ajax-base-api-t.itheima.net/api/addbook&quot;</span>,&#123;</span><br><span class="line">      <span class="attr">bookname</span>:<span class="string">&#x27;水浒传&#x27;</span>,</span><br><span class="line">      <span class="attr">author</span>:<span class="string">&#x27;吴承恩&#x27;</span>,</span><br><span class="line">      <span class="attr">publisher</span>:<span class="string">&#x27;北京出版社&#x27;</span></span><br><span class="line">    &#125;,<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">$.<span class="title function_">post</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;http://ajax-base-api-t.itheima.net/api/getbooks&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">bookname</span>:<span class="string">&#x27;水浒传&#x27;</span>,</span><br><span class="line">      <span class="attr">author</span>:<span class="string">&#x27;吴承恩&#x27;</span>,</span><br><span class="line">      <span class="attr">publisher</span>:<span class="string">&#x27;北京出版社&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="3-3-ajax函数"><a href="#3-3-ajax函数" class="headerlink" title="3.3 $.ajax函数"></a>3.3 $.ajax函数</h4><p>是一个功能比较综合的函数，它允许我们对 Ajax 请求进行更详细的配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $.ajax(url,[settings])   settings 配置项（对象）</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//   url 请求的地址</span></span><br><span class="line">    <span class="comment">//   type 请求的方式</span></span><br><span class="line">    <span class="comment">//   data 请求需要的参数</span></span><br><span class="line">    <span class="comment">//   success 成功的回调函数</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;http://ajax-base-api-t.itheima.net/api/getbooks&#x27;</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">5</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="4-接口"><a href="#4-接口" class="headerlink" title="4-接口"></a>4-接口</h3><p>使用 Ajax 请求数据时，被请求的 URL 地址，就叫做 数据接口（简称接口）。同时，每个接口必须有请求方式。</p><h4 id="4-1接口测试"><a href="#4-1接口测试" class="headerlink" title="4.1接口测试"></a>4.1接口测试</h4><p>为了验证接口是否被正常被访问，我们常常需要使用接口测试工具，来对数据接口进行检测</p><p>好处：接口测试工具能让我们在 不写任何代码 的情况下，对接口进行 调用 和 测试常用的就是：PostMan</p><h4 id="4-2接口文档"><a href="#4-2接口文档" class="headerlink" title="4.2接口文档"></a>4.2接口文档</h4><p>接口文档，顾名思义就是 接口的说明文档，它是我们调用接口的依据。好的接口文档包含了对 接口URL，参数 以及 输出内容 的说明，我们参照接口文档就能方便的知道接口的作用，以及接口如何进行调用</p><p>接口文档的组成部分</p><p>接口文档可以包含很多信息，也可以按需进行精简，不过，一个合格的接口文档，应该包含以下6项内容，从而为接口的调用提供依据：</p><p><strong>接口名称：</strong>用来标识各个接口的简单说明，如 登录接口，获取图书列表接口等</p><p><strong>接口URL：</strong>接口的调用地址</p><p><strong>调用方式：</strong>接口的调用方式，如 GET 或者 POST</p><p><strong>参数格式：</strong>接口需要传递的参数，每个参数必须包含 参数名称、参数类型、是否必选、参数说明这4项内容</p><p><strong>响应格式：</strong>接口的返回值的详细描述，一般包含数据名称、数据类型、说明3项内容</p><p><strong>返回示例（可选）：</strong>通过对象的形式，列举服务器返回数据的结构</p><h3 id="5-form表单"><a href="#5-form表单" class="headerlink" title="5-form表单"></a>5-form表单</h3><p>表单在网页中主要负责 <strong>数据采集功能</strong>。HTML中<code>&lt;form&gt;</code>标签，就是用于采集用户输入的信息，并通过 <code>&lt;form&gt; </code>标签的提交操作，把采集的信息提交到服务器端进行处理</p><h4 id="5-1标签的属性"><a href="#5-1标签的属性" class="headerlink" title="5.1标签的属性"></a>5.1标签的属性</h4><h5 id="5-1-1-action-属性"><a href="#5-1-1-action-属性" class="headerlink" title="5.1.1**action** 属性"></a>5.1.1**<code>action</code>** 属性</h5><p>用来规定当提交表单时，<strong>向何处发送表单数据</strong>。</p><p><code>action</code> 属性的值应该是后端提供的一个URL地址，这个URL地址专门负责接收表单提交过来的数据。</p><p>当 <code>&lt;form&gt;</code>表单在未制定 <code>action</code> 属性值的清空下，<code>action</code>的默认值为当前页面的 <code>URL</code> 地址</p><p><strong>注意:</strong> 当提交表单后，会立即跳转到 <code>action</code> 属性指定的 <code>URL</code> 地址。</p><h5 id="5-1-2-target-属性"><a href="#5-1-2-target-属性" class="headerlink" title="5.1.2**target** 属性"></a>5.1.2**<code>target</code>** 属性</h5><p>用来规定 在何处打开 <code>action URL</code></p><p>它的可选值有5个，默认情况下，target的值是 _self，表示在相同的框架中打开 action URL</p><p>_blank：在新窗口打开</p><p>_self：默认。在相同的框架上打开</p><p>_parent：在父框架集中打开</p><p>_top：在整个窗口打开</p><p>framename：在指定的框架上打开</p><h5 id="5-1-3method属性"><a href="#5-1-3method属性" class="headerlink" title="5.1.3method属性"></a>5.1.3<code>method属性</code></h5><p><code>method</code> 属性用来规定 <strong>以何种方式</strong> 把表单数据提交到 action URL</p><p>它的可选值有两个，分别是 <code>get</code> 和 <code>post</code></p><p>默认情况下，<code>method</code>的值为 <code>get</code>， 表示通过<code>URL</code>地址的形式，把表单数据提交到 <code>action URL</code></p><p><strong>注意：</strong></p><ul><li>get 方式适合用来提交<strong>少量的</strong>，<strong>简单的</strong>数据</li><li>post 方式适合用来提交<strong>大量的</strong>，<strong>复杂的</strong>，或包含<strong>文件上传</strong>的数据</li></ul><h5 id="5-1-4enctype属性"><a href="#5-1-4enctype属性" class="headerlink" title="5.1.4enctype属性"></a>5.1.4<code>enctype属性</code></h5><p><code>enctype</code>属性用来规定在 <strong>发送表单数据之前如何对数据进行编码</strong></p><p>它的可选值有三个，默认情况下，<code>enctype</code>的值为 <code>application/x-www-form-urlencoded</code>，表示在发送前编码的所有字符。</p><h5 id="5-1-5表单同步提交的缺点"><a href="#5-1-5表单同步提交的缺点" class="headerlink" title="5.1.5表单同步提交的缺点"></a>5.1.5表单同步提交的缺点</h5><ul><li><code>&lt;form&gt;</code> 表单同步提交后，整个页面会发生跳转，<strong>跳转到 action URL 所指向的地址</strong>，用户体验很差</li><li><code>&lt;form&gt;</code> 表单同步提交后，页面之前的状态和数据会丢失</li></ul><p><strong>如何解决呢？</strong></p><p><strong>表单只复杂采集数据，Ajax负责将数据提交到服务器</strong></p><p>jQuery中监听表单提交事件的两种方式 .submit &#x2F; .on</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="comment">// 绑定提交事件</span></span><br><span class="line">      $(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">submit</span>(<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">        <span class="comment">// 阻止默认行为</span></span><br><span class="line">        <span class="comment">// e.preventDefault()</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>)</span><br><span class="line">        <span class="comment">// 在jQuery中能阻止默认行为和冒泡</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// $(&#x27;form&#x27;).on(&#x27;submit&#x27;,function(e)&#123;</span></span><br><span class="line">      <span class="comment">//   e.preventDefault()</span></span><br><span class="line">      <span class="comment">//   console.log(222)</span></span><br><span class="line">      <span class="comment">// &#125;)</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p><img src="E:\能放\前端\截图\Ajax\jQuery监听表单.png" alt="jQuery监听表单"></p><h5 id="5-1-6阻止表单默认提交行为"><a href="#5-1-6阻止表单默认提交行为" class="headerlink" title="5.1.6阻止表单默认提交行为"></a>5.1.6阻止表单默认提交行为</h5><p>当监听到表单的提交事件以后，可以调用事件对象的 <code>event.preventDefault()</code> 函数，来阻止表单的提交和页面的跳转</p><p><img src="E:\能放\前端\截图\Ajax\阻止默认行为.png" alt="阻止默认行为"></p><h5 id="5-1-7serialize-函数"><a href="#5-1-7serialize-函数" class="headerlink" title="5.1.7serialize() 函数"></a>5.1.7<code>serialize()</code> 函数</h5><p><code>serialize()</code> 函数能够快速获取表单</p><p><strong>注意：</strong>在使用 serialize() 函数快速获取表单数据时，<strong>必须为每个表单元素添加 name 属性</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;form&#x27;</span>).<span class="title function_">serialize</span>()</span><br></pre></td></tr></table></figure><h3 id="6-模板引擎"><a href="#6-模板引擎" class="headerlink" title="6-模板引擎"></a>6-模板引擎</h3><p><strong>模板引擎</strong>，它可以根据程序员指定的 <strong>模板结构</strong> 和 <strong>数据</strong>，自动生成一个完整的HTML页面</p><p>好处</p><ul><li>减少了字符串的拼接操作</li><li>使代码结构更清晰</li><li>使代码更易于阅读与维护</li></ul><p><img src="E:\能放\前端\截图\Ajax\模板引擎.png" alt="模板引擎"></p><h4 id="6-1art-template模板引擎"><a href="#6-1art-template模板引擎" class="headerlink" title="6.1art-template模板引擎"></a>6.1art-template模板引擎</h4><ul><li><p>导入 <code>art-template</code></p><p>在window全局，就多了一个函数，叫做 template(‘模板id’，需要渲染的数据对象)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;./lib/template-web.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/html&quot;</span> id=<span class="string">&quot;t1&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      姓名：&#123;&#123;name&#125;&#125;-年龄：&#123;&#123;age&#125;&#125;-</span></span><br><span class="line"><span class="language-xml">      a是&#123;&#123;data.a&#125;&#125;-b是&#123;&#123;data.b&#125;&#125;-</span></span><br><span class="line"><span class="language-xml">      a+b=&#123;&#123;data.a+data.b&#125;&#125;-</span></span><br><span class="line"><span class="language-xml">      您的性别为：&#123;&#123;sex === 0 ? &#x27;男&#x27; : &#x27;女&#x27;&#125;&#125;-</span></span><br><span class="line"><span class="language-xml">      strong标签&#123;&#123;@strong&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#123;&#123;<span class="keyword">if</span> ifLogin === <span class="literal">true</span>&#125;&#125;</span><br><span class="line">    欢迎&#123;&#123;name&#125;&#125;</span><br><span class="line">    &#123;&#123;<span class="keyword">else</span>&#125;&#125;</span><br><span class="line">    请登录</span><br><span class="line">    &#123;&#123;/<span class="keyword">if</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">    &#123;&#123;<span class="keyword">if</span> isLogin === <span class="literal">true</span>&#125;&#125;</span><br><span class="line">    欢迎&#123;&#123;name&#125;&#125;</span><br><span class="line">    &#123;&#123;/<span class="keyword">if</span>&#125;&#125;</span><br><span class="line">    -----------------------------------------</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;&#123;each arr&#125;&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;$value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;&#123;/each&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;&#123;each arr&#125;&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;$index&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;&#123;/each&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    </span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> obj = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>: <span class="string">&#x27;xm&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">age</span>: <span class="number">18</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">sex</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">a</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">b</span>: <span class="number">2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">arr</span>: [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">isLogin</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">strong</span>: <span class="string">&#x27;&lt;strong&gt;我是strong标签&lt;/strong&gt;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> html = <span class="title function_">template</span>(<span class="string">&#x27;t1&#x27;</span>, obj)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $(<span class="string">&#x27;.main&#x27;</span>).<span class="title function_">html</span>(html)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="6-3过滤器"><a href="#6-3过滤器" class="headerlink" title="6.3过滤器"></a>6.3过滤器</h4><p>过滤器本质就是一个 <code>function</code> 函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;$value.<span class="property">money</span> | fn&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">template.<span class="property">defaults</span>.<span class="property">imports</span>.<span class="property">fn</span> = <span class="keyword">function</span> (<span class="params"> </span>) &#123; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/html&quot;</span> id=<span class="string">&quot;t1&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;&#123;each arr&#125;&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>我的手机是：&#123;&#123;$value.name&#125;&#125;，价格是：&#123;&#123;$value.money | fn&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>    </span></span><br><span class="line"><span class="language-xml">      &#123;&#123;/each&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    template.<span class="property">defaults</span>.<span class="property">imports</span>.<span class="property">fn</span> = <span class="keyword">function</span> (<span class="params">money</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> money.<span class="title function_">toFixed</span>(<span class="number">2</span>) + <span class="string">&#x27;￥&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> obj = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">arr</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&#x27;p20&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">money</span>: <span class="number">1999</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&#x27;p30&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">money</span>: <span class="number">2999</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&#x27;p40&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">money</span>: <span class="number">3999</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&#x27;p50&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">money</span>: <span class="number">4999</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> html = <span class="title function_">template</span>(<span class="string">&#x27;t1&#x27;</span>, obj)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    $(<span class="string">&#x27;.main&#x27;</span>).<span class="title function_">html</span>(html)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="6-4模板引擎的实现原理"><a href="#6-4模板引擎的实现原理" class="headerlink" title="6.4模板引擎的实现原理"></a>6.4模板引擎的实现原理</h4><p>正则与字符串操作</p><h5 id="6-4-1exec函数"><a href="#6-4-1exec函数" class="headerlink" title="6.4.1exec函数"></a>6.4.1exec函数</h5><p><code>exec()</code> 函数用于 <strong>检索字符串</strong> 中的正在表达式的匹配</p><p>如果字符串中又匹配的值，<strong>则返回该匹配值</strong>，否则返回 <strong>null</strong></p><h5 id="6-4-2分组"><a href="#6-4-2分组" class="headerlink" title="6.4.2分组"></a>6.4.2分组</h5><p>正则表达式中 （） 包起来的内容表示一个分组，可以通过分组来 <strong>提取自己想要的内容</strong>，示例代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&lt;div&gt;我是&#123;&#123;name&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/&#123;&#123;([a-zA-Z]+)&#125;&#125;/</span></span><br><span class="line"><span class="keyword">let</span> patternResult = pattern.<span class="title function_">exec</span>(str)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(patternResult)</span><br><span class="line"><span class="comment">//得到 name 相关的分组信息</span></span><br><span class="line"><span class="comment">//[&quot;&#123;&#123;name&#125;&#125;&quot;,&quot;name&quot;,index: 7, input: &quot;&lt;div&gt;我是&#123;&#123;name&#125;&#125;&lt;/div&gt;&quot;, groups: undefined]</span></span><br></pre></td></tr></table></figure><h5 id="6-4-3字符串的-replace-函数"><a href="#6-4-3字符串的-replace-函数" class="headerlink" title="6.4.3字符串的 replace 函数"></a>6.4.3字符串的 replace 函数</h5><p>replace() 函数用于在字符串中 用一些字符 替换 另一些字符的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="string">&#x27;123456&#x27;</span>.<span class="title function_">replace</span>(<span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;abc&#x27;</span>)  <span class="comment">// &#x27;abc456&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// exec 提取出字符串中内容，每次匹配第一项，但是如果不存在正在匹配的内容 null</span></span><br><span class="line">       <span class="comment">// 场景：获取一个数据匹配的正则条件的内容</span></span><br><span class="line">       <span class="comment">// 数组结果 = 正则表达式.exec(被匹配的字符串)</span></span><br><span class="line">       <span class="comment">// test 检测字符串是否包含</span></span><br><span class="line">       <span class="comment">// 场景：判断一个数据是否满足正则条件</span></span><br><span class="line">       <span class="comment">// 布尔值结果 = 正则表达式.test(被匹配的字符串)</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// ? 0||1</span></span><br><span class="line">       <span class="comment">// + &gt;=1</span></span><br><span class="line">       <span class="comment">// * &gt;=0</span></span><br><span class="line">       <span class="keyword">let</span> reg = <span class="regexp">/\d+/</span>;</span><br><span class="line">       <span class="keyword">let</span> str = <span class="string">&#x27;abcaaabc&#x27;</span>;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">exec</span>(str));</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 目标：模拟模板引擎的template.js 完成核心、简单的替换</span></span><br><span class="line">       <span class="comment">// 把模板中的 &#123;&#123;name&#125;&#125; 替换城真正的数据   yj</span></span><br><span class="line">       <span class="comment">// data = &#123;</span></span><br><span class="line">       <span class="comment">//     name:yj</span></span><br><span class="line">       <span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="keyword">const</span> template = <span class="keyword">function</span>(<span class="params">id,data</span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> html = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#&#x27;</span>+id).<span class="property">innerHTML</span>;</span><br><span class="line">            <span class="comment">// console.log(&#x27;temp: &#x27;, temp);</span></span><br><span class="line">            <span class="comment">// 把下面字符串</span></span><br><span class="line">            <span class="comment">// temp = &lt;div&gt;我的名字叫&#123;&#123;name&#125;&#125;，我今年&#123;&#123;age&#125;&#125;岁，我是&#123;&#123;sex&#125;&#125;生&lt;/div&gt;</span></span><br><span class="line">            <span class="comment">// 变成另一个字符串</span></span><br><span class="line">            <span class="comment">// res = 我的名字叫yj，我今年18岁，我是男生</span></span><br><span class="line">            <span class="comment">// console.log(data);</span></span><br><span class="line">            <span class="comment">// data[&#x27;name&#x27;] === yj</span></span><br><span class="line">            <span class="keyword">let</span> reg = <span class="regexp">/&#123;&#123;([0-9a-zA-Z]+)&#125;&#125;/</span>;</span><br><span class="line">            <span class="comment">// exec 如果正则表达式在中间存在() 可以单独的被匹配出来</span></span><br><span class="line">            <span class="comment">// res=reg.exec(temp)</span></span><br><span class="line">            <span class="comment">// console.log(&#x27;res: &#x27;, res);</span></span><br><span class="line">            <span class="comment">// let html = temp.replace(res[0],data[res[1]])</span></span><br><span class="line">            <span class="comment">// console.log(&#x27;html: &#x27;, html);</span></span><br><span class="line">            <span class="comment">// res=reg.exec(html)</span></span><br><span class="line">            <span class="comment">// html = html.replace(res[0],data[res[1]])</span></span><br><span class="line">            <span class="comment">// console.log(&#x27;html: &#x27;, html);</span></span><br><span class="line">            <span class="comment">// res=reg.exec(html)</span></span><br><span class="line">            <span class="comment">// html = html.replace(res[0],data[res[1]])</span></span><br><span class="line">            <span class="comment">// console.log(&#x27;html: &#x27;, html);</span></span><br><span class="line">            <span class="comment">// let res = temp.replace(&#x27;&#123;&#123;name&#125;&#125;&#x27;,&#x27;yj&#x27;)</span></span><br><span class="line">            <span class="comment">// console.log(&#x27;res: &#x27;, res);</span></span><br><span class="line">            <span class="comment">// res = res.replace(&#x27;&#123;&#123;age&#125;&#125;&#x27;,&#x27;18&#x27;)</span></span><br><span class="line">            <span class="comment">// console.log(&#x27;res: &#x27;, res);</span></span><br><span class="line">            <span class="comment">// res = res.replace(&#x27;&#123;&#123;sex&#125;&#125;&#x27;,&#x27;男&#x27;)</span></span><br><span class="line">            <span class="comment">// console.log(&#x27;res: &#x27;, res);</span></span><br><span class="line">            <span class="keyword">while</span>(res=reg.<span class="title function_">exec</span>(html))&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res: &#x27;</span>, res);</span><br><span class="line">                html = html.<span class="title function_">replace</span>(res[<span class="number">0</span>],data[res[<span class="number">1</span>]])</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;html: &#x27;</span>, html);</span><br><span class="line">            <span class="keyword">return</span> html</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="7-XMLHttpRequest的基本使用"><a href="#7-XMLHttpRequest的基本使用" class="headerlink" title="7-XMLHttpRequest的基本使用"></a><code>7-XMLHttpRequest</code>的基本使用</h3><p><code>XMLHttpRequest</code>（简称 <code>xhr</code>）是浏览器提供的 <code>Javascript</code> 对象，通过它，可以<strong>请求服务器上的数据资源</strong>。之</p><p>前所学的 <code>jQuery</code> 中的 Ajax 函数，就是基于 <code>xhr</code> 对象封装出来的</p><h4 id="7-1使用xhr发起GET请求"><a href="#7-1使用xhr发起GET请求" class="headerlink" title="7.1使用xhr发起GET请求"></a>7.1使用<code>xhr</code>发起GET请求</h4><p><strong>步骤</strong></p><ul><li>创建 <code>xhr</code> 对象</li><li>调用 <code>xhr.open()</code> 函数</li><li>调用 <code>xhr.send()</code> 函数</li><li>监听 <code>xhr.onreadystatechange</code> 事件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建 XHR 对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"><span class="comment">// 2. 调用 open 函数</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>)</span><br><span class="line"><span class="comment">// 3. 调用 send 函数</span></span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br><span class="line"><span class="comment">// 4. 监听 onreadystatechange 事件</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">     <span class="comment">// 获取服务器响应的数据</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>XMLHttpRequest</code> 对象的 <code>readyState</code> 属性，用来表示<strong>当前 <code>Ajax</code> 请求所处的状态</strong>。每个 <code>Ajax</code> 请求必然处于以</p><p>下状态中的一个：</p><p><img src="E:\能放\前端\截图\Ajax\xhr属性.png" alt="xhr属性"></p><h4 id="7-2使用xhr发起带参数的GET请求"><a href="#7-2使用xhr发起带参数的GET请求" class="headerlink" title="7.2使用xhr发起带参数的GET请求"></a>7.2使用<code>xhr</code>发起带参数的GET请求</h4><p>使用 <code>xhr</code> 对象发起带参数的 <code>GET</code> 请求时，只需在调用 <code>xhr.open</code> 期间，为 <code>URL</code> 地址指定参数即可：</p><h4 id="查询字符串"><a href="#查询字符串" class="headerlink" title="查询字符串"></a>查询字符串</h4><p><strong>定义：</strong>查询字符串（URL 参数）是指在 URL 的末尾加上用于向服务器发送信息的字符串（变量）。</p><p><strong>格式：</strong>将英文的 <strong>?</strong> 放在<code>URL</code> 的末尾，然后再加上 <strong>参数＝值</strong> ，想加上多个参数的话，使用 <strong>&amp;</strong> 符号进行分隔。以</p><p>这个形式，可以将想要发送给服务器的数据添加到 <code>URL</code> 中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get 不带参数</span></span><br><span class="line">   &#123;</span><br><span class="line">     <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">     xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;http://ajax-base-api-t.itheima.net/api/getbooks&#x27;</span>)</span><br><span class="line">     xhr.<span class="title function_">send</span>()</span><br><span class="line">     xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>)&#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// get 带参数</span></span><br><span class="line">   &#123;</span><br><span class="line">     <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">     xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;http://ajax-base-api-t.itheima.net/api/getbooks?id=3&#x27;</span>)</span><br><span class="line">     xhr.<span class="title function_">send</span>()</span><br><span class="line">     xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>)&#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="GET请求携带参数的本质"><a href="#GET请求携带参数的本质" class="headerlink" title="GET请求携带参数的本质"></a>GET请求携带参数的本质</h4><p>无论使用 <code>$.ajax()</code>，还是使用 <code>$.get()</code>，又或者直接使用 <code>xhr</code> 对象发起 <code>GET</code> 请求，当需要携带参数的时候，本质上，都是直接将参数以查询字符串的形式，追加到 URL 地址的后面，发送到服务器的。</p><p><img src="E:\能放\前端\截图\Ajax\get请求携带参数的本质.png" alt="get请求携带参数的本质"></p><h4 id="7-3-URL编码与解码"><a href="#7-3-URL编码与解码" class="headerlink" title="7.3-URL编码与解码"></a>7.3-URL编码与解码</h4><p><code>URL</code> 地址中，只允许出现英文相关的字母、标点符号、数字，因此，在 <code>URL</code> 地址中不允许出现中文字符。</p><p>如果 URL 中需要包含中文这样的字符，则必须对中文字符进行<strong>编码</strong>（转义）。</p><p><strong>URL编码的原则</strong>：使用安全的字符（没有特殊用途或者特殊意义的可打印字符）去表示那些不安全的字符。</p><p>URL编码原则的通俗理解：使用英文字符去表示非英文字符</p><p>浏览器提供了 <code>URL</code> 编码与解码的 <code>API</code>，分别是：</p><ul><li><code>encodeURI()</code> 编码的函数</li><li><code>decodeURI()</code> 解码的函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> xyj = <span class="string">&#x27;西游记&#x27;</span></span><br><span class="line">    <span class="comment">// 编码</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">encodeURI</span>(xyj))</span><br><span class="line">    <span class="comment">// 解码</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">decodeURI</span>(<span class="string">&#x27;%E8%A5%BF%E6%B8%B8%E8%AE%B0&#x27;</span>))</span><br></pre></td></tr></table></figure><h4 id="7-4使用xhr发起POST请求"><a href="#7-4使用xhr发起POST请求" class="headerlink" title="7.4使用xhr发起POST请求"></a>7.4使用<code>xhr</code>发起<code>POST</code>请求</h4><p><strong>步骤</strong></p><ul><li>创建 <code>xhr</code> 对象</li><li>调用 <code>xhr.open()</code> 函数</li><li><strong>设置 Content-Type 属性</strong>（固定写法）</li><li>调用 <code>xhr.send()</code> 函数，<strong>同时指定要发送的数据</strong></li><li>监听 <code>xhr.onreadystatechange</code> 事件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建 xhr 对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"><span class="comment">// 2. 调用 open 函数</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>)</span><br><span class="line"><span class="comment">// 3. 设置 Content-Type 属性（固定写法）</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class="line"><span class="comment">// 4. 调用 send 函数</span></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&#x27;bookname=水浒传&amp;author=施耐庵&amp;publisher=上海图书出版社&#x27;</span>)</span><br><span class="line"><span class="comment">// 5. 监听事件</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-JSON"><a href="#8-JSON" class="headerlink" title="8-JSON"></a>8-JSON</h3><p>念：**<code>JSON</code> 的英文全称是 <code>JavaScript Object Notation</code>，即“<strong>JavaScript 对象表示法</strong>”。简单来讲，JSON<code>就是</code>Javascript<code>对象和数组的字符串表示法，它使用文本表示一个</code>JS&#96; 对象或数组的信息，因此，</p><p><strong><code>JSON</code> 的本质是字符串</strong>。</p><p><strong>作用：</strong><code>JSON</code> 是一种轻量级的文本数据交换格式，在作用上类似于 <code>XML</code>，专门用于存储和传输数据，但是 <code>JSON</code> 比 <code>XML</code> 更小、更快、更易解析。</p><p><strong>现状：</strong><code>JSON</code> 是在 2001 年开始被推广和使用的数据格式，到现今为止，<code>JSON</code> 已经成为了主流的数据交换格式</p><h4 id="8-1JSON的两种结构"><a href="#8-1JSON的两种结构" class="headerlink" title="8.1JSON的两种结构"></a>8.1<code>JSON</code>的两种结构</h4><p><code>JSON</code> 就是用字符串来表示 <code>Javascript</code> 的对象和数组。所以，<code>JSON</code> 中包含<strong>对象</strong>和<strong>数组</strong>两种结构，通过这</p><p>两种结构的相互嵌套，可以表示各种复杂的数据结构。</p><h5 id="8-1-1对象结构"><a href="#8-1-1对象结构" class="headerlink" title="8.1.1对象结构"></a>8.1.1<strong>对象结构</strong></h5><p>对象结构在 <code>JSON</code> 中表示为 <code>&#123; &#125;</code> 括起来的内容。数据结构为 <code>&#123; key: value, key: value, … &#125;</code> 的键</p><p>值对结构。其中，<code>key</code> 必须是使用英文的双引号包裹的字符串，<code>value</code> 的数据类型可以是<strong>数字、字符串、</strong></p><p><strong>布尔值、null、数组、对象</strong>6种类型。</p><h5 id="8-1-2数组结构"><a href="#8-1-2数组结构" class="headerlink" title="8.1.2数组结构"></a>8.1.2<strong>数组结构</strong></h5><p>数组结构在 <code>JSON</code> 中表示为 <code>[ ]</code> 括起来的内容。数据结构为 <code>[ &quot;java&quot;, &quot;javascript&quot;, 30, true … ]</code> 。</p><p>数组中数据的类型可以是<strong>数字、字符串、布尔值、null、数组、对象</strong>6种类型。</p><h4 id="8-2JSON语法注意事项"><a href="#8-2JSON语法注意事项" class="headerlink" title="8.2JSON语法注意事项"></a>8.2<code>JSON</code>语法注意事项</h4><p>① 属性名必须使用双引号包裹</p><p>② 字符串类型的值必须使用双引号包裹</p><p>③ <code>JSON</code> 中不允许使用单引号表示字符串</p><p>④ <code>JSON</code> 中不能写注释</p><p>⑤ <code>JSON</code> 的最外层必须是对象或数组格式</p><p>⑥ 不能使用 <code>undefined</code> 或函数作为 <code>JSON</code> 的值</p><p><strong><code>JSON</code> 的作用：</strong>在计算机与网络之间存储和传输数据。</p><p><strong><code>JSON</code> 的本质：</strong>用字符串来表示 <code>Javascript</code> 对象数据或数组数据</p><h4 id="8-3JSON和JS对象的关系"><a href="#8-3JSON和JS对象的关系" class="headerlink" title="8.3JSON和JS对象的关系"></a>8.3<code>JSON</code>和<code>JS</code>对象的关系</h4><p><code>JSON</code> 是 <code>JS</code> 对象的字符串表示法，它使用文本表示一个 <code>JS</code> 对象的信息，本质是一个字符串。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是一个对象</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">a</span>: <span class="string">&#x27;Hello&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;world&#x27;</span>&#125;</span><br><span class="line"><span class="comment">//这是一个JSON字符串，本质就是一个字符串</span></span><br><span class="line"><span class="keyword">const</span> json = <span class="string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="8-4JSON和JS对象的互转"><a href="#8-4JSON和JS对象的互转" class="headerlink" title="8.4JSON和JS对象的互转"></a>8.4<code>JSON</code>和<code>JS</code>对象的互转</h4><p>要实现从 <code>JSON</code> 字符串转换为 <code>JS</code> 对象，使用 <code>JSON.parse()</code> 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现从JSON字符串转换为JS对象，使用JSON.parse()方法</span></span><br><span class="line">    <span class="keyword">const</span> jsonStr = <span class="string">&#x27;&#123;&quot;a&quot;:&quot;Hello&quot;,&quot;b&quot;:&quot;world&quot;&#125;&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonStr))</span><br></pre></td></tr></table></figure><p>要实现从 <code>JS</code> 对象转换为 <code>JSON</code> 字符串，使用 <code>JSON.stringify()</code> 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现从JS对象转换为JSON字符串，使用JSON.stringify()方法</span></span><br><span class="line">    <span class="keyword">const</span> json = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;<span class="attr">a</span>:<span class="string">&#x27;hello&#x27;</span>,<span class="attr">b</span>:<span class="string">&#x27;world&#x27;</span>&#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(json)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myjson = &#123;</span><br><span class="line">      <span class="string">&quot;name&quot;</span> : <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">      <span class="string">&quot;age&quot;</span> : <span class="number">18</span>,</span><br><span class="line">      <span class="string">&quot;arr&quot;</span> : [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对象变成JSON字符串</span></span><br><span class="line">    <span class="keyword">let</span> json = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(myjson)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(json)</span><br><span class="line">    <span class="comment">// json字符串变成对象</span></span><br><span class="line">    <span class="keyword">let</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(json)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure><p>应用场景</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>)</span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> xhr.<span class="property">responseText</span>)</span><br><span class="line">    <span class="keyword">var</span> result = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-5序列化和反序列化"><a href="#8-5序列化和反序列化" class="headerlink" title="8.5序列化和反序列化"></a>8.5序列化和反序列化</h4><p>把<strong>数据对象</strong> <strong>转换为</strong> <strong>字符串</strong>的过程，叫做<strong>序列化</strong>，例如：调用 <code>JSON.stringify()</code> 函数的操作，叫做 <code>JSON</code> 序列化。</p><p>把<strong>字符串</strong> <strong>转换为</strong> <strong>数据对象</strong>的过程，叫做<strong>反序列化</strong>，例如：调用 <code>JSON.parse()</code> 函数的操作，叫做 <code>JSON</code> 反序列化。</p><h4 id="8-6封装自己的Ajax函数"><a href="#8-6封装自己的Ajax函数" class="headerlink" title="8.6封装自己的Ajax函数"></a>8.6封装自己的Ajax函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myAjax</span>(<span class="params">options</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(options)</span><br><span class="line">      <span class="comment">// 准备数据</span></span><br><span class="line">      <span class="keyword">let</span> &#123; url, tyep, data, success &#125; = options</span><br><span class="line">      <span class="comment">// 转换type 为大写</span></span><br><span class="line">      type = tyep.<span class="title function_">toLocaleUpperCase</span>()</span><br><span class="line">      <span class="comment">// data 数据处理</span></span><br><span class="line">      <span class="keyword">let</span> arr = []</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">        arr.<span class="title function_">push</span>(key + <span class="string">&#x27;=&#x27;</span> + data[key])</span><br><span class="line">      &#125;</span><br><span class="line">      data = arr.<span class="title function_">join</span>(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">      <span class="comment">// 发起原生的请求 判断get和post</span></span><br><span class="line">      <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">      <span class="keyword">if</span> (tyep === <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get请求&#x27;</span>)</span><br><span class="line">        xhr.<span class="title function_">open</span>(tyep, url + <span class="string">&#x27;?&#x27;</span> + data)</span><br><span class="line">        xhr.<span class="title function_">send</span>()</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;post 请求&#x27;</span>)</span><br><span class="line">        xhr.<span class="title function_">open</span>(tyep, url)</span><br><span class="line">        xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class="line">        xhr.<span class="title function_">send</span>(data)</span><br><span class="line">      &#125;</span><br><span class="line">      xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">response</span>))</span><br><span class="line">          <span class="comment">// 必须 存在 success 并且还是函数</span></span><br><span class="line">          <span class="keyword">typeof</span> success === <span class="string">&#x27;function&#x27;</span> &amp;&amp; <span class="title function_">success</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">response</span>))</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 调用</span></span><br><span class="line">    <span class="title function_">myAjax</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;http://ajax-base-api-t.itheima.net/api/addbook&#x27;</span>,</span><br><span class="line">      <span class="attr">tyep</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">bookname</span>: <span class="string">&#x27;西游记2&#x27;</span>,</span><br><span class="line">        <span class="attr">author</span>: <span class="string">&#x27;666&#x27;</span>,</span><br><span class="line">        <span class="attr">publisher</span>: <span class="string">&#x27;48期&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="8-7设置HTTP请求时限"><a href="#8-7设置HTTP请求时限" class="headerlink" title="8.7设置HTTP请求时限"></a>8.7设置<code>HTTP</code>请求时限</h4><p>有时，<code>Ajax</code> 操作很耗时，而且无法预知要花多少时间。如果网速很慢，用户可能要等很久。新版本的 <code>XMLHttpRequest</code> 对象，增加了 <code>timeout</code> 属性，可以设置 <code>HTTP</code> 请求的时限：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">    <span class="comment">// 当前时间</span></span><br><span class="line">    <span class="keyword">let</span> starTime = +<span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(starTime)</span><br><span class="line">    <span class="comment">// 超时限制</span></span><br><span class="line">    xhr.<span class="property">timeout</span> = <span class="number">52</span></span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://ajax-base-api-t.itheima.net/api/getbooks&#x27;</span>)</span><br><span class="line">    xhr.<span class="title function_">send</span>()</span><br><span class="line">    <span class="comment">// 超时判断</span></span><br><span class="line">    xhr.<span class="property">ontimeout</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求超时&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">response</span>))</span><br><span class="line">        <span class="comment">// 成功后当前时间</span></span><br><span class="line">        <span class="keyword">let</span> endTime = +<span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(endTime)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="8-8FormData对象管理表单数据"><a href="#8-8FormData对象管理表单数据" class="headerlink" title="8.8FormData对象管理表单数据"></a>8.8<code>FormData</code>对象管理表单数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;uname&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;age&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;sex&quot;&gt;</span><br><span class="line">    &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    let btn = document.querySelector(&#x27;button&#x27;)</span><br><span class="line">    btn.onclick = function (e) &#123;</span><br><span class="line">      // 方法1</span><br><span class="line">      // let data = new FormData(document.querySelector(&#x27;form&#x27;))</span><br><span class="line">      // let xhr = new XMLHttpRequest()</span><br><span class="line">      // xhr.open(&#x27;post&#x27;, &#x27;http://ajax-base-api-t.itheima.net/api/formdata&#x27;)</span><br><span class="line">      // xhr.send()</span><br><span class="line">      // xhr.onreadystatechange = function () &#123;</span><br><span class="line">      //   if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123;</span><br><span class="line">      //     console.log(JSON.parse(xhr.response))</span><br><span class="line">      //   &#125;</span><br><span class="line">      // &#125;</span><br><span class="line"></span><br><span class="line">      // 方法2</span><br><span class="line">      let data2 = new FormData(document.querySelector(&#x27;form&#x27;))</span><br><span class="line">      data2.append(&#x27;id&#x27;, 1)</span><br><span class="line">      data2.append(&#x27;iphone&#x27;, 6666666)</span><br><span class="line">      data2.append(&#x27;wx&#x27;, 8888888)</span><br><span class="line">      let xhr2 = new XMLHttpRequest()</span><br><span class="line">      xhr2.open(&#x27;post&#x27;, &#x27;http://ajax-base-api-t.itheima.net/api/formdata&#x27;)</span><br><span class="line">      xhr2.send(data2)</span><br><span class="line">      xhr2.onreadystatechange = function () &#123;</span><br><span class="line">        if (xhr2.readyState === 4 &amp;&amp; xhr2.status === 200) &#123;</span><br><span class="line">          console.log(JSON.parse(xhr2.response))</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      e.preventDefault()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="8-9上传文件"><a href="#8-9上传文件" class="headerlink" title="8.9上传文件"></a>8.9上传文件</h4><p>新版 <code>XMLHttpRequest</code> 对象，不仅可以发送文本信息，还可以上传文件。</p><p><strong>实现步骤：</strong></p><p>① 定义 <code>UI</code> 结构</p><p>② 验证是否选择了文件</p><p>③ 向 <code>FormData</code> 中追加文件</p><p>④ 使用 <code>xhr</code> 发起上传文件的请求</p><p>⑤ 监听 <code>onreadystatechange</code> 事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;form&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;avatar&quot; id=&quot;file&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;上传&quot; id=&quot;btn&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;&quot; alt=&quot;&quot;&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // 1.点击按钮</span><br><span class="line">    // 2.收集上传文件</span><br><span class="line">    // 3.发起请求</span><br><span class="line">    // 4.显示上传成功的图片</span><br><span class="line">    let btn = document.querySelector(&#x27;#btn&#x27;)</span><br><span class="line">    btn.onclick = function () &#123;</span><br><span class="line">      // console.log(1)</span><br><span class="line">      // 获取方法1</span><br><span class="line">      let data = new FormData(document.querySelector(&#x27;form&#x27;))</span><br><span class="line"></span><br><span class="line">      // console.log(data)</span><br><span class="line">      // let file = document.querySelector(&#x27;#file&#x27;)</span><br><span class="line">      // console.dir(file)</span><br><span class="line">      // 获取方法2</span><br><span class="line">      // let img = document.querySelector(&#x27;#file&#x27;).files[0]</span><br><span class="line">      // console.log(img)</span><br><span class="line">      // let data = new FormData()</span><br><span class="line">      // data.append(&#x27;avatar&#x27;, img)</span><br><span class="line"></span><br><span class="line">      let xhr = new XMLHttpRequest()</span><br><span class="line">      xhr.open(&#x27;post&#x27;, &#x27;http://ajax-base-api-t.itheima.net/api/upload/avatar&#x27;)</span><br><span class="line">      xhr.send(data)</span><br><span class="line">      xhr.onreadystatechange = function () &#123;</span><br><span class="line">        if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123;</span><br><span class="line">          let res = JSON.parse(xhr.response)</span><br><span class="line">          // console.log(JSON.parse(xhr.response))</span><br><span class="line">          console.log(res)</span><br><span class="line">          if (res.status !== 200) return alert(&#x27;网络异常&#x27;)</span><br><span class="line">          let myimg = document.querySelector(&#x27;img&#x27;)</span><br><span class="line">          myimg.src = &#x27;http://ajax-base-api-t.itheima.net&#x27; + res.url</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="8-10显示文件上传进度"><a href="#8-10显示文件上传进度" class="headerlink" title="8.10显示文件上传进度"></a>8.10显示文件上传进度</h4><p>计算文件上传进度</p><p>新版本的 <code>XMLHttpRequest</code> 对象中，可以通过监听 <code>xhr.upload.onprogress</code> 事件，来获取到文件的上传进度。语法格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 XHR 对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"><span class="comment">// 监听 xhr.upload 的 onprogress 事件</span></span><br><span class="line">xhr.<span class="property">upload</span>.<span class="property">onprogress</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">     <span class="comment">// e.lengthComputable 是一个布尔值，表示当前上传的资源是否具有可计算的长度</span></span><br><span class="line">     <span class="keyword">if</span> (e.<span class="property">lengthComputable</span>) &#123;</span><br><span class="line">         <span class="comment">// e.loaded 已传输的字节</span></span><br><span class="line">         <span class="comment">// e.total 需传输的总字节</span></span><br><span class="line">         <span class="keyword">var</span> percentComplete = <span class="title class_">Math</span>.<span class="title function_">ceil</span>((e.<span class="property">loaded</span> / e.<span class="property">total</span>) * <span class="number">100</span>)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>导入需要的库</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./lib/bootstrap.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>基于<code>Bootstrap</code>渲染进度条</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 进度条 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 500px; margin: 10px 0;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar progress-bar-info progress-barstriped active&quot;</span> <span class="attr">id</span>=<span class="string">&quot;percent&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 0%&quot;</span>&gt;</span></span><br><span class="line">    0%</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>动态设置到进度条上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="property">upload</span>.<span class="property">onprogress</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (e.<span class="property">lengthComputable</span>) &#123;</span><br><span class="line">         <span class="comment">// 1. 计算出当前上传进度的百分比</span></span><br><span class="line">         <span class="keyword">var</span> percentComplete = <span class="title class_">Math</span>.<span class="title function_">ceil</span>((e.<span class="property">loaded</span> / e.<span class="property">total</span>) * <span class="number">100</span>)</span><br><span class="line">         $(<span class="string">&#x27;#percent&#x27;</span>)</span><br><span class="line">         <span class="comment">// 2. 设置进度条的宽度</span></span><br><span class="line">         .<span class="title function_">attr</span>(<span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;width:&#x27;</span> + percentComplete + <span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">         <span class="comment">// 3. 显示当前的上传进度百分比</span></span><br><span class="line">         .<span class="title function_">html</span>(percentComplete + <span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>监听上传完成的事件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="property">upload</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     $(<span class="string">&#x27;#percent&#x27;</span>)</span><br><span class="line">     <span class="comment">// 移除上传中的类样式</span></span><br><span class="line">     .<span class="title function_">removeClass</span>()</span><br><span class="line">     <span class="comment">// 添加上传完成的类样式</span></span><br><span class="line">     .<span class="title function_">addClass</span>(<span class="string">&#x27;progress-bar progress-bar-success&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>加载圈</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;form action=&quot;&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; id=&quot;file&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; id=&quot;btn&quot; value=&quot;立即上传&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;./loading.gif&quot; alt=&quot;&quot; style=&quot;display: none;&quot;&gt;</span><br><span class="line">    &lt;script src=&quot;./lib/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      $(function () &#123;</span><br><span class="line">        // 全局 .ajaxStart / .ajaxStop</span><br><span class="line">        $(document).ajaxStart(function () &#123;</span><br><span class="line">          $(&#x27;img&#x27;).show()</span><br><span class="line">        &#125;)</span><br><span class="line">        $(document).ajaxStop(function () &#123;</span><br><span class="line">          $(&#x27;img&#x27;).hide()</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        $(&#x27;#btn&#x27;).click(function () &#123;</span><br><span class="line">          let data = new FormData(document.querySelector(&#x27;form&#x27;))</span><br><span class="line">          $.ajax(&#123;</span><br><span class="line">            url: &#x27;http://ajax-base-api-t.itheima.net/api/upload/avatar&#x27;,</span><br><span class="line">            type: &#x27;post&#x27;,</span><br><span class="line">            data: data,</span><br><span class="line">            contentType: false,</span><br><span class="line">            processData: false,</span><br><span class="line">            // 局部 beforeSend()  / complete()</span><br><span class="line">            beforeSend() &#123;</span><br><span class="line">              console.log(&#x27;请求发起&#x27;);</span><br><span class="line">            &#125;,</span><br><span class="line">            complete() &#123;</span><br><span class="line">              console.log(&#x27;请求结束&#x27;);</span><br><span class="line">            &#125;,</span><br><span class="line">            success(res) &#123;</span><br><span class="line">              console.log(res)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="8-11axios"><a href="#8-11axios" class="headerlink" title="8.11axios"></a>8.11<code>axios</code></h4><p><code>Axios</code> 是专注于<strong>网络数据请求</strong>的库。</p><p>相比于原生的 <code>XMLHttpRequest</code> 对象，<code>axios</code> <strong>简单易用</strong>。</p><p>相比于 <code>jQuery</code>，<code>axios</code> 更加<strong>轻量化</strong>，只专注于网络数据请求。</p><h5 id="8-11-1axios发起GET请求"><a href="#8-11-1axios发起GET请求" class="headerlink" title="8.11.1axios发起GET请求"></a>8.11.1<code>axios</code>发起GET请求</h5><p><code>axios</code> 发起 <code>get</code> 请求的语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;url&#x27;</span>, &#123; <span class="attr">params</span>: &#123; <span class="comment">/*参数*/</span> &#125; &#125;).<span class="title function_">then</span>(callback)</span><br></pre></td></tr></table></figure><p><strong>具体的请求示例如下：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求的 URL 地址</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;http://www.liulongbin.top:3006/api/get&#x27;</span></span><br><span class="line"><span class="comment">// 请求的参数对象</span></span><br><span class="line"><span class="keyword">var</span> paramsObj = &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line"><span class="comment">// 调用 axios.get() 发起 GET 请求</span></span><br><span class="line">axios.<span class="title function_">get</span>(url, &#123; <span class="attr">params</span>: paramsObj &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">     <span class="comment">// res.data 是服务器返回的数据</span></span><br><span class="line">     <span class="keyword">var</span> result = res.<span class="property">data</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="8-11-2axios发起POST请求"><a href="#8-11-2axios发起POST请求" class="headerlink" title="8.11.2axios发起POST请求"></a>8.11.2<code>axios</code>发起<code>POST</code>请求</h5><p><code>axios</code> 发起 <code>post</code> 请求的语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;url&#x27;</span>, &#123; <span class="comment">/*参数*/</span> &#125;).<span class="title function_">then</span>(callback)</span><br></pre></td></tr></table></figure><p><strong>具体的请求示例如下：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求的 URL 地址</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span></span><br><span class="line"><span class="comment">// 要提交到服务器的数据</span></span><br><span class="line"><span class="keyword">var</span> dataObj = &#123; <span class="attr">location</span>: <span class="string">&#x27;北京&#x27;</span>, <span class="attr">address</span>: <span class="string">&#x27;顺义&#x27;</span> &#125;</span><br><span class="line"><span class="comment">// 调用 axios.post() 发起 POST 请求</span></span><br><span class="line">axios.<span class="title function_">post</span>(url, dataObj).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">     <span class="comment">// res.data 是服务器返回的数据</span></span><br><span class="line">     <span class="keyword">var</span> result = res.<span class="property">data</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="8-11-3直接使用axios发起请求"><a href="#8-11-3直接使用axios发起请求" class="headerlink" title="8.11.3直接使用axios发起请求"></a>8.11.3直接使用<code>axios</code>发起请求</h5><p><code>axios</code> 也提供了类似于 <code>jQuery</code> 中 <code>$.ajax()</code> 的函数，语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line"> <span class="attr">method</span>: <span class="string">&#x27;请求类型&#x27;</span>,</span><br><span class="line"> <span class="attr">url</span>: <span class="string">&#x27;请求的URL地址&#x27;</span>,</span><br><span class="line"> <span class="attr">data</span>: &#123; <span class="comment">/* POST数据 */</span> &#125;,</span><br><span class="line"> <span class="attr">params</span>: &#123; <span class="comment">/* GET参数 */</span> &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(callback)</span><br></pre></td></tr></table></figure><p><strong>发起get请求</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn3&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> url = <span class="string">&#x27;http://www.liulongbin.top:3006/api/get&#x27;</span></span><br><span class="line">      <span class="keyword">var</span> paramsData = &#123; <span class="attr">name</span>: <span class="string">&#x27;钢铁侠&#x27;</span>, <span class="attr">age</span>: <span class="number">35</span> &#125;</span><br><span class="line">      <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: url,</span><br><span class="line">        <span class="attr">params</span>: paramsData</span><br><span class="line">      &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>发起post请求</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn4&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;娃哈哈&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">      <span class="attr">gender</span>: <span class="string">&#x27;女&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="9-同源策略"><a href="#9-同源策略" class="headerlink" title="9-同源策略"></a>9-同源策略</h3><h4 id="9-1同源策略（英文全称-Same-origin-policy）"><a href="#9-1同源策略（英文全称-Same-origin-policy）" class="headerlink" title="9.1同源策略（英文全称 Same origin policy）"></a><strong>9.1同源策略</strong>（英文全称 Same origin policy）</h4><p>是<strong>浏览器</strong>提供的一个<strong>安全功能</strong></p><p><strong><code>MDN</code> 官方给定的概念</strong>：同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这</p><p>是一个用于隔离潜在恶意文件的重要安全机制</p><p>通俗的理解：浏览器规定，A 网站的 JavaScript，不允许和非同源的网站 C 之间，进行资源的交互，例如：</p><p>① 无法读取非同源网页的 Cookie、LocalStorage 和 IndexedDB</p><p>② 无法接触非同源网页的 DOM</p><p>③ 无法向非同源地址发送 Ajax 请求</p><h4 id="9-2跨域"><a href="#9-2跨域" class="headerlink" title="9.2跨域"></a>9.2跨域</h4><p><strong>同源</strong>指的是两个 URL 的协议、域名、端口一致，反之，则是<strong>跨域</strong></p><p>出现跨域的根本原因：<strong>浏览器的同源策略</strong>不允许非同源的 URL 之间进行资源的交互</p><p><strong>注意：</strong>浏览器允许发起跨域请求，但是，跨域请求回来的数据，会被浏览器拦截，无法被页面获取到！</p><h4 id="9-3如何实现跨域数据请求"><a href="#9-3如何实现跨域数据请求" class="headerlink" title="9.3如何实现跨域数据请求"></a>9.3如何实现跨域数据请求</h4><p>现如今，实现跨域数据请求，最主要的两种解决方案，分别是 <code>JSONP</code> 和 <code>CORS</code>。</p><p><strong><code>JSONP</code>：</strong>出现的早，兼容性好（兼容低版本IE）。是前端程序员为了解决跨域问题，被迫想出来的一种临时解决方案。<strong>缺点</strong>是只支持 <code>GET</code> 请求，不支持 <code>POST</code> 请求。</p><p><strong><code>CORS</code>：</strong>出现的较晚，它是 <code>W3C</code> 标准，属于跨域 <code>Ajax</code> 请求的根本解决方案。支持 <code>GET</code> 和 <code>POST</code> 请求。<strong>缺点</strong>是不兼容某些低版本的浏览器</p><h4 id="9-4JSONP"><a href="#9-4JSONP" class="headerlink" title="9.4JSONP"></a>9.4<code>JSONP</code></h4><p><code>JSONP</code> (<code>JSON with Padding</code>) 是 <code>JSON</code> 的一种“使用模式”，可用于解决主流浏览器的跨域数据访问的问题。</p><h5 id="9-4-1JSONP的实现原理"><a href="#9-4-1JSONP的实现原理" class="headerlink" title="9.4.1JSONP的实现原理"></a>9.4.1<code>JSONP</code>的实现原理</h5><p>由于浏览器同源策略的限制，网页中无法通过 Ajax 请求非同源的接口数据。但是 <code>&lt;script&gt;</code> 标签不受浏览器同</p><p>源策略的影响，可以通过 <code>src</code> 属性，请求非同源的 <code>js</code> 脚本。</p><p>因此，<code>JSONP</code> 的实现原理，就是通过 <code>&lt;script&gt;</code> 标签的 <code>src</code> 属性，请求跨域的数据接口，并通过<strong>函数调用</strong>的形式，接收跨域接口响应回来的数据</p><h5 id="9-4-2自己实现一个简单的JSONP"><a href="#9-4-2自己实现一个简单的JSONP" class="headerlink" title="9.4.2自己实现一个简单的JSONP"></a>9.4.2自己实现一个简单的<code>JSONP</code></h5><p>定义一个<code>success</code>回调函数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">success</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取到了data数据：&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过 <code>&lt;script&gt;</code> 标签，请求接口数据：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://ajax.frontend.itheima.net:3006/api/jsonp?callback=success&amp;name=zs&amp;a</span></span></span><br><span class="line"><span class="string"><span class="tag">ge=20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="9-4-3JSONP的缺点"><a href="#9-4-3JSONP的缺点" class="headerlink" title="9.4.3JSONP的缺点"></a>9.4.3<code>JSONP</code>的缺点</h5><p>由于 <code>JSONP</code> 是通过 <code>&lt;script&gt;</code> 标签的 <code>src</code> 属性，来实现跨域数据获取的，所以，<code>JSONP</code> 只支持 <code>GET</code> 数据请求，不支持 POST 请求。</p><p><strong>注意：</strong> <strong><code>JSONP</code> 和 Ajax 之间没有任何关系</strong>，不能把 <code>JSONP</code> 请求数据的方式叫做 Ajax，因为 <code>JSONP</code> 没有用到</p><p><code>XMLHttpRequest</code> 这个对象</p><h5 id="9-4-4jQuery中的JSONP"><a href="#9-4-4jQuery中的JSONP" class="headerlink" title="9.4.4jQuery中的JSONP"></a>9.4.4<code>jQuery</code>中的<code>JSONP</code></h5><p><code>jQuery</code> 提供的 <code>$.ajax()</code> 函数，除了可以发起真正的 <code>Ajax</code> 数据请求之外，还能够发起 <code>JSONP</code> 数据请求，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">     <span class="attr">url</span>: <span class="string">&#x27;http://ajax.frontend.itheima.net:3006/api/jsonp?name=zs&amp;age=20&#x27;</span>,</span><br><span class="line">     <span class="comment">// 如果要使用 $.ajax() 发起 JSONP 请求，必须指定 datatype 为 jsonp</span></span><br><span class="line">     <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">     <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">     &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>默认情况下，使用 <code>jQuery</code> 发起 <code>JSONP</code> 请求，会自动携带一个 c<code>allback=jQueryxxx</code> 的参数，<code>jQueryxxx</code> 是随机生成的一个回调函数名称</p><h5 id="9-4-5自定义参数及回调函数名称"><a href="#9-4-5自定义参数及回调函数名称" class="headerlink" title="9.4.5自定义参数及回调函数名称"></a>9.4.5自定义参数及回调函数名称</h5><p>在使用 <code>jQuery</code> 发起 <code>JSONP</code> 请求时，如果想要自定义 <code>JSONP</code> 的<strong>参数</strong>以及<strong>回调函数名称</strong>，可以通过如下两个参数来指定：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">     <span class="attr">url</span>: <span class="string">&#x27;http://ajax.frontend.itheima.net:3006/api/jsonp?name=zs&amp;age=20&#x27;</span>,</span><br><span class="line">     <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">     <span class="comment">// 发送到服务端的参数名称，默认值为 callback</span></span><br><span class="line">     <span class="attr">jsonp</span>: <span class="string">&#x27;callback&#x27;</span>,</span><br><span class="line">     <span class="comment">// 自定义的回调函数名称，默认值为 jQueryxxx 格式</span></span><br><span class="line">     <span class="attr">jsonpCallback</span>: <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">     <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">     &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="9-4-6jQuery中JSONP的实现过程"><a href="#9-4-6jQuery中JSONP的实现过程" class="headerlink" title="9.4.6jQuery中JSONP的实现过程"></a>9.4.6<code>jQuery</code>中<code>JSONP</code>的实现过程</h5><p><code>jQuery</code> 中的 <code>JSONP</code>，也是通过 <code>&lt;script&gt;</code> 标签的 <code>src</code> 属性实现跨域数据访问的，只不过，<code>jQuery</code> 采用的是<strong>动态创建和移除标签</strong>的方式，来发起 <code>JSONP</code> 数据请求。</p><ul><li>在发起 <code>JSONP</code> 请求的时候，动态向 <code>&lt;header&gt;</code> 中 append 一个 <code>&lt;script&gt;</code> 标签；</li><li>在 <code>JSONP</code> 请求成功以后，动态从 <code>&lt;header&gt;</code> 中移除刚才 <code>append</code> 进去的 <code>&lt;script&gt;</code> 标签；</li></ul><p><strong>案例-淘宝搜索框</strong></p><p><strong>获取用户输入的搜索关键词</strong></p><p>为了获取到用户每次按下键盘输入的内容，需要监听输入框的 <code>keyup</code> 事件，示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听文本框的 keyup 事件</span></span><br><span class="line">$(<span class="string">&#x27;#ipt&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// 获取用户输入的内容</span></span><br><span class="line">     <span class="keyword">var</span> keywords = $(<span class="variable language_">this</span>).<span class="title function_">val</span>().<span class="title function_">trim</span>()</span><br><span class="line">     <span class="comment">// 判断用户输入的内容是否为空</span></span><br><span class="line">     <span class="keyword">if</span> (keywords.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// TODO：获取搜索建议列表</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>封装<code>getSuggestList</code>函数</strong></p><p>将获取搜索建议列表的代码，封装到 <code>getSuggestList</code> 函数中，示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSuggestList</span>(<span class="params">kw</span>) &#123;</span><br><span class="line">     $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">     <span class="comment">// 指定请求的 URL 地址，其中，q 是用户输入的关键字</span></span><br><span class="line">     <span class="attr">url</span>: <span class="string">&#x27;https://suggest.taobao.com/sug?q=&#x27;</span> + kw,</span><br><span class="line">     <span class="comment">// 指定要发起的是 JSONP 请求</span></span><br><span class="line">     <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">     <span class="comment">// 成功的回调函数</span></span><br><span class="line">     <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(res) &#125;</span><br><span class="line">     &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>渲染建议列表的<code>UI</code>结构</strong></p><p><strong>定义搜索建议列表</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- tab 栏区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tabs&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 搜索区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search-box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 搜索建议列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;suggest-list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>定义模板结构</strong></p><ul><li>创建<code>script</code>标签</li><li>设置<code>type</code>属性为 <code>text/html</code> 设置模板<code>id</code></li><li>利用 <code>each</code> 遍历结构</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 模板结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/html&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tpl-suggestList&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">     </span><span class="template-variable">&#123;&#123;<span class="name"><span class="built_in">each</span></span> result&#125;&#125;</span><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;suggest-item&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">$value</span>[0]&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">     </span><span class="template-tag">&#123;&#123;/<span class="name"><span class="built_in">each</span></span>&#125;&#125;</span><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>定义渲染模板结构的函数</strong></p><ul><li>定义函数，接收一个参数，就是服务器返回的数据</li><li>判断返回的数据长度是否大于0</li><li>如果没有，将页面的列表清空，并且进行隐藏</li><li>如果有数据，调用模板的 <code>template</code> 函数，传入<code>id</code>和数据</li><li>返回渲染好的<code>html</code>字符串，然后放入容器中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 渲染建议列表</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderSuggestList</span>(<span class="params">res</span>) &#123;</span><br><span class="line">     <span class="comment">// 如果没有需要渲染的数据，则直接 return</span></span><br><span class="line">     <span class="keyword">if</span> (res.<span class="property">result</span>.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> $(<span class="string">&#x27;#suggest-list&#x27;</span>).<span class="title function_">empty</span>().<span class="title function_">hide</span>()</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 渲染模板结构</span></span><br><span class="line">     <span class="keyword">var</span> htmlStr = <span class="title function_">template</span>(<span class="string">&#x27;tpl-suggestList&#x27;</span>, res)</span><br><span class="line">     $(<span class="string">&#x27;#suggest-list&#x27;</span>).<span class="title function_">html</span>(htmlStr).<span class="title function_">show</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>搜索关键词为空时隐藏搜索建议列表</strong></p><ul><li>注册<code>keyup</code>事件</li><li>判断输入框的内容是否为空</li><li>如果为空隐藏列表</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#ipt&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// 获取用户输入的内容</span></span><br><span class="line">     <span class="keyword">var</span> keywords = $(<span class="variable language_">this</span>).<span class="title function_">val</span>().<span class="title function_">trim</span>()</span><br><span class="line">     <span class="comment">// 判断用户输入的内容是否为空</span></span><br><span class="line">     <span class="keyword">if</span> (keywords.<span class="property">length</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">     <span class="comment">// 如果关键词为空，则清空后隐藏搜索建议列表</span></span><br><span class="line">     <span class="keyword">return</span> $(<span class="string">&#x27;#suggest-list&#x27;</span>).<span class="title function_">empty</span>().<span class="title function_">hide</span>()</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title function_">getSuggestList</span>(keywords)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="10-防抖-amp-节流"><a href="#10-防抖-amp-节流" class="headerlink" title="10-防抖&amp;节流"></a>10-防抖&amp;节流</h3><h4 id="10-1什么是防抖"><a href="#10-1什么是防抖" class="headerlink" title="10.1什么是防抖"></a>10.1什么是防抖</h4><p><strong>防抖策略</strong>（<code>debounce</code>）是当事件被触发后，延迟 <code>n</code> 秒后再执行回调，如果在这 <code>n</code> 秒内事件又被触发，则重新计时。</p><p><strong>好处：</strong>能够保证用户在频繁触发某些事件的时候，不会频繁的执行回调，只会被执行一次</p><h5 id="防抖的应用场景"><a href="#防抖的应用场景" class="headerlink" title="防抖的应用场景"></a>防抖的应用场景</h5><p>用户在输入框中连续输入一串字符时，可以通过防抖策略，只在输入完后，才执行查询的请求，这样可以有效减</p><p>少请求次数，节约请求资源；</p><p>实现输入框的防抖</p><ul><li>防抖动的 timer</li><li>定义防抖的函数，函数里面定义一个延时器，在演示器里面调用发起<code>JSONP</code>的请求</li><li>在触发 <code>keyup</code> 事件时，立即清空 <code>timer</code>，然后调用防抖的函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span> <span class="comment">// 1. 防抖动的 timer</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounceSearch</span>(<span class="params">keywords</span>) &#123; <span class="comment">// 2. 定义防抖的函数</span></span><br><span class="line">     timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// 发起 JSONP 请求</span></span><br><span class="line">     <span class="title function_">getSuggestList</span>(keywords)</span><br><span class="line">     &#125;, <span class="number">500</span>)</span><br><span class="line"> &#125;</span><br><span class="line">$(<span class="string">&#x27;#ipt&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="comment">// 3. 在触发 keyup 事件时，立即清空 timer</span></span><br><span class="line"> <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line"> <span class="comment">// ...省略其他代码</span></span><br><span class="line"> <span class="title function_">debounceSearch</span>(keywords)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>缓存搜索的建议列表</p><p>定义全局缓存对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 缓存对象</span></span><br><span class="line"><span class="keyword">var</span> cacheObj = &#123;&#125;</span><br></pre></td></tr></table></figure><p>将搜索结果保存到缓存对象中</p><ul><li>键就是用户输入的关键字，值就是服务器返回的value</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 渲染建议列表</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderSuggestList</span>(<span class="params">res</span>) &#123;</span><br><span class="line">     <span class="comment">// ...省略其他代码</span></span><br><span class="line">     <span class="comment">// 将搜索的结果，添加到缓存对象中</span></span><br><span class="line">     <span class="keyword">var</span> k = $(<span class="string">&#x27;#ipt&#x27;</span>).<span class="title function_">val</span>().<span class="title function_">trim</span>()</span><br><span class="line">     cacheObj[k] = res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优先从缓存中获取搜索建议</p><ul><li>在发起请求之前，先判断缓存中是否有数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听文本框的 keyup 事件</span></span><br><span class="line">$(<span class="string">&#x27;#ipt&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// ...省略其他代码</span></span><br><span class="line">     <span class="comment">// 优先从缓存中获取搜索建议</span></span><br><span class="line">     <span class="keyword">if</span> (cacheObj[keywords]) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="title function_">renderSuggestList</span>(cacheObj[keywords])</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 获取搜索建议列表</span></span><br><span class="line">     <span class="title function_">debounceSearch</span>(keywords)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><h4 id="10-2节流"><a href="#10-2节流" class="headerlink" title="10.2节流"></a>10.2节流</h4><h5 id="10-2-1什么是节流"><a href="#10-2-1什么是节流" class="headerlink" title="10.2.1什么是节流"></a>10.2.1什么是节流</h5><p><strong>节流策略</strong>（<code>throttle</code>），顾名思义，可以减少一段时间内事件的触发频率。</p><h5 id="10-2-2节流的应用场景"><a href="#10-2-2节流的应用场景" class="headerlink" title="10.2.2节流的应用场景"></a>10.2.2节流的应用场景</h5><p>① 鼠标连续不断地触发某事件（如点击），只在单位时间内只触发一次；</p><p>② 懒加载时要监听计算滚动条的位置，但不必每次滑动都触发，可以降低计算的频率，而不必去浪费 CPU 资源；</p><h5 id="10-2-3节流案例-–-鼠标跟随效果"><a href="#10-2-3节流案例-–-鼠标跟随效果" class="headerlink" title="10.2.3节流案例 – 鼠标跟随效果"></a><strong>10.2.3节流案例</strong> <strong>–</strong> 鼠标跟随效果</h5><h6 id="UI效果"><a href="#UI效果" class="headerlink" title="UI效果"></a><code>UI</code>效果</h6><h6 id="渲染UI结构并美化样式"><a href="#渲染UI结构并美化样式" class="headerlink" title="渲染UI结构并美化样式"></a>渲染<code>UI</code>结构并美化样式</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- UI 结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./assets/angel.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;angel&quot;</span> /&gt;</span></span><br><span class="line">/* CSS 样式 */</span><br><span class="line">html, body &#123;</span><br><span class="line"> margin: 0;</span><br><span class="line"> padding: 0;</span><br><span class="line"> overflow: hidden; &#125;</span><br><span class="line">#angel &#123;</span><br><span class="line"> position: absolute; &#125;</span><br></pre></td></tr></table></figure><h6 id="不使用节流时实现鼠标跟随效果"><a href="#不使用节流时实现鼠标跟随效果" class="headerlink" title="不使用节流时实现鼠标跟随效果"></a>不使用节流时实现鼠标跟随效果</h6><ul><li>获取图片元素</li><li>注册 <code>mousemove</code>事件</li><li>设置图片的位置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// 获取图片元素</span></span><br><span class="line">     <span class="keyword">var</span> angel = $(<span class="string">&#x27;#angel&#x27;</span>)</span><br><span class="line">     <span class="comment">// 监听文档的 mousemove 事件</span></span><br><span class="line">     $(<span class="variable language_">document</span>).<span class="title function_">on</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">     <span class="comment">// 设置图片的位置</span></span><br><span class="line">     $(angel).<span class="title function_">css</span>(<span class="string">&#x27;left&#x27;</span>, e.<span class="property">pageX</span> + <span class="string">&#x27;px&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;top&#x27;</span>, e.<span class="property">pageY</span> + <span class="string">&#x27;px&#x27;</span>)</span><br><span class="line">     &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="10-3节流阀的概念"><a href="#10-3节流阀的概念" class="headerlink" title="10.3节流阀的概念"></a>10.3节流阀的概念</h4><p>高铁卫生间是否被占用，由红绿灯控制，红灯表示被占用，绿灯表示可使用。</p><p>假设每个人上卫生间都需要花费5分钟，则五分钟之内，被占用的卫生间无法被其他人使用。</p><p>上一个人使用完毕后，需要将红灯<strong>重置</strong>为绿灯，表示下一个人可以使用卫生间。</p><p>下一个人在上卫生间之前，需要<strong>先判断控制灯</strong>是否为绿色，来知晓能否上卫生间。</p><p>节流阀为空，表示可以执行下次操作；不为空，表示不能执行下次操作。</p><p>当前操作执行完，必须将节流阀<strong>重置</strong>为空，表示可以执行下次操作了。</p><p>每次执行操作前，必须<strong>先判断节流阀是否为空</strong>。</p><h5 id="10-3-1使用节流优化鼠标跟随效果"><a href="#10-3-1使用节流优化鼠标跟随效果" class="headerlink" title="10.3.1使用节流优化鼠标跟随效果"></a>10.3.1使用节流优化鼠标跟随效果</h5><ul><li>预定义一个 timer <strong>节流阀</strong></li><li>当设置了鼠标跟随效果后，<strong>清空</strong> <strong>timer</strong> <strong>节流阀</strong>，方便下次开启延时器</li><li>执行事件的时候判断<strong>节流阀</strong>是否为空，如果不为空，则证明距离上次执行间隔不足16毫秒</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> angel = $(<span class="string">&#x27;#angel&#x27;</span>)</span><br><span class="line">     <span class="keyword">var</span> timer = <span class="literal">null</span> <span class="comment">// 1.预定义一个 timer 节流阀</span></span><br><span class="line">     $(<span class="variable language_">document</span>).<span class="title function_">on</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (timer) &#123; <span class="keyword">return</span> &#125; <span class="comment">// 3.判断节流阀是否为空，如果不为空，则证明距离上次执行间隔不足16毫秒</span></span><br><span class="line">     timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     $(angel).<span class="title function_">css</span>(<span class="string">&#x27;left&#x27;</span>, e.<span class="property">pageX</span> + <span class="string">&#x27;px&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;top&#x27;</span>, e.<span class="property">pageY</span> + <span class="string">&#x27;px&#x27;</span>)</span><br><span class="line">     timer = <span class="literal">null</span> <span class="comment">// 2.当设置了鼠标跟随效果后，清空 timer 节流阀，方便下次开启延时器</span></span><br><span class="line">     &#125;, <span class="number">16</span>)</span><br><span class="line">     &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="10-4总结防抖和节流的区别"><a href="#10-4总结防抖和节流的区别" class="headerlink" title="10.4总结防抖和节流的区别"></a>10.4总结防抖和节流的区别</h4><ul><li><strong>防抖</strong>：如果事件被频繁触发，防抖能保证只有最有一次触发生效！前面 N 多次的触发都会被忽略！</li><li><strong>节流</strong>：如果事件被频繁触发，节流能够减少事件触发的频率，因此，节流是有选择性地执行一部分事件！</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Ajax&quot;&gt;&lt;a href=&quot;#Ajax&quot; class=&quot;headerlink&quot; title=&quot;Ajax&quot;&gt;&lt;/a&gt;Ajax&lt;/h2&gt;&lt;h3 id=&quot;1-URL地址&quot;&gt;&lt;a href=&quot;#1-URL地址&quot; class=&quot;headerlink&quot; title=&quot;1- </summary>
      
    
    
    
    <category term="资料" scheme="http://example.com/categories/%E8%B5%84%E6%96%99/"/>
    
    
    <category term="Ajax" scheme="http://example.com/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>初识(三)</title>
    <link href="http://example.com/2022/11/06/%E5%88%9D%E8%AF%86-%E4%B8%89/"/>
    <id>http://example.com/2022/11/06/%E5%88%9D%E8%AF%86-%E4%B8%89/</id>
    <published>2022-11-06T03:43:13.000Z</published>
    <updated>2022-11-06T03:54:56.310Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web-APIs"><a href="#web-APIs" class="headerlink" title="web APIs"></a>web APIs</h1><p>web APIs <strong>作用：</strong>就是使用  js 去操作 html 和 浏览器</p><p><strong>分类：</strong> DOM （<strong>文档对象模型</strong>  操作网页内容，可以开发网页内容特效和实现用户交互），</p><p>​              BOM（浏览器对象模型）</p><p><strong>DOM对象：</strong> document  （它提供的属性和方法都是用来访问和操作网页内容的)</p><h3 id="获取DOM对象"><a href="#获取DOM对象" class="headerlink" title="获取DOM对象"></a>获取DOM对象</h3><p><strong>根据CSS选择器来获取DOM元素：</strong>         </p><p>​     一：    选择匹配的第一个元素 ———<strong>能直接操作修改</strong></p><p>语法： document.querySelector（’css选择器’）—-<em><strong>必须是字符串 而且必须加反引号</strong></em>      </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br></pre></td></tr></table></figure><ol><li><p>参数：包含一个或多个有效的 css选择器 <strong>字符串</strong></p></li><li><p>返回值：css选择器匹配的 第一个元素，一个HTMLElement对象。如果没有匹配到，则返回null。</p><p> 二： 选择匹配的多个元素———–**只能通过遍历的方式一次给里面的元素做修改 **</p><p> 语法： document.querySelectorAll（’css选择器’）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.nav li&#x27;</span>)</span><br></pre></td></tr></table></figure><p> 返回值：css选择器匹配的  <strong>NodeList  对象集合</strong>          </p><p> 例如：document.querySelectorAll（’ul li’）    获取到的将是是一个伪数组</p><p> <strong>伪元素：</strong>1.有长度有索引号的数组，但是没有pop（）  push（）等数组方法</p><p> ​                2.想要得到里面的每一个对象，则需要遍历（for）的方式获得。</p><p> <strong>注意事项：</strong> 哪怕只有一个元素，通过querySelectorAll（）获取过来的也是一个 伪数组，里面只有一个元素而已</p><p> <strong>其他三个获取DOM元素的方法（了解）</strong></p><p> 1.根据<strong>id</strong>获取一个元素：document.getElementById(‘nav’)</p><p> 2.根据标签获取<strong>一类</strong>（所有的）元素：document.getElementsByTagName(‘div’)</p><p> 3.根据<strong>类名</strong>获取元素：document.getElementByClassName(‘w’)</p><p> ​</p><h2 id="操作元素内容"><a href="#操作元素内容" class="headerlink" title="操作元素内容"></a>操作元素内容</h2><p> <strong>一.元素innerText属性</strong>  </p><p> 1.将文本内容添加&#x2F;更新到任意标签位置</p><p> 2.显示纯文本，不解析标签</p><p> <strong>二.元素 .innerHTML属性</strong> （推荐使用）</p><p> 1.将文本内容添加&#x2F;更新到任意标签位置</p><p> 2.会解析标签，能识别文本，多标签建议使用模板字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 获取元素</span></span><br><span class="line">   <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span><br><span class="line">   <span class="comment">// 2. 修改文字内容  对象.innerText 属性</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">innerText</span>)  <span class="comment">// 获取文字内容</span></span><br><span class="line">   box.<span class="property">innerText</span> = <span class="string">&#x27;我是一个盒子&#x27;</span>  <span class="comment">// 修改文字内容</span></span><br><span class="line">   box.<span class="property">innerText</span> = <span class="string">&#x27;&lt;strong&gt;我是一个盒子&lt;/strong&gt;&#x27;</span>  <span class="comment">// 不解析标签</span></span><br><span class="line">   <span class="comment">// 3. innerHTML 解析标签</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">innerHTML</span>)</span><br><span class="line">   box.<span class="property">innerHTML</span> = <span class="string">&#x27;我要更换&#x27;</span></span><br><span class="line">   box.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;strong&gt;我要加粗的&lt;/strong&gt;&#x27;</span></span><br></pre></td></tr></table></figure><p> ​</p><h2 id="操作元素属性"><a href="#操作元素属性" class="headerlink" title="操作元素属性"></a>操作元素属性</h2><p> <strong>一. 操作元素 常用 属性     语法：对象.属性 &#x3D; 值</strong></p><p> 常见的属性比如：href    title   src 等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/1.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 1. 获取图片元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> img = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 2. 修改图片对象的属性   对象.属性 = 值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    img.<span class="property">src</span> = <span class="string">&#x27;./images/2.webp&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    img.<span class="property">title</span> = <span class="string">&#x27;pink老师的艺术照&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p> <strong>二.操作元素的 样式 属性</strong></p></li></ol><p>1.通过  style  属性操作css     <em>语法：对象.style.样式属性 &#x3D; 值</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 1. 获取元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//2. 修改样式属性 对象.style.样式属性 = &#x27;值&#x27;  别忘了跟单位</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    box.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;300px&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 多组单词的采取 小驼峰命名法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    box.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;hotpink&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    box.<span class="property">style</span>.<span class="property">border</span> = <span class="string">&#x27;2px solid blue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    box.<span class="property">style</span>.<span class="property">borderTop</span> = <span class="string">&#x27;2px solid red&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>2.操作 类名（className）操作css   *语法： 元素.className &#x3D; ‘active’（active是一个css类名）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 1. 获取元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 2.添加类名  class 是个关键字 我们用 className</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    div.<span class="property">className</span> = <span class="string">&#x27;nav box&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>3.通过  classList  操作控制css</p><p>3.1  <strong>追加</strong>一个类：  元素.classList.add(‘类名’)</p><p>3.2    <strong>删除</strong>一个类：  元素.classList.remove(‘类名’)</p><p>3.3   <strong>切换</strong>一个类：  元素.classList.toggle(‘类名’)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box active&quot;</span>&gt;</span>文字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 通过classList添加</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 1. 获取元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 2. 修改样式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 2.1 追加类 add() 类名不加点，并且是字符串</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    box.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 2.2 删除类  remove() 类名不加点，并且是字符串</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    box.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;box&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 2.3 切换类  toggle()  有还是没有啊， 有就删掉，没有就加上</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    box.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;active&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><strong>三.操作 表单元素 属性</strong>   </p><p>获取：DOM对象.属性名                              比如：表单.value &#x3D; ‘用户名’</p><p>设置：DOM对象.属性名 &#x3D; 新值                              表单.type &#x3D; ‘password’</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;!-- <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;电脑&quot;</span>&gt;</span> --&gt;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 1 获取元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> uname = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 2. 获取值  获取表单里面的值 用的  表单.value</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(uname.<span class="property">value</span>) <span class="comment">// 电脑</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(uname.<span class="property">innerHTML</span>)  innertHTML 得不到表单的内容</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 3. 设置表单的值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    uname.<span class="property">value</span> = <span class="string">&#x27;我要买电脑&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(uname.<span class="property">type</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    uname.<span class="property">type</span> = <span class="string">&#x27;password&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 1. 获取</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> ipt = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ipt.<span class="property">checked</span>)  <span class="comment">// false   只接受布尔值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ipt.<span class="property">checked</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// ipt.checked = &#x27;true&#x27;  // 会选中，不提倡  有隐式转换</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 1.获取</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// console.log(button.disabled)  // 默认false 不禁用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    button.<span class="property">disabled</span> = <span class="literal">true</span>   <span class="comment">// 禁用按钮</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>四.自定义属性</strong></p><p><em>标准属性：</em>标签天生自带的属性 比如class  id  title等，可以直接使用点语法操作 比如：disabled，checked，seleced</p><p><em>自定义属性：</em>从html5中推出来了专门的**data-**自定义属性</p><p>1.在标签上一律以  **data- **  开头</p><p>2.在DOM对象上一律以   <strong>dataset</strong>   对象方式获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-id</span>=<span class="string">&quot;1&quot;</span> <span class="attr">data-spm</span>=<span class="string">&quot;不知道&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-id</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-id</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-id</span>=<span class="string">&quot;4&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-id</span>=<span class="string">&quot;5&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> one = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(one.<span class="property">dataset</span>.<span class="property">id</span>)  <span class="comment">// 1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(one.<span class="property">dataset</span>.<span class="property">spm</span>)  <span class="comment">// 不知道</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="定时器-间歇函数"><a href="#定时器-间歇函数" class="headerlink" title="定时器-间歇函数"></a>定时器-间歇函数</h3><p>**定时器-间歇函数 **      目标：重复执行代码</p><p><strong>1.开启定时器           语法：setInterval（函数，间隔时间）</strong></p><p>​      作用：每间隔一段时间调用这个函数       &#x2F;       间隔的单位是毫秒</p><p><em><strong><u>注意！！  调用函数不需要加括号  &#x2F;   定时器返回的是一个id数字</u></strong></em></p><p>**2.关闭定时器           语法：let 变量名 &#x3D; setInterval(函数，间隔时间)     **</p><p>​                                               <strong>clearInterval（变量名）</strong></p><p>&#x2F;&#x2F; 一般不会刚创建就停止  二是满足一定条件再停止</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;一秒执行一次&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// setInterval(函数名, 间隔时间)  函数名不要加小括号</span></span><br><span class="line">    <span class="keyword">let</span> n = <span class="built_in">setInterval</span>(fn, <span class="number">1000</span>)</span><br><span class="line">    <span class="comment">// setInterval(&#x27;fn()&#x27;, 1000)</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n)</span><br><span class="line">    <span class="comment">// 关闭定时器</span></span><br><span class="line">    <span class="built_in">clearInterval</span>(n)</span><br></pre></td></tr></table></figure><p>***练习：用户倒计时协议案例     自动播放轮播图案例 ***</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;slider&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;slider-wrapper&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/slider01.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;slider-footer&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>对人类来说会不会太超前了？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;slider-indicator&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toggle&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;prev&quot;</span>&gt;</span><span class="symbol">&amp;lt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;next&quot;</span>&gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="comment">// 1. 初始数据</span></span><br><span class="line">    <span class="keyword">const</span> sliderData = [</span><br><span class="line">      &#123; <span class="attr">url</span>: <span class="string">&#x27;./images/slider01.jpg&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;对人类来说会不会太超前了？&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;rgb(100, 67, 68)&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">url</span>: <span class="string">&#x27;./images/slider02.jpg&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;开启剑与雪的黑暗传说！&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;rgb(43, 35, 26)&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">url</span>: <span class="string">&#x27;./images/slider03.jpg&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;真正的jo厨出现了！&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;rgb(36, 31, 33)&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">url</span>: <span class="string">&#x27;./images/slider04.jpg&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;李玉刚：让世界通过B站看到东方大国文化&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;rgb(139, 98, 66)&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">url</span>: <span class="string">&#x27;./images/slider05.jpg&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;快来分享你的寒假日常吧~&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;rgb(67, 90, 92)&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">url</span>: <span class="string">&#x27;./images/slider06.jpg&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;哔哩哔哩小年YEAH&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;rgb(166, 131, 143)&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">url</span>: <span class="string">&#x27;./images/slider07.jpg&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;一站式解决你的电脑配置问题！！！&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;rgb(53, 29, 25)&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">url</span>: <span class="string">&#x27;./images/slider08.jpg&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;谁不想和小猫咪贴贴呢！&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;rgb(99, 72, 114)&#x27;</span> &#125;,</span><br><span class="line">    ]</span><br><span class="line">    <span class="comment">// 1.获取元素</span></span><br><span class="line">    <span class="keyword">const</span> img = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.slider-wrapper img&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.slider-footer p&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span> <span class="comment">//控制图片的张量</span></span><br><span class="line">    <span class="comment">// 开启定时器从第二张开始</span></span><br><span class="line">    <span class="comment">// console.log(sliderData[i])   //拿到对应的对象</span></span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      i++</span><br><span class="line">      <span class="comment">// 无缝衔接</span></span><br><span class="line">      <span class="keyword">if</span> (i &gt;= sliderData.<span class="property">length</span>) &#123;</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">      <span class="comment">// console.log(sliderData[i])</span></span><br><span class="line">      <span class="comment">// 跟换图片路径</span></span><br><span class="line">      img.<span class="property">src</span> = sliderData[i].<span class="property">url</span></span><br><span class="line">      <span class="comment">//把文字写到P里面去</span></span><br><span class="line">      p.<span class="property">innerHTML</span> = sliderData[i].<span class="property">title</span></span><br><span class="line">      <span class="comment">// 小圆点</span></span><br><span class="line">      <span class="comment">// 先删除一起的active</span></span><br><span class="line">      <span class="comment">// 选中小圆点,删除它</span></span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.slider-indicator .active&#x27;</span>).<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">      <span class="comment">// 只让当前的li添加active</span></span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">`.slider-indicator li:nth-child(<span class="subst">$&#123;i + <span class="number">1</span>&#125;</span>)`</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><em><strong>掌握：事件绑定处理和事件对象，完成常见网页交互</strong></em></p><h4 id="01-事件监听（绑定）"><a href="#01-事件监听（绑定）" class="headerlink" title="01-事件监听（绑定）"></a>01-事件监听（绑定）</h4><h4 id="语法：元素对象-addEventListener-‘事件类型’，要执行的函数"><a href="#语法：元素对象-addEventListener-‘事件类型’，要执行的函数" class="headerlink" title="语法：元素对象.addEventListener(‘事件类型’，要执行的函数)"></a><strong>语法：元素对象.addEventListener(‘事件类型’，要执行的函数)</strong></h4><p>简答：1.什么是事件</p><p>事件是在编程时系统内发生的 <strong>动作</strong>或者发生的事情  比如用户在网页上<strong>单击</strong>一个按钮</p><p>​            2.什么是事件监听</p><p>让程序检测是否有事件产生，一旦有事件触发，就立即调用一个函数做出响应，也称为   绑定事件或者注册事件</p><p>比如：鼠标经过显示下拉菜单，  点击可以播放轮播图等</p><p><em><strong><u>！！！ 事件监听三要素：</u></strong></em></p><p><strong>事件源：</strong> 哪个DOM元素被事件触发了，要获取DOM元素</p><p><strong>事件类型：</strong> 用什么方式触发，比如鼠标单击click，鼠标经过mouseenter等</p><p>​          **注意！！ 事件类型要加引号   函数是点击之后再去执行，每次点击都会执行一次 ** </p><p><strong>事件调用的函数：</strong> 要做什么事</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 需求： 点击了按钮，弹出一个对话框</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 1. 事件源   按钮  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 2.事件类型 点击鼠标   click 字符串</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 3. 事件处理程序 弹出对话框</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">alert</span>(<span class="string">&#x27;你早呀~&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>（了解）发展史：</p><p>DOM L0 ：是 DOM 的发展的第一个版本； L：level</p><p> DOM L1：DOM级别1 于1998年10月1日成为W3C推荐标准</p><p> DOM L2：使用addEventListener注册事件</p><p> DOM L3： DOM3级事件模块在DOM2级事件的基础上重新定义了这些事件，也添加了一些新事件类型</p><h4 id="02-事件类型"><a href="#02-事件类型" class="headerlink" title="02-事件类型"></a>02-事件类型</h4><p><strong>鼠标事件（鼠标触发）：</strong> click 鼠标点击      mouseenter 鼠标经过   mouseleave 鼠标离开</p><p><strong>焦点事件（表单获得光标）:</strong>    focus 获得焦点    blur  失去焦点</p><p><strong>键盘事件（键盘触发）：</strong> keydown 键盘按下触发   keyup  键盘抬起触发</p><p><strong>文本事件（表单输入触发）：</strong>  input  用户输入事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 鼠标经过</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`轻轻的我来了`</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 鼠标离开</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`轻轻的我走了`</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="03-事件对象"><a href="#03-事件对象" class="headerlink" title="03-事件对象"></a>03-事件对象</h4><p><strong>获取事件对象：   语法  元素.addEventListener(‘click’,function(e){})</strong>      e:就是事件对象，在事件绑定的回调函数的第一个参数就是事件对象  一般命名为event，e。。。</p><p><strong>常见事件对象属性：</strong> 1.type  获取当前的事件类型</p><p>​                                      2.clientX&#x2F;clientY  获取光标相对于浏览器可见窗口左上角的位置</p><p>​                                      3.offsetX &#x2F; offsetY 获取光标相对于当前DOM元素左上角的位置</p><p>​                                       4.key 用户按下的键盘的值  （现在不提倡使用keyCode）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (e.<span class="property">key</span> === <span class="string">&#x27;Enter&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我按下了回车键&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="04-环境对象："><a href="#04-环境对象：" class="headerlink" title="04-环境对象："></a>04-环境对象：</h4><p>指的是函数内部特殊的变量this， 它代表着当前函数运行时所处的环境</p><p><em><strong>【谁调用，this就是谁】</strong></em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 每个函数里面都有this 环境对象  普通函数里面this指向的是window</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// function fn() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   console.log(this)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// window.fn()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// console.log(this)  // btn 对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// btn.style.color = &#x27;red&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="05-回调函数"><a href="#05-回调函数" class="headerlink" title="05-回调函数"></a>05-回调函数</h4><p>简单理解：当一个函数当作参数传递给另外一个函数的时候，这个函数就是回调函数</p><p><strong>回调函数的本质还是函数，只不过是把她当作参数使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1.给5个链接绑定鼠标经过事件</span></span><br><span class="line">    <span class="comment">// 1.1 获取a元素</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">as</span> = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.tab-nav a&#x27;</span>)</span><br><span class="line">    <span class="comment">// console.log(as)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">as</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="comment">// console.log(as[i])</span></span><br><span class="line">      <span class="keyword">as</span>[i].<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// console.log(&#x27;鼠标经过&#x27;)</span></span><br><span class="line">        <span class="comment">// 排他思想 移除类 添加类</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.tab-nav .active&#x27;</span>).<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">        <span class="comment">// 添加类  this 当前的a</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">        <span class="comment">// 下面五个大盒子 .item</span></span><br><span class="line">        <span class="comment">// 移除类</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.tab-content .active&#x27;</span>).<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">        <span class="comment">// 对应序号item 显示  添加acitve类</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">`.tab-content .item:nth-child(<span class="subst">$&#123;i + <span class="number">1</span>&#125;</span>)`</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="01-事件流"><a href="#01-事件流" class="headerlink" title="01-事件流"></a>01-事件流</h4><p>事件流指的是事件完整执行过程中的流动路径  会经历两个阶段  分别是捕获阶段和冒泡阶段捕获阶段是从父到子  冒泡阶段是从子到父</p><p>实际工作都是使用事件冒泡为主</p><p><strong>02-事件捕获</strong></p><p>DOM.addEventListener(事件类型，事件处理函数，是否使用捕获机制)  第三个参数传入<strong>true</strong>代表的是捕获阶段触发  若传入<strong>false</strong>代表冒泡阶段触发，<strong>默认是false</strong>   </p><p>若是用L0事件监听 则只有冒泡阶段 没有捕获</p><p><strong>03-事件冒泡</strong> </p><p>概念：当一个元素触发事件后，会依次向上调用所有的父级元素的<u>同名事件</u></p><p>事件冒泡是默认存在的</p><p>L2事件监听第三个参数是false，或者默认都是冒泡</p><p><strong>04-阻止冒泡</strong>   </p><p><strong>前提：</strong> 阻止事件冒泡需要拿到事件对象</p><p><strong>语法：</strong> 事件对象.stopPropagation()     此方法可以阻断事流动传播，不光是在冒泡阶段有效，捕获阶段也有效</p><p>需要<strong>阻止默认行为</strong>的发生有：阻止链接的跳转，表单域跳转</p><p><strong>语法：</strong> e.preventDefault()</p><p><strong>05-解绑事件</strong>  </p><p>on事件方式，直接使用null覆盖就可以实现事件的解绑</p><p>addEventListener方式，必须使用：</p><p>removeEventListener(事件类型, 事件处理函数, [获取捕获或者冒泡阶段])</p><p><em><strong>注意：匿名函数无法被解绑</strong></em></p><p><strong>鼠标经过事件的区别：</strong></p><p>mouseover 和 mouseout 会有冒泡效果</p><p>mouseenter 和 mouseleave  没有冒泡效果（推荐）</p><p><strong>两种注册事件的区别：</strong></p><p><em>（L0）传统on注册：</em></p><p>1.同一个对象，后面注册的事件会覆盖前面注册（同一个事件）</p><p>2.直接使用null覆盖就可以实现事件解绑</p><p>3.都是冒泡阶段执行的</p><p><em>（L2）事件监听注册</em></p><p>1.语法：addEventListener（事件类型，事件处理函数，是否使用捕获）</p><p>2.后面注册的事件不会覆盖前面注册的事件（同一个事件）</p><p>3.可以通过第三个参数去确定是在冒泡或者捕获阶段执行</p><p>4.必须使用removeEventListener(事件类型，事件处理函数，获取捕获或者冒泡阶段)</p><p>5.匿名函数无法解绑</p><h4 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h4><p>优点：减少注册次数，可以提高程序的性能</p><p>原理：事件委托其实就是利用事件冒泡的特点，给<strong>父元素注册事件</strong> ，当我们触发子元素的时候，会冒泡到父元素身上，从而触发父元素的事件</p><p>实现：<strong>事件对象.target.tagName</strong>可以获得真正触发事件的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第1个孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第2个孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第3个孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第4个孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第5个孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我不需要变色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 点击每个小li 当前li 文字变为红色</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 按照事件委托的方式  委托给父级，事件写到父级身上</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 1. 获得父元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// alert(11)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// this.style.color = &#x27;red&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// console.dir(e.target) // 就是我们点击的那个对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// e.target.style.color = &#x27;red&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 我的需求，我们只要点击li才会有效果</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">tagName</span> === <span class="string">&#x27;LI&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><strong>其他事件—页面加载事件</strong></p><p>load事件：监听整个页面资源给windo加</p><p>DoMContentLoaded:给document加，无需等待样式表，图像等完全加载</p><p><em><strong>页面滚动事件(scroll):</strong></em></p><p><strong>1-获取位置：</strong></p><p>scrollLeft和scrollTop(属性)：</p><ul><li>获取被卷去的大小</li><li>获取元素内容往左，往上滚出去看不到的距离</li><li>这两个值是可读写的</li></ul><p>尽量在scroll事件里面获取被卷去的距离</p><p><strong>注意！document.documentElement  HTML文档返回对象为HTML元素</strong></p><p><strong>2-滚动到指定的坐标：</strong></p><p>语法：元素.scrollTo（x，y）</p><p><em><strong>页面尺寸事件（resize）：</strong></em></p><p>会在窗口尺寸改变的时候触发事件</p><p><strong>1-获取元素宽高：</strong></p><p>获取元素的可见部分宽高（不包含边框，margin，滚动条等）</p><p><em>clientWidth</em>和<em>clientHeight</em></p><p><strong>2-元素尺寸与位置-尺寸</strong></p><ul><li><p>offseftLeft和offsetTop  是已读属性</p></li><li><p>element.getBoundingClientRect方法返回元素的大小及其相对于视口的位置</p><p><em><strong>总结：</strong></em></p><p><em><strong>1.scrollLeft和scrollTop  被卷去的头部和左侧，配合页面滚动来用，可读</strong></em> 2.clientWidth和clientHeight  获得元素宽度和高度，不包含border，margin，滚动条，用于js获取元素大小，只读属性</p><p>3.offsetWidth和offsetHeight 获取元素的宽度和高度，包含border，padding，滚动条等，只读元素</p><p><em><strong>4.offseLeft和offsetTop  获取元素距离自己定位父级元素的左，上距离     获取元素位置的时候使用，只读属性</strong></em></p></li></ul><p><em><strong>练习：电梯导航模块，全选反选</strong></em></p><h4 id="01-日期对象"><a href="#01-日期对象" class="headerlink" title="01-日期对象"></a>01-日期对象</h4><p>用来表示时间的对象，可以得到当前系统时间</p><p><strong>1.1实例化：  在代码中发现了new关键字时，一般将这个操作称为实例化</strong></p><p><em><strong>获取当前时间：</strong></em>const date &#x3D; new Date（）</p><p><em><strong>1.2日期对象方法</strong></em></p><p>getFullYear()     获得年份     获取四位年份</p><p>getMonth()        获得月份     取值为 0 ~ 11 </p><p>getDate()            获取月份中的每一天        不同月份取值也不相同</p><p>getDay()              获取星期      取值为 0 ~ 6</p><p>getHours()          获取小时      取值为 0 ~ 23</p><p>getMinutes()       获取分钟      取值为 0 ~ 59</p><p>getSeconds()       获取秒          取值为 0 ~ 59</p><p><em><strong>1.3时间戳</strong></em> （毫秒）     （使用场景为计算倒计时的效果）</p><p><strong>算法：</strong> 将来的时间戳 - 现在的时间戳 &#x3D; 剩余时间毫秒数</p><p>​             剩余时间毫秒数 转换为剩余时间的 年月日时分秒  就是倒计时时间</p><p><strong>公式：</strong>转换公式：</p><p> d &#x3D; parseInt(总秒数&#x2F; 60&#x2F;60 &#x2F;24); &#x2F;&#x2F; 计算天数</p><p> h &#x3D; parseInt(总秒数&#x2F; 60&#x2F;60 %24) &#x2F;&#x2F; 计算小时</p><p> m &#x3D; parseInt(总秒数 &#x2F;60 %60 ); &#x2F;&#x2F; 计算分数</p><p> s &#x3D; parseInt(总秒数%60); &#x2F;&#x2F; 计算当前秒数</p><p><em><strong>三种方式获取时间戳：</strong></em></p><p>1.使用getTime()方法</p><p>2.简写 +new Date（） （一般推荐使用这种）</p><p>3.使用Date.now()  – 无实例化，只能得到当前的时间戳，而前面两种可以返回指定时间的时间戳</p><h4 id="02-节点操作"><a href="#02-节点操作" class="headerlink" title="02-节点操作"></a>02-节点操作</h4><p><strong>2.1-DOM节点（DOM数里面每一个内容都称之为节点）：</strong></p><p>元素节点： 所有的标签 比如body，div    html是根节点</p><p>属性节点：所有的属性  比如href</p><p>文本节点：所有的文本</p><p><strong>2.2-查找节点</strong></p><p><strong>父节点查找：  子元素.parentNode</strong>（返回最近一级的父节点 找不到返回为null）  </p><p><strong>子节点查找：  父元素.children</strong>  （仅获得所有元素节点&#x2F;返回的还是一个伪数组）</p><p>childNodes：获得所有子阶段，包括文本节点（空格，换行），注释节点等</p><p><strong>兄弟关系查找：  1.下一个兄弟节点   nextElementSibling</strong></p><p>​                              <strong>2.上一个兄弟节点   previousElementSibling</strong> </p><p><strong>2.3-增加节点</strong> </p><p>步骤：创建一个新的节点 &#x3D;&#x3D;&#x3D;》把创建的新的节点放入到指定的元素内部</p><p><strong>创建元素节点的方法：  document.createElement(‘标签名’)</strong> </p><p><strong>追加节点：</strong></p><p><em>插入到父元素的最后一个元素：   父元素.appendChild（要插入的元素）</em></p><p><em>插入到某个子元素的前面    父元素.insertBefore(要插入的元素，在哪个元素前面)</em></p><p><strong>克隆节点：   克隆一个已有的元素节点：元素.cloneNode(布尔值)</strong></p><p>*若为true，则代表克隆时会包含后代节点一起克隆</p><p>*若为false，则代表克隆时不包含后代节点</p><p>*默认为false</p><p><strong>2.4-删除节点     （要删除元素必须通过父元素删除）</strong></p><p><strong>语法：  父元素.removeChild(要删除的元素)</strong></p><p>*如不存在父子关系则删除不成功</p><p>*删除节点和隐藏节点（display：none）有区别的：隐藏节点还是存在的，但是删除，则从html中删除节点</p><h4 id="03-M端事件（移动端）"><a href="#03-M端事件（移动端）" class="headerlink" title="03-M端事件（移动端）"></a>03-M端事件（移动端）</h4><p><strong>触屏事件touch（也称触摸事件）</strong>  Android和IOS都有</p><p><strong>touch</strong> 对象代表一个触摸点。触摸点可能是一根手指，也可能是一根触摸笔。触屏事件可响应用户手指（触摸笔）对屏幕或触控板操作。</p><p><strong>常见的触屏touch事件：</strong> </p><p>touchstart               手指触摸到一个DOM元素是触发</p><p>touchmove              手指在一个DOM元素上滑动是触发</p><p>touchend                 手指从一个DOM元素上移开时触发</p><h4 id="04-插件"><a href="#04-插件" class="headerlink" title="04-插件"></a>04-插件</h4><p> 插件: 就是别人写好的一些代码,我们只需要复制对应的代码,就可以直接实现对应的效果</p><p> 学习插件的基本过程</p><p> 熟悉官网,了解这个插件可以完成什么需求    <a href="https://www.swiper.com.cn/">https://www.swiper.com.cn/</a> </p><p> 看在线演示,找到符合自己需求的demo</p><p> <a href="https://www.swiper.com.cn/demo/index.html">https://www.swiper.com.cn/demo/index.html</a></p><p> 查看基本使用流程     <a href="https://www.swiper.com.cn/usage/index.html">https://www.swiper.com.cn/usage/index.html</a></p><p> 查看APi文档,去配置自己的插件   <a href="https://www.swiper.com.cn/api/index.html">https://www.swiper.com.cn/api/index.html</a></p><p> 注意: 多个swiper同时使用的时候, 类名需要注意区分</p><h4 id="重绘和回流"><a href="#重绘和回流" class="headerlink" title="重绘和回流"></a>重绘和回流</h4><p><strong>回流：</strong>当 Render Tree 中部分或者全部元素的尺寸、结构、布局等发生改变时，浏览器就会重新渲染部分或全部文档的过程称为 回流。</p><p><strong>重绘：</strong>由于节点(元素)的样式的改变并不影响它在文档流中的位置和文档布局时(比如：color、background-color、outline等), 称为重绘。</p><p><em><strong><u>重绘不一定引起回流，而回流一定会引起重绘</u></strong></em> </p><p><em>会导致回流（重排）的操作：</em></p><p>*页面的首次刷新</p><p>*浏览器的窗口大小发生改变</p><p>*元素的大小或位置发生改变</p><p>*改变字体的字样</p><p>*内容的变化（如：input框的输入，图片的大小）</p><p>*激活css伪类（如：:hover）</p><p>*脚本操作DOM（添加或者删除可见的DOM 元素）</p><p><strong>简单来说 影响到布局了 就会有回流</strong></p><p><strong>练习：  学成在线渲染案例  倒计时案例  微博发布案例</strong></p><h4 id="01-Window对象"><a href="#01-Window对象" class="headerlink" title="01-Window对象"></a>01-Window对象</h4><p><strong>1.1定时器-延时函数      语法：  setTimeout（回调函数，等待的毫秒数）</strong>  </p><p>setTimeout只执行一次</p><p><strong>清除延时函数：</strong> let timer &#x3D; setTimeout（回调函数，等待的毫秒数）</p><p>​                             clearTimeout（timer）</p><p><em><strong>注意！延时器需要等待，所以后面的代码会先执行，每一次调用延时器都会产生一个新的延时器</strong></em></p><p>**1.2  JS执行机制       **</p><p>最大的特点就是<strong>单线程</strong>，同一时间只能做一件事</p><p>分为同步和异步：</p><p><strong>同步任务：</strong> 都在主线程上执行，形成一个执行栈。</p><p><strong>异步任务：</strong> 通过回调函数实现的。有以下三种类型</p><p>*1.普通事件，如click，resize等</p><p>*2.资源加载，如load，error等</p><p>*3.定时器，包括setInterval，setTimeout等</p><p>异步任务相关添加到<strong>任务队列</strong>中（任务队列也称为消息队列）</p><p><strong>执行步骤：</strong> 1.先执行<strong>执行栈中的同步任务</strong></p><p>​                     2.异步任务放入任务队列中</p><p>​                     3.一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行。</p><p>由于主线程不断的重复获得任务，执行任务，再获取任务，再执行，所以这种机制被称为<em><strong>事件循环（event loop）</strong></em></p><p><strong>1.3 location对象</strong></p><p>location数据类型是对象，它拆分并保存了URL地址各个组成部分</p><p>常用的属性和方法：</p><p><strong>href</strong>属性获取完整的URL地址，对其赋值时用于地址的跳转</p><p><strong>search</strong>属性获取地址中携带的参数，符号？后面的部分</p><p><strong>hash</strong>属性获取地址中的哈希值，符号#后面部分</p><p><strong>reload</strong>方法用来刷新当前页面，传入参数true时表示强制刷新</p><p><strong>1.4 histroy对象</strong></p><p>数据类型是对象，主要管理历史记录，该对象与浏览器地址栏的操作相对应，如前进，后退，历史记录等</p><p>常用属性和方法：</p><p>back（）          可以后退的功能</p><p>forward（）     前进功能</p><p>go（参数）        前进后退功能 参数如果是1 前进1个页面  如果是-1 后退一个页面</p><h4 id="02-本地存储"><a href="#02-本地存储" class="headerlink" title="02-本地存储"></a>02-本地存储</h4><p><strong>2.1 本地存储分类- localStorage</strong></p><p><strong>作用：</strong>可以将数据永久存储在本地（用户的电脑），除非手动删除，否则关闭页面也会存在</p><p><strong>特性：</strong> 可以多窗口（页面）共享（同一浏览器可以共享）&#x2F;以键值对的形式存储使用</p><p><em><strong>语法：    1.存储数据：  localStorage.setltem(key,value)</strong></em> </p><p>​                 <em><strong>2.获取数据：localStorage.getltem(key)</strong></em> </p><p>​                 <strong>3.删除数据：localStorage.removeltem(key)</strong> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储</span></span><br><span class="line">   <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;uname&#x27;</span>, <span class="string">&#x27;熊大&#x27;</span>)</span><br><span class="line">   <span class="comment">// 获取</span></span><br><span class="line">   <span class="keyword">const</span> n = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;uname&#x27;</span>)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(n)</span><br><span class="line">   <span class="comment">// 删除</span></span><br><span class="line">   <span class="comment">// localStorage.removeItem(&#x27;uname&#x27;)</span></span><br><span class="line">   <span class="comment">// 改  如果原来有这个键则是改，没有就是新增</span></span><br><span class="line">   <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;uname&#x27;</span>, <span class="string">&#x27;熊二&#x27;</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 本地存储只能存储字符串数据类型</span></span><br><span class="line">   <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;age&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;age&#x27;</span>))</span><br></pre></td></tr></table></figure><p><strong>2.2 本地存储分类- sessionStorage</strong> </p><p>特性：*生命周期为关闭浏览器窗口</p><p>​            *在同一个窗口（页面）下数据可以共享</p><p>​            *以键值对的形式存储使用</p><p>​            *用法跟localStorage基本相同</p><p><strong>2.3 存储复杂数据类型</strong></p><p><em><strong>本地只能存储字符串，无法存储复杂数据类型</strong></em> </p><p><strong>解决：</strong> 需要将复杂数据类型转换成JSON字符串，再存储到本地</p><p><strong>语法：JSON.stringify(复杂数据类型)</strong> </p><p>因为本地存储里面取出来的是字符串，不是对象，无法直接使用，所以要<strong>把取出来的字符串转换为对象</strong></p><p><strong>语法：JSON.parse(JSON字符串)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">      <span class="attr">uname</span>: <span class="string">&#x27;熊大&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1. 复杂数据类型存储必须转换为JSON字符串</span></span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;obj&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj))</span><br><span class="line">    <span class="comment">//2.把JSON字符串转换为对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;obj&#x27;</span>)))</span><br></pre></td></tr></table></figure><p><em><strong>数组中map方法  迭代数组</strong></em></p><p><em><strong>map可以处理数据，并且返回新的数组      也称为映射。</strong></em> </p><p>语法：const arr &#x3D; [‘pink’,’red’,’blue’]</p><p>​           arr.map(function(item,index){</p><p>​                  console.log(item)           &#x2F;&#x2F; item 得到数组元素‘pink’  ‘red’ ‘blue’</p><p>​                  console.log(index)          &#x2F;&#x2F; index 得到索引号  0 1 2 </p><p>​                  }）</p><p><strong>map可以处理数据，并且返回新的数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>]</span><br><span class="line">    <span class="comment">// map 方法也是遍历    处理数据   可以返回一个数组</span></span><br><span class="line">    <span class="keyword">const</span> newArr = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item, i</span>) &#123;</span><br><span class="line">      <span class="comment">// console.log(item)     //数组元素</span></span><br><span class="line">      <span class="comment">// console.log(i)         //下标</span></span><br><span class="line">      <span class="comment">// 把 item老师  放到新数组里(red老师)</span></span><br><span class="line">      <span class="keyword">return</span> item + <span class="string">&#x27;老师&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newArr)</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><p><em><strong>数组中join方法</strong></em> </p><p>join（）方法用于把数组中的元素转换一个字符串</p><p><strong>语法：</strong> const arr &#x3D; [‘pink老师’，’red老师’，’blue老师’] </p><p>​              console.log(arr.join(‘’))     &#x2F;&#x2F; pink老师 red老师 blue老师</p><p>数组元素是通过参数里面指定的额分隔符进行分隔的 </p><p> <strong>join（‘’）里面加的是分隔符号 如果没有，元素就默认连接在一起</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> arr = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>,<span class="string">&#x27;green&#x27;</span>]</span><br><span class="line">    <span class="comment">// 把数组元素转换为字符串</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>))</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>练习：必须独立写出学生信息表案例</strong></p><h4 id="01-正则表达式"><a href="#01-正则表达式" class="headerlink" title="01-正则表达式"></a>01-正则表达式</h4><p>正则表达式是用于匹配字符串中字符组合的<strong>模式</strong>，在js中，正则表达式也是对象通常用来查找，替换那些符合正则表达式的文本。</p><p><strong>使用场景：</strong> </p><p>*例如表单验证，用户表单只能输入英文字母，数字或下划线（<strong>匹配</strong>）</p><p>*过滤页面内容中的一些敏感词（<strong>替换</strong>），或从字符串中获取我们想要的特定部分等（<strong>提取</strong>）</p><p><strong>定义正则表达式语法： const 变量名 &#x3D; &#x2F;表达式&#x2F;</strong>     （&#x2F; &#x2F;  是正则表达式字面量）</p><p>​                           <strong>查找：const reg &#x3D; &#x2F;  &#x2F;</strong></p><p><strong>1-判断是否有符合规则的字符串  test()方法    ()写被检测的字符串</strong>  <strong><u>返回的是布尔值</u></strong></p><p><strong>2-检索（查找）符合规则的字符串  exec()方法   在一个指定字符串中执行一个搜索匹配</strong>       （如果匹配成功，exec（）方法**<u>返回一个数组，否则返回null</u>**）</p><p><strong>元字符：</strong> 是一些具有特殊含义的字符，可以极大提高了灵活性和强大的匹配功能</p><p><strong>参考文档：</strong></p><p> MDN：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions</a></p><p> 正则测试工具: <a href="http://tool.oschina.net/regex">http://tool.oschina.net/regex</a></p><p><strong>边界符：</strong> （位置符）用来*<u>提示字符所处的位置</u>* </p><p>^ :表示匹配行首的文本（以谁开始）</p><p>$ :表示匹配行尾的文本（以谁结束）</p><p>如果 ^ 和 $ 在一起，表示必须是精确匹配</p><p><strong>量词：</strong> （表示重复次数）用来*<u>设定某个模式出现的次数</u>* </p><p> *** **   重复零次或更多次</p><p><strong>+</strong>   重复一次或更多次</p><p><strong>？</strong>  重复零次或一次</p><p><strong>{n}</strong>  重复n次</p><p><strong>{n，}</strong>   重复n次或更多次</p><p><strong>{n，m}</strong>   重复n-m次</p><p><em><strong><u>注意！ 逗号左右两侧千万不要出现空格</u></strong></em></p><p><strong>字符类：</strong> [ ]匹配字符集合  里面^取反符号 [^a-z] 匹配除了小写字母以外的字符</p><p></p><p><strong>[ ] 里面加上 - 连字符   表示一个范围</strong> </p><p>比如[a-z] 表示a-z   26 个英文字母都可以</p><p> [a-zA-Z]表示大小写都可以</p><p>[0-9]表示0-9的数字都可以</p><p><strong>简写方式：</strong> </p><p>\d         匹配0-9之间的任一数字   相当于【0-9】</p><p>\D         匹配0-9以外的字符   相当于【^0-9】</p><p>\w         匹配任意的字母，数字，下划线，相当于【A-Za-z0-9-_】</p><p>\W         除所有字母，数字和下划线以外的字符，相当于【^A-Za-z0-9-_】</p><p>\s           匹配空格（包括换行符，制表符，空格符等），相等于【\t\r\n\v\f】</p><p>\S           匹配非空格的字符，相当于【^\t\r\n\v\f】</p><p><strong>修饰符：     语法：&#x2F;表达式&#x2F;修饰符</strong> </p><p><strong>i</strong>    表示正则匹配时字母不区分大小写</p><p>**g **   表示匹配所有满足正则表达式的结果</p><p><strong>replace 替换     语法：字符串.replace(&#x2F;正则表达式&#x2F;,’替换的文本’)</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^java$/</span>.<span class="title function_">test</span>(<span class="string">&#x27;java&#x27;</span>))</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^java$/i</span>.<span class="title function_">test</span>(<span class="string">&#x27;JAVA&#x27;</span>))</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^java$/i</span>.<span class="title function_">test</span>(<span class="string">&#x27;Java&#x27;</span>))</span><br><span class="line"></span><br><span class="line">   <span class="keyword">const</span> str = <span class="string">&#x27;java是一门编程语言，学完JAVA工作很高&#x27;</span></span><br><span class="line">   <span class="comment">// i 大小写  g 所有的</span></span><br><span class="line">   <span class="keyword">const</span> re = str.<span class="title function_">replace</span>(<span class="regexp">/java/ig</span>,<span class="string">&#x27;前端&#x27;</span>)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(re)</span><br></pre></td></tr></table></figure><h2 id="webAPIs综合案例"><a href="#webAPIs综合案例" class="headerlink" title="webAPIs综合案例"></a>webAPIs综合案例</h2><h6 id="学生信息表"><a href="#学生信息表" class="headerlink" title="学生信息表"></a>学生信息表</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学生信息表</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 参考数据</span></span><br><span class="line">    <span class="comment">// const initData = [</span></span><br><span class="line">    <span class="comment">//   &#123;</span></span><br><span class="line">    <span class="comment">// stuId: 1001,</span></span><br><span class="line">    <span class="comment">// uname: &#x27;欧阳霸天&#x27;,</span></span><br><span class="line">    <span class="comment">// age: 19,</span></span><br><span class="line">    <span class="comment">// gender: &#x27;男&#x27;,</span></span><br><span class="line">    <span class="comment">// salary: &#x27;20000&#x27;,</span></span><br><span class="line">    <span class="comment">// city: &#x27;上海&#x27;,</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// ]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.读取本地存储数据    student-data 本地存储的命名</span></span><br><span class="line">    <span class="keyword">const</span> data = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;student-data&#x27;</span>)</span><br><span class="line">    <span class="comment">// 2.如果有就返回对象，没有就声明一个空数组</span></span><br><span class="line">    <span class="keyword">const</span> arr = data ? <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data) : []</span><br><span class="line">    <span class="comment">// const arr = [</span></span><br><span class="line">    <span class="comment">//   &#123;</span></span><br><span class="line">    <span class="comment">//     stuId: 1001,</span></span><br><span class="line">    <span class="comment">//     uname: &#x27;欧阳霸天&#x27;,</span></span><br><span class="line">    <span class="comment">//     age: 19,</span></span><br><span class="line">    <span class="comment">//     gender: &#x27;男&#x27;,</span></span><br><span class="line">    <span class="comment">//     salary: &#x27;20000&#x27;,</span></span><br><span class="line">    <span class="comment">//     city: &#x27;上海&#x27;,</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// ]</span></span><br><span class="line">    <span class="comment">// console.log(arr)</span></span><br><span class="line">    <span class="comment">// 获取tbody</span></span><br><span class="line">    <span class="keyword">const</span> tbody = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;tbody&#x27;</span>)</span><br><span class="line">    <span class="comment">// 3.渲染模块函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 遍历数组arr  有几个对象就生成几个tr  然后追加给 tbody</span></span><br><span class="line">      <span class="keyword">const</span> trArr = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item, i</span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(item)</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(item.<span class="property">uname</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;tr&gt;</span></span><br><span class="line"><span class="string">          &lt;td&gt;<span class="subst">$&#123;item.stuId&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">          &lt;td&gt;<span class="subst">$&#123;item.uname&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">          &lt;td&gt;<span class="subst">$&#123;item.age&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">          &lt;td&gt;<span class="subst">$&#123;item.gender&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">          &lt;td&gt;<span class="subst">$&#123;item.salary&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">          &lt;td&gt;<span class="subst">$&#123;item.city&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">          &lt;td&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;javascript:&quot; data-id=<span class="subst">$&#123;i&#125;</span>&gt;删除&lt;/a&gt;</span></span><br><span class="line"><span class="string">          &lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;/tr&gt; </span></span><br><span class="line"><span class="string">        `</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// console.log(trArr)</span></span><br><span class="line">      <span class="comment">// 追加给tbody</span></span><br><span class="line">      <span class="comment">// 因为trArr 是个数组 我们不需要数组  要tr字符串  用join</span></span><br><span class="line">      tbody.<span class="property">innerHTML</span> = trArr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.录入模块</span></span><br><span class="line">    <span class="keyword">const</span> info = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.info&#x27;</span>)</span><br><span class="line">    <span class="comment">// 获取表单form 里面带有 name 属性的元素</span></span><br><span class="line">    <span class="keyword">const</span> items = info.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;[name]&#x27;</span>)</span><br><span class="line">    <span class="comment">// console.log(items)</span></span><br><span class="line">    info.<span class="title function_">addEventListener</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="comment">// 阻止提交</span></span><br><span class="line">      e.<span class="title function_">preventDefault</span>()</span><br><span class="line">      <span class="comment">// 声明空的对象</span></span><br><span class="line">      <span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">      <span class="comment">// obj.stuId = arr.length + 1</span></span><br><span class="line">      obj.<span class="property">stuId</span> = arr.<span class="property">length</span> ? arr[arr.<span class="property">length</span> - <span class="number">1</span>].<span class="property">stuId</span> + <span class="number">1</span> : <span class="number">1</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 非空判断</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// console.log(items)   //数组里包含5个表单</span></span><br><span class="line">        <span class="comment">// console.log(item[i])  //每个表单 对象</span></span><br><span class="line">        <span class="comment">// console.log(item[i].name)</span></span><br><span class="line">        <span class="keyword">const</span> item = items[i]</span><br><span class="line">        <span class="keyword">if</span> (items[i].<span class="property">value</span> === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">alert</span>(<span class="string">&#x27;输入内容不能为空，请重新输入&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// console.log(item.name)</span></span><br><span class="line">        <span class="comment">// obj[item.name] === obj.name  obj.age</span></span><br><span class="line">        obj[item.<span class="property">name</span>] = item.<span class="property">value</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// console.log(obj)</span></span><br><span class="line">      <span class="comment">// 追加给数组</span></span><br><span class="line">      arr.<span class="title function_">push</span>(obj)</span><br><span class="line">      <span class="comment">// 把数组 arr 存储到本地存储里面</span></span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;student-data&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arr))</span><br><span class="line">      <span class="comment">// 渲染页面</span></span><br><span class="line">      <span class="title function_">render</span>()</span><br><span class="line">      <span class="comment">// 重置表单</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">reset</span>()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.删除模块</span></span><br><span class="line">    tbody.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">tagName</span> === <span class="string">&#x27;A&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(e.target.dataset.id)</span></span><br><span class="line">        <span class="comment">// 删除数组对应的数据</span></span><br><span class="line">        arr.<span class="title function_">splice</span>(e.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">id</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="comment">// 写入本地存储</span></span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;student-data&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arr))</span><br><span class="line">        <span class="comment">// 重新渲染</span></span><br><span class="line">        <span class="title function_">render</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h6 id="放大镜"><a href="#放大镜" class="headerlink" title="放大镜"></a>放大镜</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 放大镜效果</span></span><br><span class="line"><span class="comment">//  1.获取三个盒子</span></span><br><span class="line"><span class="comment">// 1.1小盒子  图片切换效果</span></span><br><span class="line"><span class="keyword">const</span> small = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.small&#x27;</span>)</span><br><span class="line"><span class="comment">// 中盒子</span></span><br><span class="line"><span class="keyword">const</span> middle = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.middle&#x27;</span>)</span><br><span class="line"><span class="comment">// 大盒子</span></span><br><span class="line"><span class="keyword">const</span> large = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.large&#x27;</span>)</span><br><span class="line"><span class="comment">// 2.事件委托</span></span><br><span class="line">small.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseover&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">tagName</span> === <span class="string">&#x27;IMG&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(&#x27;111&#x27;)</span></span><br><span class="line">    <span class="comment">// 排他思想</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.active&#x27;</span>).<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">    <span class="comment">// parentNode 离它最近的上一级  就是给li添加</span></span><br><span class="line">    e.<span class="property">target</span>.<span class="property">parentNode</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">    <span class="comment">// e.target.src 是小图片</span></span><br><span class="line">    <span class="comment">// 让中等盒子的图片  src 换为小图片 src</span></span><br><span class="line">    middle.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>).<span class="property">src</span> = e.<span class="property">target</span>.<span class="property">src</span></span><br><span class="line">    <span class="comment">// 大盒子更换背景图片</span></span><br><span class="line">    large.<span class="property">style</span>.<span class="property">backgroundImage</span> = <span class="string">`url(<span class="subst">$&#123;e.target.src&#125;</span>)`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.鼠标经过中等盒子  显示隐藏大盒子</span></span><br><span class="line">middle.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, show)</span><br><span class="line">middle.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, hide)</span><br><span class="line"><span class="keyword">let</span> timeId = <span class="number">0</span></span><br><span class="line"><span class="comment">// 封装函数  显示</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 防止卡bug 先清除定时器</span></span><br><span class="line">  <span class="built_in">clearTimeout</span>(timeId)</span><br><span class="line">  large.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 隐藏  加定时器让用户体验变好</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hide</span>(<span class="params"></span>) &#123;</span><br><span class="line">  timeId = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    large.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">  &#125;, <span class="number">200</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.鼠标经过大盒子 显示隐藏</span></span><br><span class="line">large.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, show)</span><br><span class="line">large.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, hide)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.鼠标经过中等盒子 显示隐藏黑色遮罩层</span></span><br><span class="line"><span class="keyword">const</span> layer = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.layer&#x27;</span>)</span><br><span class="line">middle.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  layer.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">middle.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  layer.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.移动黑色遮罩层</span></span><br><span class="line">middle.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="comment">// 鼠标在middle 盒子里面的坐标 = 鼠标在页面中的坐标 - middle 中等盒子的坐标</span></span><br><span class="line">  <span class="comment">// console.log(e.pageX)鼠标在页面中的坐标</span></span><br><span class="line">  <span class="comment">// middle 中等盒子的坐标</span></span><br><span class="line">  <span class="comment">// console.log(middle.getBoundingClientRect().left)</span></span><br><span class="line">  <span class="keyword">let</span> x = e.<span class="property">pageX</span> - middle.<span class="title function_">getBoundingClientRect</span>().<span class="property">left</span></span><br><span class="line">  <span class="keyword">let</span> y = e.<span class="property">pageY</span> - middle.<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span> - <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span></span><br><span class="line">  <span class="comment">// console.log(x, y)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 黑色遮罩层移动 在 middle 盒子内 限定移动距离</span></span><br><span class="line">  <span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt;= <span class="number">400</span> &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt;= <span class="number">400</span>) &#123;</span><br><span class="line">    <span class="comment">// 黑色盒子不是一直移动的</span></span><br><span class="line">    <span class="comment">// 声明两个变量 黑色盒子移动的变量 mx my</span></span><br><span class="line">    <span class="keyword">let</span> mx = <span class="number">0</span>, my = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 如果鼠标在盒子左的位置小于100 黑色黑子不移动</span></span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">100</span>) mx = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 如果鼠标在盒子左的位置在100-300之间  黑色盒子开始移动并且减去鼠标在盒子左边100的距离 就是黑色盒子从左边0的位置开始，不是直接从左边100开始</span></span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">100</span> &amp;&amp; x &lt;= <span class="number">300</span>) mx = x - <span class="number">100</span></span><br><span class="line">    <span class="comment">// 如果鼠标在盒子左边的位置大于了300 ，黑色盒子移动到左边200的距离就可以了</span></span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">300</span>) mx = <span class="number">200</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (y &lt; <span class="number">100</span>) my = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (y &gt;= <span class="number">100</span> &amp;&amp; y &lt;= <span class="number">300</span>) my = y - <span class="number">100</span></span><br><span class="line">    <span class="keyword">if</span> (y &gt; <span class="number">300</span>) my = <span class="number">200</span></span><br><span class="line">    layer.<span class="property">style</span>.<span class="property">left</span> = mx + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">    layer.<span class="property">style</span>.<span class="property">top</span> = my + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">    <span class="comment">// 大盒子的  背景图片移动(backgroundPositionX) 随中等盒子移动   存在的关系是2倍</span></span><br><span class="line">    large.<span class="property">style</span>.<span class="property">backgroundPositionX</span> = -<span class="number">2</span> * mx + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">    large.<span class="property">style</span>.<span class="property">backgroundPositionY</span> = -<span class="number">2</span> * my + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="电梯"><a href="#电梯" class="headerlink" title="电梯"></a>电梯</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 电梯</span></span><br><span class="line"><span class="comment">// 第一模块页面滑动</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 获取元素</span></span><br><span class="line">  <span class="comment">// 获取要在那显示电梯的盒子</span></span><br><span class="line">  <span class="keyword">const</span> entry = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.xtx_entry&#x27;</span>)</span><br><span class="line">  <span class="comment">// 获取电梯</span></span><br><span class="line">  <span class="keyword">const</span> elevator = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.xtx-elevator&#x27;</span>)</span><br><span class="line">  <span class="comment">// 1.当页面滚动大于300像素，显示电梯导航</span></span><br><span class="line">  <span class="comment">// 2.给页面添加滚动事件</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 被卷去的头部 大于185</span></span><br><span class="line">    <span class="keyword">const</span> n = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span></span><br><span class="line">    <span class="comment">// console.log(n)</span></span><br><span class="line">    <span class="comment">// if (n &gt;= 300) &#123;</span></span><br><span class="line">    <span class="comment">//   elevator.style.opacity = 1</span></span><br><span class="line">    <span class="comment">// &#125; else &#123;</span></span><br><span class="line">    <span class="comment">//   elevator.style.opacity = 0</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// opacity 透明</span></span><br><span class="line">    elevator.<span class="property">style</span>.<span class="property">opacity</span> = n &gt;= entry.<span class="property">offsetTop</span> ? <span class="number">1</span> : <span class="number">0</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 点击返回顶部</span></span><br><span class="line">  <span class="keyword">const</span> backTop = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#backTop&#x27;</span>)</span><br><span class="line">  backTop.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// document.documentElement.scrollTop = 0</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二模块 第三模块</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 2.点击页面滑动</span></span><br><span class="line">  <span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.xtx-elevator-list&#x27;</span>)</span><br><span class="line">  list.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span>)</span><br><span class="line">    <span class="comment">// 判断是a标签还必须是自定义属性</span></span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">tagName</span> === <span class="string">&#x27;A&#x27;</span> &amp;&amp; e.<span class="property">target</span>.<span class="property">dataset</span>.<span class="property">name</span>) &#123;</span><br><span class="line">      <span class="comment">// 获取active这个类名的对象 赋值</span></span><br><span class="line">      <span class="keyword">const</span> old = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.xtx-elevator-list .active&#x27;</span>)</span><br><span class="line">      <span class="comment">// console.log(old)  // null </span></span><br><span class="line">      <span class="comment">// 判断 如果有active这个类就移除没有就不删除返回null</span></span><br><span class="line">      <span class="keyword">if</span> (old) old.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">      <span class="comment">// 当前元素添加active(高亮)</span></span><br><span class="line">      e.<span class="property">target</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">      <span class="comment">// 获得自定义属性 new topic</span></span><br><span class="line">      <span class="comment">// console.log(e.target.dataset.name)</span></span><br><span class="line">      <span class="comment">// 根据小盒子的自定义属性值去选择对应的大盒子</span></span><br><span class="line">      <span class="comment">// console.log(document.querySelector(`.xtx_goods_$&#123;e.target.dataset.name&#125;`).offsetTop)</span></span><br><span class="line">      <span class="comment">// 获得对应大盒子的offsetTop</span></span><br><span class="line">      <span class="keyword">const</span> top = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">`.xtx_goods_<span class="subst">$&#123;e.target.dataset.name&#125;</span>`</span>).<span class="property">offsetTop</span> - <span class="number">100</span></span><br><span class="line">      <span class="comment">// 让页面滚动到对应的位置</span></span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> = top</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//3.页面滚动事件，可以根据大盒子添加小盒子</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 3.1先移除类</span></span><br><span class="line">    <span class="comment">// 获取active这个类名的对象 赋值</span></span><br><span class="line">    <span class="keyword">const</span> old = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.xtx-elevator-list .active&#x27;</span>)</span><br><span class="line">    <span class="comment">// console.log(old)  // null </span></span><br><span class="line">    <span class="comment">// 判断 如果有active这个类就移除没有就不删除返回null</span></span><br><span class="line">    <span class="keyword">if</span> (old) old.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">    <span class="comment">// 3.2 判断页面当前滑动的位置，选择小盒子</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取四个大盒子</span></span><br><span class="line">    <span class="keyword">const</span> news = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.xtx_goods_new&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> popular = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.xtx_goods_popular&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> brand = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.xtx_goods_brand&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> topic = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.xtx_goods_topic&#x27;</span>)</span><br><span class="line">    <span class="comment">// html的位置</span></span><br><span class="line">    <span class="keyword">const</span> n = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span></span><br><span class="line">    <span class="keyword">if</span> (n &gt;= news.<span class="property">offsetTop</span> &amp;&amp; n &lt; popular.<span class="property">offsetTop</span>) &#123;</span><br><span class="line">      <span class="comment">// [data-name=new] 属性选择器</span></span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;[data-name=new]&#x27;</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &gt;= popular.<span class="property">offsetTop</span> &amp;&amp; n &lt; brand.<span class="property">offsetTop</span>) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;[data-name=popular]&#x27;</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &gt;= brand.<span class="property">offsetTop</span> &amp;&amp; n &lt; topic.<span class="property">offsetTop</span>) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;[data-name=brand]&#x27;</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &gt;= topic.<span class="property">offsetTop</span>) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;[data-name=topic]&#x27;</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h6 id="tab栏切换"><a href="#tab栏切换" class="headerlink" title="tab栏切换"></a>tab栏切换</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1.给5个链接绑定鼠标经过事件</span></span><br><span class="line">    <span class="comment">// 1.1 获取a元素</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">as</span> = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.tab-nav a&#x27;</span>)</span><br><span class="line">    <span class="comment">// console.log(as)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">as</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="comment">// console.log(as[i])</span></span><br><span class="line">      <span class="keyword">as</span>[i].<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// console.log(&#x27;鼠标经过&#x27;)</span></span><br><span class="line">        <span class="comment">// 排他思想 移除类 添加类</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.tab-nav .active&#x27;</span>).<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">        <span class="comment">// 添加类  this 当前的a</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面五个大盒子 .item</span></span><br><span class="line">        <span class="comment">// 移除类</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.tab-content .active&#x27;</span>).<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">        <span class="comment">// 对应序号item 显示  添加acitve类</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">`.tab-content .item:nth-child(<span class="subst">$&#123;i + <span class="number">1</span>&#125;</span>)`</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;web-APIs&quot;&gt;&lt;a href=&quot;#web-APIs&quot; class=&quot;headerlink&quot; title=&quot;web APIs&quot;&gt;&lt;/a&gt;web APIs&lt;/h1&gt;&lt;p&gt;web APIs &lt;strong&gt;作用：&lt;/strong&gt;就是使用  js 去操作 html</summary>
      
    
    
    
    <category term="资料" scheme="http://example.com/categories/%E8%B5%84%E6%96%99/"/>
    
    
    <category term="Web Api" scheme="http://example.com/tags/Web-Api/"/>
    
  </entry>
  
  <entry>
    <title>初识(二)</title>
    <link href="http://example.com/2022/11/06/%E5%88%9D%E8%AF%86-%E4%BA%8C-JS/"/>
    <id>http://example.com/2022/11/06/%E5%88%9D%E8%AF%86-%E4%BA%8C-JS/</id>
    <published>2022-11-06T03:41:47.000Z</published>
    <updated>2022-11-06T03:42:47.080Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS进阶"><a href="#JS进阶" class="headerlink" title="JS进阶"></a>JS进阶</h2><h3 id="1-作用域"><a href="#1-作用域" class="headerlink" title="1-作用域"></a>1-作用域</h3><p>​作用域对程序执行的影响及作用域链的查找机制，使用闭包函数创建隔离作用域避免全局变量污染。</p><p> 作用域（scope）规定了变量能够被访问的“范围”，离开了这个“范围”变量便不能被访问， </p><p>​作用域分为：局部作用域   全局作用域</p><h4 id="1-1局部作用域"><a href="#1-1局部作用域" class="headerlink" title="1.1局部作用域"></a>1.1局部作用域</h4><p>​局部作用域分为函数作用域和块作用域。</p><h5 id="1-1-1函数作用域"><a href="#1-1-1函数作用域" class="headerlink" title="1.1.1函数作用域"></a>1.1.1函数作用域</h5><p>​在函数内部声明的变量只能在函数内部被访问，外部无法直接访问。</p><p>1.函数内部声明的变量，在函数外部无法被访问</p><p>2.函数的参数也是函数内部的局部变量</p><p>3.不同函数内部声明的变量无法互相访问</p><p>4.函数执行完毕后，函数内部的变量实际被清空了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数内部声明的变量可以在函数内部访问</span></span><br><span class="line">    <span class="comment">// function fn()&#123;</span></span><br><span class="line">    <span class="comment">//   let a = 10;</span></span><br><span class="line">    <span class="comment">//   console.log(a)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// fn();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数内部声明的变量，不可在函数外部所访问</span></span><br><span class="line">    <span class="comment">// function fn()&#123;</span></span><br><span class="line">    <span class="comment">//   let a = 10;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// fn();</span></span><br><span class="line">    <span class="comment">// console.log(a)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数的形参对应的作用域也是函数作用，在外部不能够被访问</span></span><br><span class="line">    <span class="comment">// function fn(x, y) &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(x)</span></span><br><span class="line">    <span class="comment">//   console.log(y)</span></span><br><span class="line">    <span class="comment">//   return x + y</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// fn(1, 2);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// function fn(x, y) &#123;</span></span><br><span class="line">    <span class="comment">//   return x + y</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// fn(1, 2);</span></span><br><span class="line">    <span class="comment">// console.log(x)</span></span><br><span class="line">    <span class="comment">// console.log(y)</span></span><br></pre></td></tr></table></figure><h5 id="1-1-2块级作用域"><a href="#1-1-2块级作用域" class="headerlink" title="1.1.2块级作用域"></a>1.1.2块级作用域</h5><p>在 JavaScript 中使用 { } 包裹的代码称为代码块，代码块内部声明的变量外部将【有可能】无法被访问。</p><p>1.let 声明的变量会产生块作用域，var不会产生块级作用域</p><p>2.const 声明的常量也会产生块级作用域</p><p>3.不同代码块之间的变量无法相互访问</p><p>4.推荐使用let 和 const</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if for switch while  对象不能产生作用域</span></span><br><span class="line"><span class="comment">//在&#123;&#125;内,通过const关键字声明变量，会产生块级作用域</span></span><br><span class="line">   <span class="comment">// if (true) &#123;</span></span><br><span class="line">   <span class="comment">//   const a = 10; </span></span><br><span class="line">   <span class="comment">// &#125;</span></span><br><span class="line">   <span class="comment">// console.log(a)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//在&#123;&#125;内,通过var关键字声明变量，不会产生块级作用域</span></span><br><span class="line">   <span class="comment">// if (true) &#123;</span></span><br><span class="line">   <span class="comment">//   var a = 10; </span></span><br><span class="line">   <span class="comment">// &#125;</span></span><br><span class="line">   <span class="comment">// console.log(a)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//不能说： &#123;&#125;对应的作用域就是块级作用、要看是哪个关键字声明的变量</span></span><br><span class="line">   <span class="comment">// let  const  声明的变量对应的作用域才是块级作用域</span></span><br></pre></td></tr></table></figure><h4 id="1-2全局作用域"><a href="#1-2全局作用域" class="headerlink" title="1.2全局作用域"></a>1.2全局作用域</h4><script>标签和.js文件的【最外层】就是所谓的全局作用域，在此声明的变量在函数内部也可以被访问。全局作用域中声明的变量，任何其它作用域都可以被访问注意：1.为window对象动态添加的属性默认也是全局的-不推荐2.函数中未使用任何关键字声明的变量为全局变量-不推荐3.尽可能少的声明全局变量，防止全局变量被污染<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局作用域内声明的变量可以再全局访问也可以在局部作用域内访问</span></span><br><span class="line">    <span class="comment">// let a = 10;</span></span><br><span class="line">    <span class="comment">// // console.log(a);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// function fn ()&#123;</span></span><br><span class="line">    <span class="comment">//   console.log(a)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// fn()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// window对象下挂载的变量对应的也是全局作用域 【不推荐】</span></span><br><span class="line">    <span class="comment">// window.a = 10; </span></span><br><span class="line">    <span class="comment">// function fn ()&#123;</span></span><br><span class="line">    <span class="comment">//   console.log(window.a)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// fn()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不使用任何关键字 声明的变量 对应的作用域也是全局作用域 [不推荐]</span></span><br><span class="line">    <span class="comment">// function fn()&#123;</span></span><br><span class="line">    <span class="comment">//   a =10</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// fn()</span></span><br><span class="line">    <span class="comment">// console.log(window.a)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// let var const</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只有var 关键字声明的变量，才会自动挂载到window上，let const 不会</span></span><br><span class="line">    <span class="keyword">const</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="number">10000</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">b</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">c</span>)</span><br></pre></td></tr></table></figure>#### 1.3作用域链作用域链本质上是底层的变量查找机制​在函数被执行时，会优先查找当前函数作用域中查找变量​如果当前作用域查找不到则会依次逐级查找父作用域直到全局作用域总结：1.嵌套关系的作用域串联起来形成了作用域链2.相同作用域链中按着从小到大的规则查找变量3.子作用域能够访问父作用域，父级作用域无法访问子级作用域<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">100</span>;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="comment">// let a = 10;</span></span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="comment">// let a = 1;</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title function_">fn2</span>()</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title function_">fn1</span>()</span><br></pre></td></tr></table></figure>#### 1.4 JS垃圾回收机制垃圾回收机制（Garbage Collection）简称GCJS中内存的分配和回收都是自动完成的，内存在不使用的时候会被垃圾回收器自动回收。正因为垃圾回收器的存在，许多人认为JS不用太关心内存管理的问题但如果不了解JS的内存管理机制，我们同样非常容易成内存泄漏（内存无法被回收）的情况不再用到的内存，没有及时释放，就叫做内存泄漏。所谓垃圾回收, 核心思想就是如何判断内存是否已经不再会被使用了, 如果是, 就视为垃圾, 释放掉##### 1.4.1内存的生命周期JS环境中分配的内存, 一般有如下生命周期：1.内存分配：当我们声明变量、函数、对象的时候，系统会自动为他们分配内存2.内存使用：即读写内存，也就是使用变量、函数等3.内存回收：使用完毕，由垃圾回收自动回收不再使用的内存说明：全局变量一般不会回收(关闭页面回收)； 一般情况下局部变量的值, 不用了, 会被自动回收掉##### 1.4.2 引用计数法IE采用的引用计数算法, 定义“内存不再使用”的标准很简单，就是看一个对象是否有指向它的引用。算法：1.跟踪记录每个值被引用的次数。2.如果这个值的被引用了一次，那么就记录次数13.多次引用会累加。4.如果减少一个引用就减1。5.如果引用次数是0 ，则释放内存。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line"><span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;pink老师&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">const</span> p = person</span><br><span class="line">person = <span class="number">1</span></span><br><span class="line">p = <span class="literal">null</span></span><br></pre></td></tr></table></figure>致命的问题：嵌套引用。如果两个对象相互引用，尽管他们已不再使用，垃圾回收器不会进行回收，导致内存泄露。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//因为他们的引用次数永远不会是0。这样的相互引用如果说很大量的存在就会导致大量的内存泄露</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> o2 = &#123;&#125;</span><br><span class="line">o1.<span class="property">a</span> = o2</span><br><span class="line">o2.<span class="property">a</span> = o1</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;引用计数无法回收&#x27;</span> &#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure>##### 1.4.3 标记清除法现代的浏览器已经不再使用引用计数算法了。现代浏览器通用的大多是基于标记清除算法的某些改进算法，总体思想都是一致的。核心：1.标记清除算法将“不再使用的对象”定义为“无法达到的对象”。2.就是从根部（在JS中就是全局对象）出发定时扫描内存中的对象。 凡是能从根部到达的对象，都是还需要使用的。3.那些无法由根部出发触及到的对象被标记为不再使用，稍后进 行回收。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根部已经访问不到，所以自动清除</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> o2 = &#123;&#125;</span><br><span class="line">o1.<span class="property">a</span> = o2</span><br><span class="line">o2.<span class="property">a</span> = o1</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;引用计数无法回收&#x27;</span> &#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure>#### 1.5 闭包概念：一个函数对周围状态的引用捆绑在一起，内层函数中访问到其外层函数的作用域简单理解：闭包 = 内层函数 + 外层函数的变量闭包作用：封闭数据，提供操作，外部也可以访问函数内部的变量<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// console.log(fn);</span></span><br><span class="line">      <span class="keyword">return</span> fn</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//fun==&gt; outer() ==&gt; fn ==&gt; function fn() &#123; console.log(a) &#125;</span></span><br><span class="line">    <span class="keyword">let</span> fun = <span class="title function_">outer</span>();</span><br><span class="line">    <span class="comment">// console.log(fun);</span></span><br><span class="line">    <span class="title function_">fun</span>()  <span class="comment">//调用函数  外部函数使用内部函数的变量</span></span><br></pre></td></tr></table></figure>闭包应用：实现数据的私有比如，我们要做个统计函数调用次数，函数调用一次，就++<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> i = <span class="number">0</span>; <span class="comment">//长驻内存</span></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`第<span class="subst">$&#123;i&#125;</span>次调用函数`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> fn</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> fun = <span class="title function_">outer</span>();</span><br><span class="line">    <span class="title function_">fun</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确定了fun 不再被调用的时候</span></span><br><span class="line">    fun = <span class="literal">null</span>; <span class="comment">//函数变成  不可达了</span></span><br></pre></td></tr></table></figure>闭包可能引起的问题：内存泄漏#### 1.6变量提升变量提升是 JavaScript 中比较“奇怪”的现象，它允许在变量声明之前即被访问（仅存在于var声明变量）只提升变量声明， 不提升变量赋值注意：1.变量在未声明即被访问时会报语法错误2.变量在var声明之前即被访问，变量的值为 undefined3.let/const 声明的变量不存在变量提升4.变量提升出现在相同作用域当中5.实际开发中推荐先声明再访问变量<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量提升 提升的仅仅是声明 而不提升赋值</span></span><br><span class="line">   <span class="comment">// console.log(a)</span></span><br><span class="line">   <span class="comment">// var a = 10;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// ===相当于</span></span><br><span class="line">   <span class="comment">// var a;</span></span><br><span class="line">   <span class="comment">// console.log(a)</span></span><br><span class="line">   <span class="comment">// a = 10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//变量提升 仅仅提升在当前作用域的最前端</span></span><br><span class="line">   <span class="comment">// function fn() &#123;</span></span><br><span class="line">   <span class="comment">//   console.log(a)</span></span><br><span class="line">   <span class="comment">//   var a = 10</span></span><br><span class="line">   <span class="comment">// &#125;</span></span><br><span class="line">   <span class="comment">// fn()</span></span><br><span class="line">   <span class="comment">// console.log(a)</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// let 和 const  存在变量提升 </span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">   <span class="comment">// let a = 10;</span></span><br><span class="line">   <span class="keyword">const</span> a = <span class="number">10</span>; </span><br></pre></td></tr></table></figure>### 2-函数进阶#### 2.1函数提升函数提升与变量提升比较类似，是指函数在声明之前即可被调用。1.函数提升能够使函数的声明调用更灵活2.函数表达式不存在提升的现象3.函数提升出现在相同作用域当中注意：函数表达式不存在提升现象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数提升，函数可以在函数声明之前调用</span></span><br><span class="line">    <span class="comment">// fn();</span></span><br><span class="line">    <span class="comment">// function fn()&#123;</span></span><br><span class="line">    <span class="comment">//   console.log(1)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 相当于</span></span><br><span class="line">    <span class="comment">// function fn() &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(1)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// fn(); </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// fn()</span></span><br><span class="line">    <span class="comment">// var fn = function () &#123; </span></span><br><span class="line">    <span class="comment">//   console.log(1)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//相当于</span></span><br><span class="line">    <span class="comment">// var fn;</span></span><br><span class="line">    <span class="comment">// fn()</span></span><br><span class="line">    <span class="comment">// fn = function () &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(1)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当变量和函数同时存在提升的时候，函数的优先级高</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(fn)</span><br><span class="line">    <span class="keyword">var</span> fn = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1234</span>)</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure>#### 2.2函数参数产品需求： 写一个求和函数不管用户传入几个实参，都要把和求出来实线：1.动态参数  2.剩余参数##### 2.2.1动态参数（arguments ）arguments 是函数内部内置的伪数组变量，它包含了调用函数时传入的所有实参1.arguments 是一个伪数组，只存在于函数中2.arguments 的作用是动态获取函数的实参3.可以通过for循环依次得到传递过来的实参<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// console.log(arguments)</span></span><br><span class="line">      <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        sum += <span class="variable language_">arguments</span>[i]</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getSum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    <span class="title function_">getSum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">    <span class="title function_">getSum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure>##### 2.2.2剩余参数（...other）剩余参数允许我们将一个不定数量的参数表示为一个数组1、 ... 是语法符号，置于最末函数形参之前，用于获取多余的实参2、借助 ... 获取的剩余实参，是个真数组开发中，还是提倡多使用 剩余参数。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 剩余参数</span></span><br><span class="line">   <span class="comment">// 语法：  ...变量名，只能放在函数形参的最末尾</span></span><br><span class="line">   <span class="comment">// 作用：可以拿到所有的实参</span></span><br><span class="line">   <span class="comment">// 变量名是一个真数组</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">...arr</span>) &#123;</span><br><span class="line">     <span class="comment">// console.log(arr)</span></span><br><span class="line">     <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">       sum += arr[i]</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(sum)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title function_">getSum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">   <span class="title function_">getSum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">   <span class="title function_">getSum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure>剩余参数和动态参数区别是什么？开发中提倡使用哪一个？1.动态参数是伪数组2.剩余参数是真数组区别：开发中使用剩余参数想必也是极好的#### 2.3 展开运算符展开运算符(…),将一个数组进行展开典型运用场景： 求数组最大值(最小值)、合并数组等<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 展开运算符</span></span><br><span class="line">   <span class="comment">// 语法： ...arr</span></span><br><span class="line">   <span class="comment">// 特点：不会影响元素组</span></span><br><span class="line">   <span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(...arr) <span class="comment">//？1,2,3,4</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以利用展开运算符 求最大值 最小值 数组合并</span></span><br><span class="line">    <span class="comment">// const max = Math.max(1, 2, 3, 4, 5)</span></span><br><span class="line">    <span class="comment">// console.log(max)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求最大值</span></span><br><span class="line">    <span class="comment">// const arr = [1, 2, 3, 4, 5]</span></span><br><span class="line">    <span class="comment">// const max = Math.max(...arr)</span></span><br><span class="line">    <span class="comment">// console.log(max)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求最小值</span></span><br><span class="line">    <span class="comment">// const arr = [1, 2, 3, 4, 5]</span></span><br><span class="line">    <span class="comment">// const min = Math.min(...arr)</span></span><br><span class="line">    <span class="comment">// console.log(min)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组合并</span></span><br><span class="line">    <span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">8</span>]</span><br><span class="line">    <span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">    <span class="comment">// const arr3 = [1, 2, 3, 4, 5, 6,8];</span></span><br><span class="line">    <span class="keyword">const</span> arr3 = [...arr1, ...arr2]</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr3)</span><br></pre></td></tr></table></figure>##### 展开运算符 or 剩余参数剩余参数：函数参数使用，得到真数组展开运算符：数组中使用，数组展开#### 2.4箭头函数引入箭头函数的目的是更简短的函数写法并且不绑定this，箭头函数的语法比函数表达式更简洁<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 基本语法</span></span><br><span class="line">  <span class="comment">// const fn = () =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(123)</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 传参</span></span><br><span class="line">  <span class="comment">// const fn = (x) =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(x)</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// fn(1)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 只有一个形参的时候可以省略小括号</span></span><br><span class="line">  <span class="comment">// const fn = x =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(x)</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// fn(1)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 只有一行代码的时候 可以省略大括号</span></span><br><span class="line">  <span class="comment">// const fn = x =&gt; console.log(x)</span></span><br><span class="line">  <span class="comment">// fn(2)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 只有一行代码可以省略return</span></span><br><span class="line">  <span class="comment">// const fn = x =&gt; x + x</span></span><br><span class="line">  <span class="comment">// console.log(fn(2))</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 直接返回对象</span></span><br><span class="line">  <span class="comment">// const fn = uname =&gt; (&#123; uname: uname &#125;)</span></span><br><span class="line">  <span class="comment">// console.log(fn(&#x27;刘德华&#x27;))</span></span><br></pre></td></tr></table></figure>1.箭头函数属于表达式函数，因此不存在函数提升2.箭头函数只有一个参数时可以省略圆括号 ()3.箭头函数函数体只有一行代码时可以省略花括号 {}，并自动做为返回值被返回4.加括号的函数体返回对象字面量表达式##### 2.4.1 箭头函数参数1.普通函数有arguments 动态参数2.箭头函数没有 arguments 动态参数，但是有 剩余参数 ..args使用场景：箭头函数更适用于那些本来需要匿名函数的地方<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 箭头函数求和</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getSum</span> = (<span class="params">...arr</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      sum += arr[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getSum</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure>##### 2.4.2 箭头函数 this在箭头函数出现之前，每一个新函数根据它是被如何调用的来定义这个函数的this值， 非常令人讨厌。箭头函数不会创建自己的this,它只会从自己的作用域链的上一层沿用this。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">//此处为window</span></span><br><span class="line">cosnt sayHi = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">//普通函数指向调用者  此处为window</span></span><br><span class="line">&#125;</span><br><span class="line">btn.<span class="property">addEventListener</span> (<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)   <span class="comment">//当前this 指向btn</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">//此处为window</span></span><br><span class="line">cosnt sayHi =<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">//箭头函数此处为window</span></span><br><span class="line">&#125;</span><br><span class="line">btn.<span class="property">addEventListener</span> (<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)   <span class="comment">//当前this 指向window</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span></span><br><span class="line">  <span class="attr">sleep</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">//指向 user</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">//指向user  该箭头函数中的 this 与 sleep 中的 this 一致</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="title function_">fn</span>()  <span class="comment">//调用箭头函数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">user.<span class="title function_">sleep</span>()</span><br></pre></td></tr></table></figure>### 3-解构赋值解构赋值是一种快速为变量赋值的简洁语法，本质上仍然是为变量赋值。分为：数组解构 对象解构#### 3.1数组解构数组解构是将数组的单元值快速批量赋值给一系列变量的简洁语法。基本语法：1.赋值运算符 = 左侧的 [] 用于批量声明变量，右侧数组的单元值将被赋值给左侧的变量2.变量的顺序对应数组单元值的位置依次进行赋值操作 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">100</span>, <span class="number">60</span>, <span class="number">80</span>]</span><br><span class="line">   <span class="keyword">const</span> [max, min, avg] = arr</span><br><span class="line">   <span class="comment">//const [max, min, avg] = [100, 60, 80]</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(max)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(avg)</span><br><span class="line">   <span class="comment">// 交换两个变量</span></span><br><span class="line">   <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">   <span class="keyword">let</span> b = <span class="number">2</span>;  <span class="comment">//必须写;</span></span><br><span class="line">   [b, a] = [a, b]</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b)</span><br></pre></td></tr></table></figure>注意： js 前面必须加分号情况Js 前面有两哪种情况需要加分号的1.立即执行函数2.数组解构独立完成数组解构赋值需求①： 有个数组： const pc = ['海尔', '联想', '小米', '方正']解构为变量: hr lx mi fz需求②：请将最大值和最小值函数返回值解构 max 和min 两个变量<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pc = [<span class="string">&#x27;海尔&#x27;</span>, <span class="string">&#x27;联想&#x27;</span>, <span class="string">&#x27;小米&#x27;</span>, <span class="string">&#x27;方正&#x27;</span>]</span><br><span class="line">   <span class="keyword">const</span> [hr, lx, mi, fz] = pc</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(hr)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(lx)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(mi)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(fz)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> [<span class="number">100</span>, <span class="number">60</span>]</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">const</span> [max, min] = <span class="title function_">getValue</span>()</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(max, min)</span><br></pre></td></tr></table></figure>##### 3.1.1变量多 单元值少的情况<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cosnt [a, b, c, d] = [<span class="string">&#x27;小米&#x27;</span>, <span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;华为&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)<span class="comment">//小米</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)<span class="comment">//苹果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c)<span class="comment">//华为</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d)<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>变量的数量大于单元值数量时，多余的变量将被赋值为 undefined防止有undefined传递单元值的情况，可以设置默认值<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cosnt [a = <span class="string">&#x27;手机&#x27;</span>, b = <span class="string">&#x27;华为&#x27;</span>] = [<span class="string">&#x27;小米&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)<span class="comment">//小米</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)<span class="comment">//华为</span></span><br></pre></td></tr></table></figure>允许初始化变量的默认值，且只有单元值为 undefined 时默认值才会生效##### 3.1.2变量少 单元值多的情况<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cosnt [a, b, c] = [<span class="string">&#x27;小米&#x27;</span>, <span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;华为&#x27;</span>, <span class="string">&#x27;格力&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)<span class="comment">//小米</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)<span class="comment">//苹果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c)<span class="comment">//华为</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d)<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>利用剩余参数解决变量少 单元值多的情况<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cosnt [a, b, ...tel] = [<span class="string">&#x27;小米&#x27;</span>, <span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;华为&#x27;</span>, <span class="string">&#x27;格力&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)<span class="comment">//小米</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)<span class="comment">//苹果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c)<span class="comment">//[&#x27;华为&#x27;, &#x27;格力&#x27;]</span></span><br></pre></td></tr></table></figure>剩余参数返回的还是一个数组  但只能置于最末尾##### 3.1.3按需导入，忽略某些返回值<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cosnt [a, ,c, d] = [<span class="string">&#x27;小米&#x27;</span>, <span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;华为&#x27;</span>, <span class="string">&#x27;格力&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)<span class="comment">//小米</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c)<span class="comment">//华为</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d)<span class="comment">//格力</span></span><br></pre></td></tr></table></figure>##### 3.1.4支持多维数组的结构<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b] = [<span class="string">&#x27;苹果&#x27;</span>, [<span class="string">&#x27;小米&#x27;</span>, <span class="string">&#x27;华为&#x27;</span>]]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)<span class="comment">//苹果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)<span class="comment">//[&#x27;小米&#x27;, &#x27;华为&#x27;]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如何拿到小米华为？</span></span><br><span class="line"><span class="keyword">const</span> [a, [b, c]] = [<span class="string">&#x27;苹果&#x27;</span>, [<span class="string">&#x27;小米&#x27;</span>, <span class="string">&#x27;华为&#x27;</span>]]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)<span class="comment">//苹果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)<span class="comment">//小米</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c)<span class="comment">//华为</span></span><br></pre></td></tr></table></figure>#### 3.2对象解构对象解构是将对象属性和方法快速批量赋值给一系列变量的简洁语法基本语法：1.赋值运算符 = 左侧的 {} 用于批量声明变量，右侧对象的属性值将被赋值给左侧的变量2.对象属性的值将被赋值给与属性名相同的变量3.注意解构的变量名不要和外面的变量名冲突否则报错4.对象中找不到与变量名一致的属性时变量值为 undefined<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">      <span class="attr">uname</span>: <span class="string">&#x27;熊大&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> &#123; uname, age &#125; = &#123; <span class="attr">uname</span>: <span class="string">&#x27;熊大&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span> &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(uname)<span class="comment">//熊大</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age)<span class="comment">//18</span></span><br></pre></td></tr></table></figure>###### 给新的变量名赋值可以从一个对象中提取变量并同时修改新的变量名<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="attr">uname</span>:username, age &#125; = &#123; <span class="attr">uname</span>: <span class="string">&#x27;熊大&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;18&#x27;</span> &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(username)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br><span class="line">    <span class="comment">//冒号表示“什么值：赋值给谁”</span></span><br></pre></td></tr></table></figure>##### 3.2.1数组对象解构<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pig = [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">uname</span>: <span class="string">&#x27;佩奇&#x27;</span>,</span><br><span class="line">        <span class="attr">weight</span>: <span class="number">200</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [&#123; uname, weight &#125;] = [&#123; <span class="attr">uname</span>: <span class="string">&#x27;佩奇&#x27;</span>, <span class="attr">weight</span>: <span class="string">&#x27;200kg&#x27;</span> &#125;]</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(uname)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(weight)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pig = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;佩奇&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">6</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> &#123; name, age &#125; = &#123;<span class="attr">name</span>: <span class="string">&#x27;佩奇&#x27;</span>,<span class="attr">age</span>: <span class="number">6</span>&#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">name</span>:uname, age &#125; = &#123;<span class="attr">name</span>: <span class="string">&#x27;佩奇&#x27;</span>,<span class="attr">age</span>: <span class="number">6</span>&#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(uname,age)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> goods = [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">goodsName</span>: <span class="string">&#x27;小米&#x27;</span>,</span><br><span class="line">        <span class="attr">price</span>: <span class="number">1999</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [&#123;goodsName, price&#125;] = [&#123; <span class="attr">goodsName</span>: <span class="string">&#x27;小米&#x27;</span>, <span class="attr">price</span>: <span class="number">1999</span> &#125;]</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(goodsName,price)</span><br></pre></td></tr></table></figure>##### 3.2.2多级对象解构<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pig = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;佩奇&#x27;</span>,</span><br><span class="line"><span class="attr">family</span>: &#123;</span><br><span class="line"><span class="attr">mother</span>: <span class="string">&#x27;猪妈妈&#x27;</span>,</span><br><span class="line"><span class="attr">father</span>: <span class="string">&#x27;猪爸爸&#x27;</span>,</span><br><span class="line"><span class="attr">sister</span>: <span class="string">&#x27;乔治&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">age</span>: <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> &#123; name, <span class="attr">family</span>: &#123; mother, father, sister&#125;&#125; = pig</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name)<span class="comment">//佩奇</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mother)<span class="comment">//猪妈妈</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(father)<span class="comment">//猪爸爸</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sister)<span class="comment">//乔治</span></span><br></pre></td></tr></table></figure>案例<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.传递的数据</span></span><br><span class="line">   <span class="keyword">const</span> msg = &#123;</span><br><span class="line">     <span class="string">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line">     <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;获取新闻列表成功&quot;</span>,</span><br><span class="line">     <span class="string">&quot;data&quot;</span>: [</span><br><span class="line">       &#123;</span><br><span class="line">         <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">         <span class="string">&quot;title&quot;</span>: <span class="string">&quot;5G商用自己，三大运营商收入下降&quot;</span>,</span><br><span class="line">         <span class="string">&quot;count&quot;</span>: <span class="number">58</span></span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">         <span class="string">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">         <span class="string">&quot;title&quot;</span>: <span class="string">&quot;国际媒体&quot;</span>,</span><br><span class="line">         <span class="string">&quot;count&quot;</span>: <span class="number">56</span></span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">         <span class="string">&quot;id&quot;</span>: <span class="number">3</span>,</span><br><span class="line">         <span class="string">&quot;title&quot;</span>: <span class="string">&quot;俄乌冲突&quot;</span>,</span><br><span class="line">         <span class="string">&quot;count&quot;</span>: <span class="number">199</span></span><br><span class="line">       &#125;,</span><br><span class="line">     ]</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 需求1：请将意思msg对象 采用解构的方式  只选出 data </span></span><br><span class="line">   <span class="keyword">const</span> &#123; data &#125; = msg</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">   <span class="comment">// 需求2：上面msg是后天传递的数据 我们需要把data 选出来当做参数传递给 函数</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">&#123; data &#125;</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title function_">render</span>(msg)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 需求3：为了防止msg里面的data名字混淆 要求渲染函数里面的数据名改为 myData</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">&#123; data: myData &#125;</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(myData)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title function_">render</span>(msg)</span><br></pre></td></tr></table></figure>#### 3.3遍历数组 forEach 方法forEach() 方法用于调用数组的每个元素，并将元素传递给回调函数 主要使用场景： 遍历数组的每个元素    参数当前数组元素是必须要写的， 索引号可选语法：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">被遍历的数组.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">当前数组元素, 当前元素索引号</span>)&#123;</span><br><span class="line">  函数体</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>]</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item, index</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`当前数组元素是：<span class="subst">$&#123;item&#125;</span>`</span>)<span class="comment">//依次打印数组每一个元素</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`当前数组元素的索引号是：<span class="subst">$&#123;index&#125;</span>`</span>)<span class="comment">//依次打印数组每一个元素的索引号</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>#### 3.4筛选数组 filter 方法filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素主要使用场景： 筛选数组符合条件的元素，并返回筛选之后元素的新数组语法：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">被遍历的数组.<span class="property">filter</span> (<span class="keyword">function</span> (<span class="params">当前数组元素, 当前元素索引号</span>)&#123;</span><br><span class="line">  函数体</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>返回值：返回数组，包含了符合条件的所有元素。如果没有符合条件的元素则返回空数组参数：当前数组元素 必须写， 索引号 可选因为返回新数组，所以不会影响原数组<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//筛选数组中大于30的元素</span></span><br><span class="line"><span class="keyword">const</span> score = [<span class="number">10</span>, <span class="number">50</span>, <span class="number">3</span>, <span class="number">40</span>, <span class="number">33</span>]</span><br><span class="line"><span class="keyword">const</span> re = score.<span class="title function_">filter</span>( <span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">30</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re)  <span class="comment">//[50, 40, 33]</span></span><br></pre></td></tr></table></figure>### 4-深入对象#### 4.1创建对象三种方式##### 4.1.1利用对象字面量创建对象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;佩奇&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>##### 4.1.2利用 new Object 创建对象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = <span class="keyword">new</span> <span class="title class_">Object</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;佩奇&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o)   <span class="comment">//&#123;name: &#x27;佩奇&#x27;&#125;</span></span><br></pre></td></tr></table></figure>##### 4.1.3利用构造函数创建对象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建构造函数</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">Pig</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">uname</span> = uname</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">   <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Pig</span>(<span class="string">&#x27;佩奇&#x27;</span>, <span class="number">6</span>)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(p)</span><br></pre></td></tr></table></figure>#### 4.2构造函数构造函数 ：是一种特殊的函数，主要用来初始化对象使用场景：常规的 {...} 语法允许创建一个对象。比如我们创建了佩奇的对象，继续创建乔治的对象还需要重新写一遍，此时可以通过构造函数来快速创建多个类似的对象。构造函数在技术上是常规函数。注意：不过有两个约定：1.它们的命名以大写字母开头。2.它们只能由 "new" 操作符来执行。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Goods</span>(<span class="params">name, price, count</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">price</span> = price</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span> = count</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> mi = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&#x27;小米&#x27;</span>, <span class="number">1999</span>, <span class="number">20</span>)</span><br><span class="line">    <span class="keyword">const</span> hw = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&#x27;华为&#x27;</span>, <span class="number">2999</span>, <span class="number">50</span>)</span><br><span class="line">    <span class="keyword">const</span> vo = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&#x27;vivo&#x27;</span>, <span class="number">1888</span>, <span class="number">60</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(mi)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(hw)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(vo)</span><br></pre></td></tr></table></figure>说明：1.使用 new 关键字调用函数的行为被称为实例化2.实例化构造函数时没有参数时可以省略 ()3.构造函数内部无需写return，返回值即为新创建的对象4.构造函数内部的 return 返回的简单类型值无效，引用类型的值会被返回。所以不要写return5.new Object（） new Date（） 也是实例化构造函数实例化执行过程1.创建新空对象2.构造函数this指向新对象3.执行构造函数代码，修改this，添加新的属性4.返回新对象#### 4.3实例成员&静态成员##### 4.3.1实例成员：通过构造函数创建的对象称为实例对象，实例对象中的属性和方法称为实例成员。说明： 1.实例对象的属性和方法即为实例成员2.为构造函数传入参数，动态创建结构相同但值不同的对象3.构造函数创建的实例对象彼此独立互不影响。##### 4.3.2静态成员：构造函数的属性和方法被称为静态成员说明： 1.构造函数的属性和方法被称为静态成员2.一般公共特征的属性或方法静态成员设置为静态成员3.静态成员方法中的 this 指向构造函数本身### 5-内置构造函数#### 5.1 ObjectObject 是内置的构造函数，用于创建普通对象。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> <span class="title class_">Object</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>推荐使用字面量方式声明对象，而不是 Object 构造函数##### 5.1.1  学习三个常用静态方法（静态方法就是只有构造函数Object可以调用的）Object.keys 静态方法获取对象中所有属性（键）返回的是一个数组Object.values 静态方法获取对象中所有属性值返回的是一个数组Object. assign 静态方法常用于对象拷贝<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123; <span class="attr">name</span>: <span class="string">&#x27;熊大&#x27;</span>, <span class="attr">age</span>: <span class="number">6</span> &#125;</span><br><span class="line">   <span class="comment">// 1.获得所有的属性名</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(o))</span><br><span class="line">   <span class="comment">// 2.获得所有的属性值</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(o))</span><br><span class="line">   <span class="comment">// 3.对象的拷贝</span></span><br><span class="line">   <span class="comment">// const oo = &#123;&#125;</span></span><br><span class="line">   <span class="comment">// Object.assign(oo, o)</span></span><br><span class="line">   <span class="comment">// console.log(oo)</span></span><br><span class="line">   <span class="title class_">Object</span>.<span class="title function_">assign</span>(o, &#123; <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span> &#125;)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(o)</span><br></pre></td></tr></table></figure>#### 5.2 Array##### 5.2.1 reducereduce 返回函数累计处理的结果，经常用于求和等语法：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">累计值, 当前元素 [,索引号][,源数组]</span>)&#123;&#125;,起始值)</span><br></pre></td></tr></table></figure>累计值参数：1.如果有起始值，则以起始值为准开始累计， 累计值 = 起始值2.如果没有起始值， 则累计值以数组的第一个数组元素作为起始值开始累计3.后面每次遍历就会用后面的数组元素 累计到 累计值 里面 （类似求和里面的 sum ）<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">   <span class="comment">// arr.reduce(function(累计值, 当前元素)&#123;&#125;,起始值)</span></span><br><span class="line">   arr.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">prev, item</span>) &#123;</span><br><span class="line">     <span class="comment">// console.log(prev)</span></span><br><span class="line">     <span class="keyword">return</span> prev + item</span><br><span class="line">   &#125;, <span class="number">0</span>)</span><br><span class="line">   <span class="keyword">const</span> re = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, item</span>) =&gt;</span> prev + item)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(re)</span><br></pre></td></tr></table></figure>##### 5.2.2 数组常见方法-其他方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// join字符串拼接</span></span><br><span class="line">   <span class="keyword">const</span> sj = [<span class="string">&#x27;2022&#x27;</span>, <span class="string">&#x27;07&#x27;</span>, <span class="string">&#x27;01&#x27;</span>]</span><br><span class="line">   <span class="keyword">const</span> str = sj.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// find 查找元素 返回符合条件的第一个数组元素值</span></span><br><span class="line">   <span class="keyword">const</span> arr1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]</span><br><span class="line">   <span class="comment">// const newArr1 = arr1.find(function (item) &#123;</span></span><br><span class="line">   <span class="comment">//   return item &gt;= 40</span></span><br><span class="line">   <span class="comment">// &#125;)</span></span><br><span class="line">   <span class="comment">// const newArr1 = arr1.find(item =&gt; item &gt;= 40)</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">// findIndex 查找索引号</span></span><br><span class="line">   <span class="comment">// const newArr1 = arr1.findIndex(function (item) &#123;</span></span><br><span class="line">   <span class="comment">//   return item &gt;= 40</span></span><br><span class="line">   <span class="comment">// &#125;)</span></span><br><span class="line">   <span class="comment">// console.log(newArr1)</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// every 检查数组所有元素都是否满足条件</span></span><br><span class="line">   <span class="comment">// const groupScore = [40, 80, 90, 100]</span></span><br><span class="line">   <span class="comment">// const result = groupScore.every(function (item) &#123;</span></span><br><span class="line">   <span class="comment">//   return item &gt;= 80</span></span><br><span class="line">   <span class="comment">// &#125;)</span></span><br><span class="line">   <span class="comment">// console.log(result)    //flase</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// some 检查数组中是否有满足条件</span></span><br><span class="line">   <span class="keyword">const</span> groupScore = [<span class="number">40</span>, <span class="number">80</span>, <span class="number">90</span>, <span class="number">100</span>]</span><br><span class="line">   <span class="keyword">const</span> result = groupScore.<span class="title function_">some</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> item &gt;= <span class="number">90</span></span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(result)   <span class="comment">//true</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">//Array.from() 伪数组转为真数组</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">const</span> re= <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, item</span>) =&gt;</span> prev + item)</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(re)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title function_">getSum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure>![Snipaste_2022-07-01_18-09-31](E:\能放\前端\截图\js进阶\Snipaste_2022-07-01_18-09-31.png)#### 5.3 String在 JavaScript 中的字符串、数值、布尔具有对象的使用特征，如具有属性和方法之所以具有对象特征的原因是字符串、数值、布尔类型数据是 JavaScript 底层使用 Object 构造函数“包装”来的，被称为包装类型。![Snipaste_2022-07-01_18-28-45](E:\能放\前端\截图\js进阶\Snipaste_2022-07-01_18-28-45.png)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.split 把字符串分割 返回数组 和 join() 相反</span></span><br><span class="line">    <span class="comment">// const str1 = &#x27;abcd,efg&#x27;</span></span><br><span class="line">    <span class="comment">// const arr = str1.split(&#x27;,&#x27;)</span></span><br><span class="line">    <span class="comment">// const str2 = &#x27;2022-06-27&#x27;</span></span><br><span class="line">    <span class="comment">// const arr1 = str2.split(&#x27;-&#x27;)</span></span><br><span class="line">    <span class="comment">// console.log(arr)</span></span><br><span class="line">    <span class="comment">// console.log(arr1)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.字符串截取 substring(开始的索引号[,结束的索引号])</span></span><br><span class="line">    <span class="comment">// 如果省略结束的索引号，默认取到最后</span></span><br><span class="line">    <span class="comment">// 结束的索引号不包含想要截取的部分</span></span><br><span class="line">    <span class="comment">// const str = &#x27;了空间和规范的撒&#x27;</span></span><br><span class="line">    <span class="comment">// console.log(str.substring(1, 3))//空间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.startsWith 判断是不是以某个字符开头</span></span><br><span class="line">    <span class="comment">// const str = &#x27;abcdefg&#x27;</span></span><br><span class="line">    <span class="comment">// console.log(str.startsWith(&#x27;abc&#x27;)) //返回true</span></span><br><span class="line">    <span class="comment">// console.log(str.startsWith(&#x27;bcd&#x27;)) //返回false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.includes 判断某个字符串是不是包含在一个字符串里</span></span><br><span class="line">    <span class="comment">// const str = &#x27;abcdefg&#x27;</span></span><br><span class="line">    <span class="comment">// console.log(str.includes(&#x27;bce&#x27;)) //返回true</span></span><br><span class="line">    <span class="comment">// console.log(str.includes(&#x27;fgh&#x27;)) //返回false</span></span><br><span class="line">    <span class="comment">// console.log(str.includes(&#x27;abc&#x27;,1)) //返回false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5. length 用来获取字符串的长度</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;今天天气真好666！&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>)<span class="comment">//10</span></span><br></pre></td></tr></table></figure>#### 5.4 NumberNumber 是内置的构造函数，用于创建数值常用方法：toFixed() 设置保留小数位的长度<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> price = <span class="number">12.345</span></span><br><span class="line"><span class="keyword">const</span> price2 = <span class="number">12.385</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(price.<span class="title function_">toFixed</span>(<span class="number">2</span>))  <span class="comment">//12.35 保留两位小数 假四舍五入</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(price2.<span class="title function_">toFixed</span>(<span class="number">2</span>))  <span class="comment">//12.38 保留两位小数 假四舍五入</span></span><br></pre></td></tr></table></figure>小案例<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const gift = &#x27;50g的茶叶,清洗球&#x27;</span></span><br><span class="line">    <span class="comment">// // 1.把字符串拆分为数组</span></span><br><span class="line">    <span class="comment">// console.log( gift.split(&#x27;,&#x27;))</span></span><br><span class="line">    <span class="comment">// // 2.根据数组元素的个数，生成对应 span 标签</span></span><br><span class="line">    <span class="comment">// const str = gift.split(&#x27;,&#x27;).map(function (item) &#123;</span></span><br><span class="line">    <span class="comment">//   return `&lt;span&gt;【赠品】 $&#123;item&#125;&lt;/span&gt;&lt;/br&gt;`</span></span><br><span class="line">    <span class="comment">// &#125;).join(&#x27;&#x27;)</span></span><br><span class="line">    <span class="comment">// console.log(str)</span></span><br><span class="line">    <span class="comment">// document.querySelector(&#x27;div&#x27;).innerHTML = str</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> gift = <span class="string">&#x27;50g的茶叶,清洗球&#x27;</span></span><br><span class="line">    <span class="comment">// 1.把字符串拆分为数组</span></span><br><span class="line">    <span class="comment">// 2.根据数组元素的个数，生成对应 span 标签  </span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>).<span class="property">innerHTML</span> = gift.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>).<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="string">`&lt;span&gt;【赠品】 <span class="subst">$&#123;item&#125;</span>&lt;/span&gt;&lt;/br&gt;`</span>).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>#### 综合案例<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">     <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">     <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">     <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.list</span> &#123;</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">990px</span>;</span><br><span class="line">     <span class="attribute">margin</span>: <span class="number">100px</span> auto <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.item</span> &#123;</span><br><span class="line">     <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">     <span class="attribute">transition</span>: all .<span class="number">5s</span>;</span><br><span class="line">     <span class="attribute">display</span>: flex;</span><br><span class="line">     <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#e4e4e4</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>n) &#123;</span><br><span class="line">     <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.item</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">     <span class="attribute">cursor</span>: pointer;</span><br><span class="line">     <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.item</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">     <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.item</span> <span class="selector-class">.name</span> &#123;</span><br><span class="line">     <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">     <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">     <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">     <span class="attribute">flex</span>: <span class="number">2</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.item</span> <span class="selector-class">.name</span> <span class="selector-class">.tag</span> &#123;</span><br><span class="line">     <span class="attribute">display</span>: block;</span><br><span class="line">     <span class="attribute">padding</span>: <span class="number">2px</span>;</span><br><span class="line">     <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">     <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.item</span> <span class="selector-class">.price</span>,</span><br><span class="line">   <span class="selector-class">.item</span> <span class="selector-class">.sub-total</span> &#123;</span><br><span class="line">     <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">     <span class="attribute">color</span>: firebrick;</span><br><span class="line">     <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.item</span> <span class="selector-class">.price</span><span class="selector-pseudo">::before</span>,</span><br><span class="line">   <span class="selector-class">.item</span> <span class="selector-class">.sub-total</span><span class="selector-pseudo">::before</span>,</span><br><span class="line">   <span class="selector-class">.amount</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">     <span class="attribute">content</span>: <span class="string">&quot;¥&quot;</span>;</span><br><span class="line">     <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.item</span> <span class="selector-class">.spec</span> &#123;</span><br><span class="line">     <span class="attribute">flex</span>: <span class="number">2</span>;</span><br><span class="line">     <span class="attribute">color</span>: <span class="number">#888</span>;</span><br><span class="line">     <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.item</span> <span class="selector-class">.count</span> &#123;</span><br><span class="line">     <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">     <span class="attribute">color</span>: <span class="number">#aaa</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.total</span> &#123;</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">990px</span>;</span><br><span class="line">     <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">     <span class="attribute">display</span>: flex;</span><br><span class="line">     <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">     <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#e4e4e4</span>;</span><br><span class="line">     <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.total</span> <span class="selector-class">.amount</span> &#123;</span><br><span class="line">     <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">     <span class="attribute">color</span>: firebrick;</span><br><span class="line">     <span class="attribute">font-weight</span>: bold;</span><br><span class="line">     <span class="attribute">margin-right</span>: <span class="number">50px</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;div class=&quot;item&quot;&gt;</span></span><br><span class="line"><span class="comment">      &lt;img src=&quot;https://yanxuan-item.nosdn.127.net/84a59ff9c58a77032564e61f716846d6.jpg&quot; alt=&quot;&quot;&gt;</span></span><br><span class="line"><span class="comment">      &lt;p class=&quot;name&quot;&gt;称心如意手摇咖啡磨豆机咖啡豆研磨机 &lt;span class=&quot;tag&quot;&gt;【赠品】10优惠券&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">      &lt;p class=&quot;spec&quot;&gt;白色/10寸&lt;/p&gt;</span></span><br><span class="line"><span class="comment">      &lt;p class=&quot;price&quot;&gt;289.90&lt;/p&gt;</span></span><br><span class="line"><span class="comment">      &lt;p class=&quot;count&quot;&gt;x2&lt;/p&gt;</span></span><br><span class="line"><span class="comment">      &lt;p class=&quot;sub-total&quot;&gt;579.80&lt;/p&gt;</span></span><br><span class="line"><span class="comment">    &lt;/div&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;total&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>合计：<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;amount&quot;</span>&gt;</span>1000.00<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> goodsList = [</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="attr">id</span>: <span class="string">&#x27;4001172&#x27;</span>,</span><br><span class="line">       <span class="attr">name</span>: <span class="string">&#x27;称心如意手摇咖啡磨豆机咖啡豆研磨机&#x27;</span>,</span><br><span class="line">       <span class="attr">price</span>: <span class="number">289.9</span>,</span><br><span class="line">       <span class="attr">picture</span>: <span class="string">&#x27;https://yanxuan-item.nosdn.127.net/84a59ff9c58a77032564e61f716846d6.jpg&#x27;</span>,</span><br><span class="line">       <span class="attr">count</span>: <span class="number">2</span>,</span><br><span class="line">       <span class="attr">spec</span>: &#123; <span class="attr">color</span>: <span class="string">&#x27;白色&#x27;</span> &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="attr">id</span>: <span class="string">&#x27;4001009&#x27;</span>,</span><br><span class="line">       <span class="attr">name</span>: <span class="string">&#x27;竹制干泡茶盘正方形沥水茶台品茶盘&#x27;</span>,</span><br><span class="line">       <span class="attr">price</span>: <span class="number">109.8</span>,</span><br><span class="line">       <span class="attr">picture</span>: <span class="string">&#x27;https://yanxuan-item.nosdn.127.net/2d942d6bc94f1e230763e1a5a3b379e1.png&#x27;</span>,</span><br><span class="line">       <span class="attr">count</span>: <span class="number">3</span>,</span><br><span class="line">       <span class="attr">spec</span>: &#123; <span class="attr">size</span>: <span class="string">&#x27;40cm*40cm&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;黑色&#x27;</span> &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="attr">id</span>: <span class="string">&#x27;4001874&#x27;</span>,</span><br><span class="line">       <span class="attr">name</span>: <span class="string">&#x27;古法温酒汝瓷酒具套装白酒杯莲花温酒器&#x27;</span>,</span><br><span class="line">       <span class="attr">price</span>: <span class="number">488</span>,</span><br><span class="line">       <span class="attr">picture</span>: <span class="string">&#x27;https://yanxuan-item.nosdn.127.net/44e51622800e4fceb6bee8e616da85fd.png&#x27;</span>,</span><br><span class="line">       <span class="attr">count</span>: <span class="number">1</span>,</span><br><span class="line">       <span class="attr">spec</span>: &#123; <span class="attr">color</span>: <span class="string">&#x27;青色&#x27;</span>, <span class="attr">sum</span>: <span class="string">&#x27;一大四小&#x27;</span> &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="attr">id</span>: <span class="string">&#x27;4001649&#x27;</span>,</span><br><span class="line">       <span class="attr">name</span>: <span class="string">&#x27;大师监制龙泉青瓷茶叶罐&#x27;</span>,</span><br><span class="line">       <span class="attr">price</span>: <span class="number">139</span>,</span><br><span class="line">       <span class="attr">picture</span>: <span class="string">&#x27;https://yanxuan-item.nosdn.127.net/4356c9fc150753775fe56b465314f1eb.png&#x27;</span>,</span><br><span class="line">       <span class="attr">count</span>: <span class="number">1</span>,</span><br><span class="line">       <span class="attr">spec</span>: &#123; <span class="attr">size</span>: <span class="string">&#x27;小号&#x27;</span>, <span class="attr">color</span>: <span class="string">&#x27;紫色&#x27;</span> &#125;,</span><br><span class="line">       <span class="attr">gift</span>: <span class="string">&#x27;50g茶叶,清洗球&#x27;</span></span><br><span class="line">     &#125;</span><br><span class="line">   ]</span><br><span class="line"></span><br><span class="line">   <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.list&#x27;</span>).<span class="property">innerHTML</span> = goodsList.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="comment">// console.log(item)</span></span><br><span class="line">     <span class="keyword">const</span> &#123; name, price, count, picture, spec, gift &#125; = item</span><br><span class="line">     <span class="keyword">const</span> text = <span class="title class_">Object</span>.<span class="title function_">values</span>(spec).<span class="title function_">join</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">     <span class="keyword">const</span> subTotal = ((price * <span class="number">100</span> * count) / <span class="number">100</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>)</span><br><span class="line">     <span class="keyword">const</span> str = gift ? gift.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>).<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="string">`&lt;span class=&quot;tag&quot;&gt;【赠品】<span class="subst">$&#123;item&#125;</span>&lt;/span&gt;`</span>).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>) : <span class="string">&#x27;&#x27;</span></span><br><span class="line">     <span class="comment">// console.log(str)</span></span><br><span class="line">     <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">     &lt;div class=&quot;item&quot;&gt;</span></span><br><span class="line"><span class="string">       &lt;img src=&quot;<span class="subst">$&#123;picture&#125;</span>&quot; alt=&quot;&quot;&gt;</span></span><br><span class="line"><span class="string">       &lt;p class=&quot;name&quot;&gt;<span class="subst">$&#123;name&#125;</span> <span class="subst">$&#123;str&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">       &lt;p class=&quot;spec&quot;&gt;<span class="subst">$&#123;text&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">       &lt;p class=&quot;price&quot;&gt;<span class="subst">$&#123;price.toFixed(<span class="number">2</span>)&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">       &lt;p class=&quot;count&quot;&gt;x<span class="subst">$&#123;count&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">       &lt;p class=&quot;sub-total&quot;&gt;<span class="subst">$&#123;subTotal&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">     &lt;/div&gt;</span></span><br><span class="line"><span class="string">     `</span></span><br><span class="line">   &#125;).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">   <span class="keyword">const</span> total = goodsList.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, item</span>) =&gt;</span> prev + (item.<span class="property">price</span> * <span class="number">100</span> * item.<span class="property">count</span>)/<span class="number">100</span>, <span class="number">0</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>)</span><br><span class="line">   <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.amount&#x27;</span>).<span class="property">innerHTML</span> = total</span><br></pre></td></tr></table></figure>### 6-编程思想#### 6.1.1 面向过程面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的依次调用就可以了。面向过程，就是按照我们分析好了的步骤，按照步骤解决问题。#### 6.1.2  面向对象编程 (oop)面向对象是把事务分解成为一个个对象，然后由对象之间分工与合作。面向对象是以对象功能来划分问题，而不是步骤。在面向对象程序开发思想中，每一个对象都是功能中心，具有明确分工。 面向对象编程具有灵活、代码可复用、容易维护和开发的优点，更适合多人合作的大型软件项目。 **面向对象的特性：** **1.封装性****2.继承性****3.多态性**编程思想-面向过程和面向对象的对比**面向过程编程** 优点：性能比面向对象高，适合跟硬件联系很紧密的东西，例如单片机就采用的面向过程编程。缺点：没有面向对象易维护、易复用、易扩展**面向对象编程**优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统 更加活、更加易于维护缺点：性能比面向过程低![编程思想对比](E:\能放\前端\截图\js进阶\编程思想对比.png)### 7-构造函数封装是面向对象思想中比较重要的一部分，js面向对象可以通过构造函数实现的封装。同样的将变量和函数组合到了一起并能通过 this 实现数据的共享，所不同的是借助构造函数创建出来的实例对象之间是彼此不影响的。总结：1.构造函数体现了面向对象的封装特性2.构造函数实例创建的对象彼此独立、互不影响<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">uname</span> = uname</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> zs = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="keyword">const</span> ls = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;李四&#x27;</span>, <span class="number">19</span>)</span><br></pre></td></tr></table></figure>封装是面向对象思想中比较重要的一部分，js面向对象可以通过构造函数实现的封装。前面我们学过的构造函数方法很好用，但是 存在浪费内存的问题<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">uname</span> = uname</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">const</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="keyword">const</span> zxy = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;张学友&#x27;</span>, <span class="number">19</span>)</span><br></pre></td></tr></table></figure>我们希望所有的对象使用同一个函数，这样就比较节省内存，那么我们要怎样做呢？   =>  原型### 8-原型#### 8.1  prototype 属性构造函数通过原型分配的函数是所有对象所 共享的。 JavaScript 规定，**每一个构造函数都有一个 prototype 属性**，指向另一个对象，所以我们也称为原型对象这个对象可以挂载函数，对象实例化不会多次创建原型上函数，节约内存我们可以把那些不变的方法，直接定义在 prototype 对象上，这样所有对象的实例就可以共享这些方法。 构造函数和原型对象中的this 都指向 实例化的对象**原型是：一个对象，我们也称为 prototype 为原型对象。****原型的作用是：****1.共享方法****2.可以把那些不变的方法，直接定义在 prototype 对象上****构造函数和原型里面的this指向 > 实例化的对象**![原型](E:\能放\前端\截图\js进阶\原型.png)![Snipaste_2022-07-01_20-17-06](E:\能放\前端\截图\js进阶\Snipaste_2022-07-01_20-17-06.png)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 每一个构造函数上都有一个prototype属性。prototype指向的是一个对象。 也叫做原型对象（也常说prototype就是原型对象）</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;唱歌&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">    <span class="comment">// 原型对象上的方法(和属性)可以被构造函数的实例所共享</span></span><br><span class="line">    ldh.<span class="title function_">sing</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> zxy = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;张学友&#x27;</span>, <span class="number">20</span>)</span><br><span class="line">    zxy.<span class="title function_">sing</span>();</span><br><span class="line">    <span class="comment">// 挂载到原型对象上的方法 多次创建对象的时候  不会多次开辟空间，节约了内存</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">sing</span> === zxy.<span class="property">sing</span>)  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>##### 8.1.1原型- this指向构造函数和原型对象中的this 都指向 实例化的对象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> that</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname</span>) &#123;</span><br><span class="line">      <span class="comment">// that = this</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">uname</span> = uname</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 原型对象的函数 this 还是指向实例对象 xd</span></span><br><span class="line">    <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">      that = <span class="variable language_">this</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;唱歌&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造函数里面的 this 就是 实例对象 xd</span></span><br><span class="line">    <span class="keyword">const</span> xd = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;熊大&#x27;</span>)</span><br><span class="line">    xd.<span class="title function_">sing</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(that === xd)    <span class="comment">//true</span></span><br></pre></td></tr></table></figure>给数组扩展方法求最大值最小值求和<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">    <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">max</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(...<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">min</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">min</span>(...<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sum</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, item</span>) =&gt;</span> prev + item, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">max</span>())</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">min</span>())</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">sum</span>())</span><br></pre></td></tr></table></figure>#### 8.2 constructor 属性每个原型对象里面都有个constructor 属性（constructor 构造函数）作用：该属性指向该原型对象的构造函数， 简单理解，就是指向我的爸爸，我是有爸爸的孩子<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// constructor属性存在于 构造函数的原型对象上</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// constructor指向的构造函数</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>)</span><br></pre></td></tr></table></figure>![constructor](E:\能放\前端\截图\js进阶\constructor.png)使用场景：如果有多个对象的方法，我们可以给原型对象采取对象形式赋值.但是这样就会覆盖构造函数原型对象原来的内容，这样修改后的原型对象 constructor 就不再指向当前构造函数了此时，我们可以在修改后的原型对象中，添加一个 constructor 指向原来的构造函数。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 挂载到原型对象上的原因是节约内存</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        // 这么写代码重复度太高</span></span><br><span class="line"><span class="comment">        Star.prototype.sing = function () &#123;</span></span><br><span class="line"><span class="comment">          console.log(&#x27;唱歌&#x27;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">        Star.prototype.dance = function () &#123;</span></span><br><span class="line"><span class="comment">          console.log(&#x27;跳舞&#x27;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">        Star.prototype.movie = function () &#123;</span></span><br><span class="line"><span class="comment">          console.log(&#x27;演电影&#x27;)</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">    <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">      <span class="attr">constructor</span>: <span class="title class_">Star</span>,</span><br><span class="line">      <span class="attr">sing</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;唱歌&#x27;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">dance</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;跳舞&#x27;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">movie</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;演电影&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">    <span class="keyword">const</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">    ldh.<span class="title function_">sing</span>();</span><br><span class="line">    ldh.<span class="title function_">dance</span>();</span><br><span class="line">    ldh.<span class="title function_">movie</span>();</span><br></pre></td></tr></table></figure>#### 8.3 对象原型对象都会有一个属性 ____proto___ 指向构造函数的 prototype 原型对象，之所以我们对象可以使用构造函数 prototype 原型对象的属性和方法，就是因为对象有 ____proto___原型的存在。![对象原型](E:\能放\前端\截图\js进阶\对象原型.png)注意：____proto___是JS非标准属性[[prototype]]和______proto_____意义相同用来表明当前实例对象指向哪个原型对象prototype_______proto______对象原型里面也有一个 constructor属性，指向创建该实例对象的构造函数对象都会有一个属性 ____proto___指向构造函数的 prototype 原型对象，之所以我们对象可以使用构造函数 prototype 原型对象的属性和方法，就是因为对象有 ____proto___原型的存在。![对象原型1](E:\能放\前端\截图\js进阶\对象原型1.png)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数可以通过new方式 实例化对象</span></span><br><span class="line">    <span class="comment">// ldh =&gt;实例对象</span></span><br><span class="line">    <span class="keyword">const</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数上都有一个属性prototype 指向的原型对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">    <span class="comment">// 每一个原型对象上都有一个属性叫constructor 指向的构造函数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> === <span class="title class_">Star</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对象上都有属性叫做__proto__【对象原型】</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">__proto__</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对象的对象原型 指向的是 构造函数的原型对象</span></span><br><span class="line">    <span class="comment">// __proto__只读属性</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">__proto__</span> === <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例对象的对象原型也有constructor 指向的构造函数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">__proto__</span>.<span class="property">constructor</span> === <span class="title class_">Star</span>)</span><br></pre></td></tr></table></figure>1.prototype是什么？哪里来的？原型（原型对象）构造函数都自动有原型2.constructor属性在哪里？作用干啥的？prototype原型和对象原型__proto__里面都有都指向创建实例对象/原型的构造函数3._proto__属性在哪里？指向谁？在实例对象里面指向原型 prototype#### 8.4 原型继承继承是面向对象编程的另一个特征，通过继承进一步提升代码封装的程度，JavaScript 中大多是借助原型对象实现继承的特性。##### 8.4.1 封装-抽取公共部分把公共的部分抽取出来![封装](E:\能放\前端\截图\js进阶\封装.png)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//提取公共部分</span></span><br><span class="line">  cosnt <span class="title class_">Person</span> = &#123;</span><br><span class="line">     nose : <span class="number">1</span>;</span><br><span class="line">     eyes : <span class="number">2</span>;</span><br><span class="line">     eat : <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;吃饭&#x27;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125; </span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">Man</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">//nose : 1;</span></span><br><span class="line">   <span class="comment">//eyes : 2;</span></span><br><span class="line">   <span class="comment">//eat : function () &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(&#x27;吃饭&#x27;);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">   <span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Man</span>;</span><br><span class="line">   <span class="keyword">const</span> lw = <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line">   <span class="comment">// console.log(lw.baby());</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">Woman</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="comment">// nose : 1;</span></span><br><span class="line">    <span class="comment">// eyes : 2;</span></span><br><span class="line">    <span class="comment">// eat : function () &#123;</span></span><br><span class="line">     <span class="comment">//  console.log(&#x27;吃饭&#x27;);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">   <span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Woman</span>;</span><br><span class="line">   <span class="keyword">const</span> fengjie = <span class="keyword">new</span> <span class="title class_">Woman</span>();</span><br></pre></td></tr></table></figure>##### 8.4.2 继承继承公共部分的属性和方法，可以共享这些公共的属性和方法继承-让男人和女人都能继承人类的一些属性和方法1.把男人女人公共的属性和方法抽取出来 People2.然后赋值给Man的原型对象，可以共享这些属性和方法3.注意让constructor指回Man这个构造函数![继承](E:\能放\前端\截图\js进阶\继承.png)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//提取公共部分</span></span><br><span class="line">  cosnt <span class="title class_">Person</span> = &#123;</span><br><span class="line">     nose : <span class="number">1</span>;</span><br><span class="line">     eyes : <span class="number">2</span>;</span><br><span class="line">     eat : <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;吃饭&#x27;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">Man</span>(<span class="params"></span>) &#123;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">   <span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Man</span>;</span><br><span class="line">   <span class="keyword">const</span> lw = <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line">   <span class="comment">// console.log(lw.baby());</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">Woman</span>(<span class="params"></span>) &#123;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">   <span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Woman</span>;</span><br><span class="line">   <span class="keyword">const</span> fengjie = <span class="keyword">new</span> <span class="title class_">Woman</span>();</span><br></pre></td></tr></table></figure>##### 8.4.3 继承写法完善不要使用同一个对象，但是不同对象里面包含相同的属性和方法![继承问题](E:\能放\前端\截图\js进阶\继承问题.png)![继承原因](E:\能放\前端\截图\js进阶\继承原因.png)解决方法：构造函数new 每次都会创建一个新的对象![解决](E:\能放\前端\截图\js进阶\解决.png)![继承完善写法](E:\能放\前端\截图\js进阶\继承完善写法.png)![继承完善写法1](E:\能放\前端\截图\js进阶\继承完善写法1.png)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">nose</span> = <span class="number">1</span>;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">eyes</span> = <span class="number">2</span>;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;吃饭&#x27;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">Man</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">   <span class="title class_">Man</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Man</span>;</span><br><span class="line">   <span class="keyword">const</span> lw = <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line">   <span class="comment">// console.log(lw.baby());</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">Woman</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">   <span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">baby</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;生孩子&#x27;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title class_">Woman</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Woman</span>;</span><br><span class="line">   <span class="keyword">const</span> fengjie = <span class="keyword">new</span> <span class="title class_">Woman</span>();</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(fengjie.<span class="title function_">baby</span>())</span><br><span class="line">   </span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(lw === fengjie)  <span class="comment">//false</span></span><br></pre></td></tr></table></figure>#### 8.5 原型链基于原型对象的继承使得不同构造函数的原型对象关联在一起，并且这种关联的关系是一种链状的结构，我们将原型对象的链状结构关系称为原型链**所有的对象里面都有____proto__对象原型  指向原型对象****所有的原型对象都有constructor 指回创造该原型对象的构造函数**![原型链](E:\能放\前端\截图\js进阶\原型链.png)##### 8.5.1 原型链-查找规则① 当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。② 如果没有就查找它的原型（也就是 ____proto__指向的 prototype 原型对象） ③ 如果还没有就查找原型对象的原型（Object的原型对象） ④ 依此类推一直找到 Object 为止（null） ⑤ ____proto__对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线**⑥ 可以使用 instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上**##### 综合案例<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.modal</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="attribute">min-height</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">      <span class="attribute">position</span>: fixed;</span><br><span class="line">      <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(-<span class="number">50%</span>, -<span class="number">50%</span>, <span class="number">0</span>);</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.modal</span> <span class="selector-class">.header</span> &#123;</span><br><span class="line">      <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">position</span>: relative;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.modal</span> <span class="selector-class">.header</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">      <span class="attribute">font-style</span>: normal;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">right</span>: <span class="number">15px</span>;</span><br><span class="line">      <span class="attribute">top</span>: -<span class="number">2px</span>;</span><br><span class="line">      <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.modal</span> <span class="selector-class">.body</span> &#123;</span><br><span class="line">      <span class="attribute">text-align</span>: center;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.modal</span> <span class="selector-class">.footer</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.modal</span> <span class="selector-class">.footer</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">3px</span> <span class="number">8px</span>;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line">      <span class="attribute">text-decoration</span>: none;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">      <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.modal</span> <span class="selector-class">.footer</span> <span class="selector-tag">a</span><span class="selector-class">.submit</span> &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="number">#369</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- &lt;div class=&quot;modal&quot;&gt;</span></span><br><span class="line"><span class="comment">    &lt;div class=&quot;header&quot;&gt;温馨提示 &lt;i&gt;x&lt;/i&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">    &lt;div class=&quot;body&quot;&gt;您没有删除权限操作&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;/div&gt; --&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.模态框的构造函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Modal</span>(<span class="params">title = <span class="string">&#x27;&#x27;</span>, message = <span class="string">&#x27;&#x27;</span></span>) &#123;</span><br><span class="line">      <span class="comment">// 公共部分</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">title</span> = title</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">message</span> = message</span><br><span class="line">      <span class="comment">// 1.创建盒子  谁 new 给谁用</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">modalBox</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">      <span class="comment">// 2.添加类名</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">modalBox</span>.<span class="property">className</span> = <span class="string">&#x27;modal&#x27;</span></span><br><span class="line">      <span class="comment">// 3.填充内容   更换数据</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">modalBox</span>.<span class="property">innerHTML</span> = <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;header&quot;&gt;<span class="subst">$&#123;<span class="variable language_">this</span>.title&#125;</span> &lt;i&gt;x&lt;/i&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;body&quot;&gt;<span class="subst">$&#123;<span class="variable language_">this</span>.message&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">      `</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.打开方法 挂载到原型身上</span></span><br><span class="line">    <span class="title class_">Modal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">open</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 只有你没有modal的时候才执行这段代码</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.modal&#x27;</span>)) &#123;</span><br><span class="line">        <span class="comment">// 把创建的盒子 modalBox 渲染到页面中 追加到给定父节点    语法：父元素.appendChild(子元素)</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(<span class="variable language_">this</span>.<span class="property">modalBox</span>)</span><br><span class="line">        <span class="comment">// 把关闭写在打开方法里 获取 x 调用关闭方法</span></span><br><span class="line">        <span class="comment">// 箭头函数没有 this 它指向函数里面的 this , 函数里的this 指向 m</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">modalBox</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;i&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">close</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.关闭方法 挂载到原型身上</span></span><br><span class="line">    <span class="title class_">Modal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">close</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(<span class="variable language_">this</span>.<span class="property">modalBox</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.按钮点击删除 就创建模态框</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#delete&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 传递参数</span></span><br><span class="line">      <span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Modal</span>(<span class="string">&#x27;温馨提示&#x27;</span>, <span class="string">&#x27;您没有删除权限操作&#x27;</span>)</span><br><span class="line">      <span class="comment">// 调用打开方法</span></span><br><span class="line">      m.<span class="title function_">open</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 5.按钮点击登录 就创建模态框</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#login&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Modal</span>(<span class="string">&#x27;友情提示&#x27;</span>, <span class="string">&#x27;您没有注册账户&#x27;</span>)</span><br><span class="line">      <span class="comment">// 调用打开方法</span></span><br><span class="line">      m.<span class="title function_">open</span>()</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>### 9-深浅拷贝#### 9.1 浅拷贝首先浅拷贝和深拷贝只针对引用类型浅拷贝：对象中的简单类型拷贝值，复杂类型拷贝的是地址常见方法：1.拷贝对象：Object.assgin() / 展开运算符 {...obj} 拷贝对象2.拷贝数组：Array.prototype.concat() 或者 [...arr]<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">     <span class="attr">uname</span>: <span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">     <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">     <span class="attr">family</span>: &#123;</span><br><span class="line">       <span class="attr">baby</span>: <span class="string">&#x27;小pink&#x27;</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 1.浅拷贝(展开运算符)</span></span><br><span class="line">   <span class="comment">// const o = &#123;...obj&#125;</span></span><br><span class="line">   <span class="comment">// console.log(o)</span></span><br><span class="line">   <span class="comment">// o.age = 20</span></span><br><span class="line">   <span class="comment">// console.log(o)</span></span><br><span class="line">   <span class="comment">// console.log(obj)</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 2.浅拷贝(assign)</span></span><br><span class="line">   <span class="keyword">const</span> o = &#123;&#125;</span><br><span class="line">   <span class="title class_">Object</span>.<span class="title function_">assign</span>(o, obj)</span><br><span class="line">   o.<span class="property">age</span> = <span class="number">20</span></span><br><span class="line">   <span class="comment">// 浅拷贝拷贝的是地址 适合用于简单数据类型</span></span><br><span class="line">   <span class="comment">//o.family.baby = &#x27;老pink&#x27;</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(o)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure>**直接赋值和浅拷贝有什么区别？**1.直接赋值的方法，只要是对象，都会相互影响，因为是直接拷贝对象栈里面的地址2.浅拷贝如果是一层对象，不相互影响，如果出现多层对象拷贝还会相互影响**浅拷贝怎么理解？**1.拷贝对象之后，里面的属性值是简单数据类型直接拷贝值2.如果属性值是引用数据类型则拷贝的是地址#### 9.2 深拷贝首先浅拷贝和深拷贝只针对引用类型深拷贝：拷贝的是对象，不是地址常见方法：1.通过递归实现深拷贝2.lodash/cloneDeep3.通过JSON.stringify()实现##### 9.2.1 通过递归实现深拷贝函数递归：如果一个函数在内部可以调用其本身，那么这个函数就是递归函数1.简单理解:函数内部自己调用自己, 这个函数就是递归函数2.递归函数的作用和循环效果类似3.由于递归很容易发生“栈溢出”错误（stack overflow），所以必须要加退出条件 return<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line">   <span class="comment">// 递归函数 自己调用自己</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`这是第<span class="subst">$&#123;i&#125;</span>次`</span>)</span><br><span class="line">     <span class="keyword">if</span> (i &gt;= <span class="number">6</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span></span><br><span class="line">     &#125;</span><br><span class="line">     i++</span><br><span class="line">     <span class="title function_">fn</span>()</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用递归函数 模拟setInterval效果</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getTime</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>).<span class="property">innerHTML</span> = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleString</span>()</span><br><span class="line">      <span class="built_in">setTimeout</span>(getTime, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getTime</span>()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组拷贝</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">      <span class="attr">uname</span>: <span class="string">&#x27;熊大&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="attr">hobby</span>: [<span class="string">&#x27;乒乓球&#x27;</span>, <span class="string">&#x27;足球&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> o = &#123;&#125;</span><br><span class="line">    <span class="comment">// 拷贝数组</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">newObj, oldObj</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> oldObj) &#123;</span><br><span class="line">        <span class="comment">// 处理数组问题</span></span><br><span class="line">        <span class="comment">// 检测类似是不是数组</span></span><br><span class="line">        <span class="keyword">if</span> (oldObj[k] <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">          <span class="comment">// 把数组 hobby 里的内容再次遍历  可以使用递归自己调用自己</span></span><br><span class="line">          newObj[k] = []</span><br><span class="line">          <span class="comment">// newObj[k] 是新数组里的值  oldObj[k]是旧数组里的值 === [&#x27;乒乓球&#x27;, &#x27;足球&#x27;]</span></span><br><span class="line">          <span class="comment">// 把旧数组的值传进去遍历给新数组</span></span><br><span class="line">          <span class="title function_">deepClone</span>(newObj[k],oldObj[k])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// k 表示属性名 uname    oldObj[k] 表示属性值 10</span></span><br><span class="line">          <span class="comment">// newObj[k] === o.name</span></span><br><span class="line">          newObj[k] = oldObj[k]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">deepClone</span>(o, obj)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(o)</span><br><span class="line">    o.<span class="property">age</span> = <span class="number">20</span></span><br><span class="line">    o.<span class="property">hobby</span>[<span class="number">0</span>] = <span class="string">&#x27;篮球&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure>##### 9.2.2 lodash/cloneDeepjs库lodash里面cloneDeep内部实现了深拷贝<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;./lodash.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> obj = &#123;</span><br><span class="line">      <span class="attr">uname</span>: <span class="string">&#x27;熊大&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="attr">hobby</span>: [<span class="string">&#x27;乒乓球&#x27;</span>, <span class="string">&#x27;足球&#x27;</span>],</span><br><span class="line">      <span class="attr">family</span>: &#123;</span><br><span class="line">        <span class="attr">baby</span>: <span class="string">&#x27;小熊&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//_.cloneDeep(要被克隆的对象)</span></span><br><span class="line">    <span class="keyword">const</span> o = _.<span class="title function_">cloneDeep</span>(obj)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(o)</span><br><span class="line">    o.<span class="property">family</span>.<span class="property">baby</span> = <span class="string">&#x27;大熊&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure>##### 9.2.3 通过JSON.stringify()实现利用JSON字符串转换<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">      <span class="attr">uname</span>: <span class="string">&#x27;熊大&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="attr">hobby</span>: [<span class="string">&#x27;乒乓球&#x27;</span>, <span class="string">&#x27;足球&#x27;</span>],</span><br><span class="line">      <span class="attr">family</span>: &#123;</span><br><span class="line">        <span class="attr">baby</span>: <span class="string">&#x27;小熊&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把对象转换为 JSON 字符串  拿到的全是字符串</span></span><br><span class="line">    <span class="comment">// JSON.stringify(obj)</span></span><br><span class="line">    <span class="keyword">const</span> o = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj))</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(o)</span><br><span class="line">    o.<span class="property">family</span>.<span class="property">baby</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure>### 10-异常处理#### 10.1 throw 抛异常异常处理是指预估代码执行过程中可能发生的错误，然后最大程度的避免错误的发生导致整个程序无法继续运行1.throw 抛出异常信息，程序也会终止执行2.throw 后面跟的是错误提示信息3.Error 对象配合 throw 使用，能够设置更详细的错误信息<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!x || !y) &#123;</span><br><span class="line">        <span class="comment">// throw &#x27;用户没有传递参数进来&#x27;</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;没有参数传递进来&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> x + y</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>())</span><br></pre></td></tr></table></figure>#### 10.2 try /catch 捕获异常我们可以通过try / catch 捕获错误信息（浏览器提供的错误信息） try 试试 catch 拦住 finally 最后1.try...catch 用于捕获错误信息2.将预估可能发生错误的代码写在 try 代码段中3.如果 try 代码段中出现错误后，会执行 catch 代码段，并截获到错误信息4.finally 不管是否有错误，都会执行<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.p&#x27;</span>)</span><br><span class="line">        p.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="comment">// 拦截错误信息，不中断</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;错误&#x27;</span>)</span><br><span class="line">        <span class="comment">// 需要加 return 中断程序</span></span><br><span class="line">        <span class="comment">// return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 不管你的程序对不对,一定会执行的代码</span></span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;弹出对话框&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure>#### 10.3 debugger代码中的断点![debugger](E:\能放\前端\截图\js进阶\debugger.png)### 11-处理this#### 11.1 this指向##### 11.1.1 this指向-普通函数普通函数的调用方式决定了 this 的值，即【谁调用 this 的值指向谁】<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;按钮&lt;/button&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="comment">// 普通函数 this 谁调用指向谁</span></span><br><span class="line">    <span class="comment">// 严格模式下 this 指向 undefined</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)   <span class="comment">//window</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)   <span class="comment">//window</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// window.fn()</span></span><br><span class="line">    <span class="title function_">fn</span>()</span><br><span class="line">    <span class="variable language_">window</span>.<span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)   <span class="comment">//window</span></span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)   <span class="comment">//button</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> obj = &#123;</span><br><span class="line">      <span class="attr">sayHi</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)   <span class="comment">//obj</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    obj.<span class="title function_">sayHi</span>()</span><br></pre></td></tr></table></figure>普通函数没有明确调用者时 this 值为 window，严格模式('use strict')下没有调用者时 this 的值为 undefined##### 11.1.2 this指向-箭头函数**箭头函数中的 this 与普通函数完全不同，也不受调用方式的影响，事实上箭头函数中并不存在 this ！**1.箭头函数会默认帮我们绑定外层 this 的值，所以在箭头函数中 this 的值和外层的 this 是一样的2.箭头函数中的this引用的就是最近作用域中的this3.向外层作用域中，一层一层查找this，直到有this的定义注意情况： 1.在开发中【使用箭头函数前需要考虑函数中 this 的值】，事件回调函数使用箭头函数时，this 为全局的 window,因此DOM事件回调函数如果里面需要DOM对象的this，则不推荐使用箭头函数2.同样由于箭头函数 this 的原因，基于原型的面向对象也不推荐采用箭头函数总结：1.函数内不存在this，沿用上一级的2.不适用  构造函数，原型函数，dom事件函数等等3.适用  需要使用上层this的地方#### 11.2 改变thisJavaScript 中还允许指定函数中 this 的指向，有 3 个方法可以动态指定普通函数中 this 的指向##### 11.2.1 call()<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法： fun.<span class="title function_">call</span>(thisArg, arg1, arg2, ...)</span><br></pre></td></tr></table></figure>1.thisArg：在 fun 函数运行时指定的 this 值 2.arg1，arg2：传递的其他参数3.返回值就是函数的返回值，因为它就是调用函数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">     <span class="attr">uname</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 1.调用函数</span></span><br><span class="line">   <span class="comment">// 2.改变 this </span></span><br><span class="line">   <span class="comment">// 3.传递普通参数</span></span><br><span class="line">   fn.<span class="title function_">call</span>(obj, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">   <span class="comment">// 返回值就是函数的返回值</span></span><br></pre></td></tr></table></figure>##### 11.2.2 apply()使用 apply 方法调用函数，同时指定被调用函数中 this 的值<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：fun.<span class="title function_">apply</span>(thisArg, [argsArray])</span><br></pre></td></tr></table></figure>thisArg：在fun函数运行时指定的 this 值 argsArray：传递的值，必须包含在数组里面返回值就是函数的返回值，因为它就是调用函数因此 apply 主要跟数组有关系，比如使用 Math.max() 求数组的最大值<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 1.调用函数</span></span><br><span class="line">    <span class="comment">// 2.改变this指向</span></span><br><span class="line">    <span class="comment">// 3.传递数组</span></span><br><span class="line">    <span class="comment">// fn.apply(this指向谁, 数组参数)</span></span><br><span class="line">    fn.<span class="title function_">apply</span>(obj, [<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">    <span class="comment">// 返回值就是函数的返回值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用场景：求数组最大值</span></span><br><span class="line">    <span class="comment">// const max = Math.max(1,2,3)</span></span><br><span class="line">    <span class="comment">// console.log(max)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> arr = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>]</span><br><span class="line">    <span class="keyword">const</span> max = <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>, arr)</span><br><span class="line">    <span class="keyword">const</span> min = <span class="title class_">Math</span>.<span class="property">min</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, arr)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(max)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(min)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// console.log(Math.max(...arr))</span></span><br></pre></td></tr></table></figure>##### 11.2.3 bind()bind() 方法不会调用函数。但是能改变函数内部this 指向<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：fun.<span class="title function_">bind</span>(thisArg, arg1, arg2, ...)</span><br></pre></td></tr></table></figure>thisArg：在 fun 函数运行时指定的 this 值 arg1，arg2：传递的其他参数返回由指定的 this 值和初始化参数改造的 原函数拷贝 （新函数）因此当我们只是想改变 this 指向，并且不想调用这个函数的时候，可以使用 bind，比如改变定时器内部的this指向<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;发送&lt;/button&gt;</span><br><span class="line"> &lt;script&gt;</span><br><span class="line">   <span class="keyword">const</span> obj = &#123;</span><br><span class="line">     <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 1.bind 不会调用函数</span></span><br><span class="line">   <span class="comment">// 2.改变this指向</span></span><br><span class="line">   <span class="comment">// 3.返回值是个函数，但是这个函数里面的this是更改过的obj</span></span><br><span class="line">   <span class="keyword">const</span> fun = fn.<span class="title function_">bind</span>(obj)</span><br><span class="line">   <span class="comment">// console.log(fun)</span></span><br><span class="line">   <span class="title function_">fun</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 需求： 点击按钮禁用  两秒后开启</span></span><br><span class="line">   <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line">   btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// 禁用</span></span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">true</span></span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="comment">// 让this由原来的window 指向btn</span></span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">false</span></span><br><span class="line">     &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="number">2000</span>)</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>##### call apply bind 总结相同点: 都可以改变函数内部的this指向. 区别点: 1.call 和 apply 会调用函数, 并且改变函数内部this指向. 2.call 和 apply 传递的参数不一样, call 传递参数 aru1, aru2..形式 apply 必须数组形式[arg] 3.bind 不会调用函数, 可以改变函数内部this指向. 主要应用场景: 1.call 调用函数并且可以传递参数2.apply 经常跟数组有关系. 比如借助于数学对象实现数组最大值最小值3.bind 不调用函数,但是还想改变this指向. 比如改变定时器内部的this指向### 12-性能优化#### 12.1 节流（throttle）所谓节流，就是指事件触发后，在 n 秒后执行这个事件的处理函数。如果n秒内连续触发事件，则忽略不执行开发使用场景 – 小米轮播图点击效果 、 鼠标移动、页面尺寸缩放resize、滚动条滚动 就可以加节流假如一张轮播图完成切换需要300ms， 不加节流效果，快速点击，则嗖嗖嗖的切换加上节流效果， 不管快速点击多少次， 300ms时间内，只能切换一张图片。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//要求： 鼠标在盒子上移动，里面的数字就会变化+1</span></span><br><span class="line"><span class="comment">//如果以前方式，每次鼠标移动就会有大量操作，触发频次太高</span></span><br><span class="line"><span class="comment">//利用节流的方式， 鼠标经过，500ms ，数字才显示</span></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;box&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">mouseMove</span>(<span class="params"></span>) &#123;</span><br><span class="line">      box.<span class="property">innerHTML</span> = i++</span><br><span class="line">      <span class="comment">// 如果里面存在大量操作dom 的情况，可能卡顿</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 节流函数 throttle(函数,时间)</span></span><br><span class="line"><span class="comment">// mouseMove 传给 fn , 500 传给 t</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, t</span>) &#123;</span><br><span class="line">      <span class="comment">// 页面打开的起始时间</span></span><br><span class="line">      <span class="keyword">let</span> startTime = <span class="number">0</span></span><br><span class="line">      <span class="comment">// return function () &#123;</span></span><br><span class="line">      <span class="comment">//   console.log(i)</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 得到当前的时间戳  </span></span><br><span class="line">        <span class="keyword">let</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">        <span class="comment">// 移动后的时间 - 刚开始移动的时间 &gt;= 500ms 我才去执行 mouseMove函数</span></span><br><span class="line">        <span class="comment">// 进行判断 如果大于等于 500ms，则执行函数</span></span><br><span class="line">        <span class="keyword">if</span>(now - startTime &gt;= t)&#123;</span><br><span class="line">          <span class="comment">// 调用函数</span></span><br><span class="line">          <span class="title function_">fn</span>()</span><br><span class="line">          <span class="comment">// 让起始时间 = 现在的时间</span></span><br><span class="line">          startTime = now</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// box.addEventListener(&#x27;mousemove&#x27;, throttle(mouseMove,500))</span></span><br><span class="line">    <span class="comment">// throttle(mousemove, 500) === function()&#123;console.log(i)&#125;</span></span><br><span class="line">    box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="title function_">throttle</span>(mouseMove,<span class="number">500</span>))</span><br></pre></td></tr></table></figure>#### 12.2 防抖（debounce）**所谓防抖，就是指触发事件后在 n 秒后执行函数，如果在 n 秒内又触发了事件，则会重新计算函数执行时间**举例：北京买房政策：需要连续5年的社保，如果中间有一年断了社保，则需要从新开始计算比如，我 2020年开始计算，连续交5年，也就是到2024年可以买房了，包含2020年但是我 2024年断社保了，整年没交，则需要从2025年开始算第一年往后推5年… 也就是 2029年才能买房…**开发使用场景- 搜索框防抖**假设输入就可以发送请求，但是不能每次输入都去发送请求，输入比较快发送请求会比较多我们设定一个时间，假如300ms， 当输入第一个字符时候，300ms后发送请求，但是在200ms的时候又输入了一个字符，则需要再等300ms 后发送请求<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;box&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">mouseMove</span>(<span class="params"></span>) &#123;</span><br><span class="line">      box.<span class="property">innerHTML</span> = i++</span><br><span class="line">      <span class="comment">// 如果里面存在大量操作dom 的情况，可能卡顿</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 防抖函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, t</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> timeId</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 如果有定时器就清除</span></span><br><span class="line">        <span class="keyword">if</span> (timeId) <span class="built_in">clearTimeout</span>(timeId)</span><br><span class="line">        <span class="comment">// 开启定时器</span></span><br><span class="line">        timeId = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="title function_">fn</span>()</span><br><span class="line">        &#125;, t)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="title function_">debounce</span>(mouseMove, <span class="number">200</span>))</span><br></pre></td></tr></table></figure>#### 12.3 Lodash 库 实现节流和防抖<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;box&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lodash.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line">    <span class="comment">// 鼠标移动函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">mouseMove</span>(<span class="params"></span>) &#123;</span><br><span class="line">      box.<span class="property">innerHTML</span> = i++</span><br><span class="line">      <span class="comment">// 如果里面存在大量操作dom 的情况，可能卡顿</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// lodash 节流</span></span><br><span class="line">    <span class="comment">// box.addEventListener(&#x27;mousemove&#x27;, _.throttle(mouseMove, 500))</span></span><br><span class="line">    <span class="comment">// lodash 防抖</span></span><br><span class="line">    box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, _.<span class="title function_">debounce</span>(mouseMove, <span class="number">500</span>))</span><br></pre></td></tr></table></figure>#### 综合案例需求：页面打开，可以记录上一次的视频播放位置两个事件:①：ontimeupdate 事件在视频/音频（audio/video）当前的播放位置发送改变时触发②：onloadeddata 事件在当前帧的数据加载完成且还没有足够的数据播放视频/音频（audio/video）的下一帧时触发谁需要节流？ontimeupdate ， 触发频次太高了，我们可以设定 1秒钟触发一次步骤：1.在ontimeupdate事件触发的时候，每隔1秒钟，就记录当前时间到本地存储2.下次打开页面， onloadeddata 事件触发，就可以从本地存储取出时间，让视频从取出的时间播放，如果没有就默认为0s3.获得当前时间 video.currentTime<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取元素 对视频进行操作</span></span><br><span class="line">    <span class="keyword">const</span> video = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>)</span><br><span class="line">    <span class="comment">// ontimeupdate 当前的播放位置发生改变是触发</span></span><br><span class="line">    video.<span class="property">ontimeupdate</span> = _.<span class="title function_">throttle</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// console.log(video.currentTime)    //获得当前的视频时间</span></span><br><span class="line">      <span class="comment">// 把当前时间存储到本地存储</span></span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;currentTime&#x27;</span>, video.<span class="property">currentTime</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">    <span class="comment">// 打开页面触发事件，从本地存储里面取出记录的时间，赋值给 video.currentTime</span></span><br><span class="line">    video.<span class="property">onloadeddata</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      video.<span class="property">currentTime</span> = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;currentTime&#x27;</span>) || <span class="number">0</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JS进阶&quot;&gt;&lt;a href=&quot;#JS进阶&quot; class=&quot;headerlink&quot; title=&quot;JS进阶&quot;&gt;&lt;/a&gt;JS进阶&lt;/h2&gt;&lt;h3 id=&quot;1-作用域&quot;&gt;&lt;a href=&quot;#1-作用域&quot; class=&quot;headerlink&quot; title=&quot;1-作用域&quot;&gt;</summary>
      
    
    
    
    <category term="资料" scheme="http://example.com/categories/%E8%B5%84%E6%96%99/"/>
    
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>初识（一）</title>
    <link href="http://example.com/2022/11/06/CSS/"/>
    <id>http://example.com/2022/11/06/CSS/</id>
    <published>2022-11-06T03:27:06.000Z</published>
    <updated>2022-11-06T03:36:25.548Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="一、基础认知"><a href="#一、基础认知" class="headerlink" title="一、基础认知"></a><strong>一、基础认知</strong></h2><h3 id="认识网页（了解）"><a href="#认识网页（了解）" class="headerlink" title="认识网页（了解）"></a><strong>认识网页（了解）</strong></h3><p>➢ 问题1：网页由哪些部分组成？</p><p>✓ 文字、图片、音频、视频、超链接</p><p>➢ 问题2：我们看到的网页背后本质是什么？</p><p>✓ 前端程序员写的代码</p><p>➢ 问题3：前端的代码是通过什么软件转换成用户眼中的页面的？</p><p>✓ 通过浏览器转化（解析和渲染）成用户看到的网页.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">justify-content</span>: space-between;//子元素靠边对齐平均分剩余的空间 两端贴边对齐</span><br><span class="line"><span class="attribute">align-items</span>: center;//纵向居中</span><br></pre></td></tr></table></figure><h3 id="五大浏览器"><a href="#五大浏览器" class="headerlink" title="五大浏览器"></a><strong>五大浏览器</strong></h3><p>➢ 浏览器：是网页显示、运行的平台，是前端开发必备利器</p><p>➢ 常见的五大浏览器：</p><p>IE浏览器、火狐浏览器（Firefox）、谷歌浏览器（Chrome）、Safari浏览器、欧朋浏览器（Opera）</p><h3 id="渲染引擎（了解）"><a href="#渲染引擎（了解）" class="headerlink" title="渲染引擎（了解）"></a><strong>渲染引擎（了解）</strong></h3><p>渲染引擎（浏览器内核）：浏览器中专门对代码进行解析渲染的部分</p><p>➢ 浏览器出品的公司不同，内在的渲染引擎也是不同的：</p><p><img src="C:\Users\25134\AppData\Roaming\Typora\typora-user-images\image-20220621192736687.png" alt="image-20220621192736687"></p><p>➢ 注意点：</p><p>• 渲染引擎不同，导致解析相同代码时的 速度、性能、效果也不同的</p><p>• 谷歌浏览器的渲染引擎速度快、性能高、效果好，所以更吸引用户的喜爱（推荐）</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h3><p>五大浏览器有哪些？</p><p>• IE浏览器</p><p>• 火狐浏览器（Firefox） </p><p>• 谷歌浏览器（Chrome） </p><p>• Safari浏览器</p><p>• 欧朋浏览器（Opera） </p><p>➢ 相同的网页在不同浏览器中显示效果会完全一致吗？</p><p>• 因为不同浏览器渲染引擎不同，解析的效果会存在差异</p><p>➢ 前端工程师日常推荐使用哪一个浏览器？</p><p>• 谷歌浏览器（Chrome）</p><h3 id="Web标准的构成"><a href="#Web标准的构成" class="headerlink" title="Web标准的构成"></a>Web标准的构成</h3><p>Web标准中分成三个构成：</p><p><img src="C:\Users\25134\AppData\Roaming\Typora\typora-user-images\image-20220621192931963.png" alt="image-20220621192931963"></p><h3 id="HTML的概念"><a href="#HTML的概念" class="headerlink" title="HTML的概念"></a><strong>HTML的概念</strong></h3><p>➢ HTML（Hyper Text Markup Language）中文译为：超文本标记语言</p><p>➢ 专门用于网页开发的语言，主要通过<strong>HTML标签</strong>对网页中的文本、图片、音频、视频等内容进行描述</p><p>➢ 案例：文字变粗案例</p><p>➢ 体验构建一个网页，需要在网页中显示一个加粗的文字</p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="**** 小结"></a>**** <strong>小结</strong></h3><p>HTML骨架结构由哪些标签组成？</p><p>• html标签：网页的整体</p><p>• head标签：网页的头部</p><p>• body标签：网页的身体</p><p>• title标签：网页的标题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;熊大&#x27;</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">10</span></span><br><span class="line"><span class="keyword">const</span> sex = <span class="string">&#x27;男&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name,</span><br><span class="line">  age,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、基础标签"><a href="#二、基础标签" class="headerlink" title="二、基础标签"></a>二、基础标签</h2><p><strong>p标签：段落之间存在间隙，独占一行</strong>**</p><p><strong>br标签：单标签 换行</strong></p><p><strong>hr标签：单标签 在页面中显示一条水平线</strong></p><p><strong>strong &#x2F; b 标签： 加粗</strong></p><p><strong>ins &#x2F; u 标签：下划线</strong></p><p><strong>em &#x2F; i 标签：倾斜</strong></p><p><strong>del &#x2F; s 标签：删除线</strong></p><p><strong>img 标签：单标签 img标签需要展示对应的效果，需要借助标签的属性进行设置</strong></p><p>图片标签的src属性：目标图片的路径</p><p>图片标签的alt属性：替换文本 当图片加载失败时，才显示alt的文本</p><p>图片标签的title属性：提示文本 当鼠标悬停时，才显示的文本</p><p>图片标签的width和height属性：宽度和高度</p><p><strong>绝对路径：指目录下的绝对位置，可直接到达目标位置，通常从盘符开始的路径</strong></p><p>例如：</p><p>盘符开头：D:\day01\images\1.jpg</p><p>完整的网络地址：<a href="https://www.itcast.cn/2018czgw/images/logo.gif%EF%BC%88%E4%BA%86%E8%A7%A3%EF%BC%89">https://www.itcast.cn/2018czgw/images/logo.gif（了解）</a></p><p><strong>相对路径（常用）：从当前文件开始出发找目标文件的过程</strong></p><p><strong>audio标签：音频标签</strong></p><p>音频标签src属性：音频的路径</p><p>音频标签controls属性：显示播放的控件</p><p>音频标签autoplay属性：自动播放</p><p>音频标签loop属性：循环播放</p><p>音频标签目前支持三种格式：MP3、Wav、Ogg</p><p><strong>video标签：视频标签</strong></p><p>视频标签src属性：音频的路径</p><p>视频标签controls属性：显示播放的控件</p><p>视频标签autoplay属性：自动播放</p><p>视频标签loop属性：循环播放</p><p>视频标签目前支持三种格式：MP4 、WebM 、Ogg</p><p><strong>a标签：双标签，内部可以包裹内容 如果需要a标签点击之后去指定页面，需要设置a标签的href属性</strong></p><p>链接标签的target属性：</p><p>取值1：_self 默认值，在当前窗口跳转</p><p>取值2：_blank 在新窗口中跳转</p><h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><p><strong>ul标签：表示无序列表的整体，用于包裹li标签 ，ul标签中只允许包含li标签</strong>，列表的每一项前默认显示圆点标识</p><p><strong>li标签：表示无序列表的每一项，用于包含每一行的内容，li标签可以包含任意内容</strong></p><p><strong>ol标签：表示有序列表的整体，用于包含li标签，ol标签中只允许包含li标签</strong>，列表的每一项前默认显示序号标识 </p><p>li标签：表示有序列表的每一项，用于包含每一行的内容，li标签可以包含任意内容</p><p><strong>dl标签：表示自定义列表标签，用于包裹dt&#x2F;dd标签</strong></p><p><strong>dt标签：表示自定义列表的主题</strong>，dd前会默认显示缩进效果 </p><p><strong>dd标签：表示自定义列表的针对主题的每一项内容</strong></p><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><p><strong>table：表格整体，用于包裹多个tr</strong></p><p><strong>tr：表格每行，用于包裹td</strong></p><p><strong>td：表格单元格，用于包裹内容</strong></p><p>注意：标签的嵌套关系：table &gt; tr &gt; td</p><p><strong>caption：表示表格整体大标签，默认在表格整体 顶部居中位置显示</strong></p><p><strong>th：表示一列小标题，通常用于表格第一行，默认内部文字加粗并居中显示</strong></p><p>注意：caption标签书写在table标签内部，th标签书写在tr标签内部（用于替换td标签）。</p><p>表格的结构标签：</p><p>thead：表格头部</p><p>tbody：表格主体</p><p>tfoot：表格底部。</p><p>rowspan：跨行合并，将多行的单元格垂直合并</p><p>colspan：跨列合并，将多列的单元格水平合并</p><p>注意：只有同一个结构标签中的单元格才能合并，不能跨结构标签合并（不能跨：thead、tbody、tfoot）</p><h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><p>input系列标签 </p><p>​属性名： text ：文本框placeholder：占位符</p><p>​password：密码框placeholder：占位符</p><p>​radio：单选框</p><p>​checkbox：多选框</p><p>​file：文件选择multiple：多文件选择</p><p>​submit：提交按钮</p><p>​reset：重置按钮</p><p>​button：按钮</p><p>​如果需要实现以上按钮功能，需要配合form标签使用 </p><p>​form使用方法：用form标签把表单标签一起包裹起来即可</p><p>button按钮标签 </p><p>​属性名：submit：提交按钮</p><p>​reset：重置按钮</p><p>​button：按钮</p><p>select下拉菜单标签  option标签：下拉菜单的每一项 selected：下拉菜单的默认选中</p><p>textarea文本域标签 </p><p>​属性：cols：规定了文本域内可见宽度</p><p>​    rows：规定了文本域内可见行数</p><p>label标签：绑定内容与表单标签的关系</p><h3 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h3><p>div标签：一行只显示一个（独占一行） </p><p>span标签：一行可以显示多个</p><p>header：网页头部</p><p>nav：网页导航</p><p>footer：网页底部</p><p>aside：网页侧边栏</p><p>section：网页区块</p><p>article：网页文章</p><h3 id="常见字符实体"><a href="#常见字符实体" class="headerlink" title="常见字符实体"></a>常见字符实体</h3><p>&amp;nbsp：空格</p><p>&amp;gt：&gt;</p><p>&amp;lt：&lt;</p><h2 id="三、css属性"><a href="#三、css属性" class="headerlink" title="三、css属性"></a>三、css属性</h2><p><strong>link标签引入</strong></p><p>color：文字颜色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">常见颜色取值：</span><br><span class="line">• red：红色</span><br><span class="line">• green：绿色</span><br><span class="line">• blue：蓝色</span><br><span class="line">• yellow：黄色</span><br><span class="line">• orange：橘色</span><br><span class="line">• skyblue：天蓝色</span><br><span class="line">• pink：粉色</span><br><span class="line"></span><br><span class="line">rgb表示法</span><br><span class="line">➢ 每项取值范围：<span class="number">0</span>~<span class="number">255</span></span><br><span class="line">➢ 常见颜色取值：</span><br><span class="line">• rgb ( <span class="number">255</span> , <span class="number">0</span> , <span class="number">0</span> ) ：红色</span><br><span class="line">• rgb ( <span class="number">0</span> , <span class="number">255</span> , <span class="number">0</span> ) ：绿色</span><br><span class="line">• rgb ( <span class="number">0</span> , <span class="number">0</span> , <span class="number">255</span> ) ：蓝色</span><br><span class="line">• rgb ( <span class="number">0</span> , <span class="number">0</span> , <span class="number">0</span> ) ：黑色</span><br><span class="line">• rgb ( <span class="number">255</span> , <span class="number">255</span> , <span class="number">255</span> ) ：白色</span><br><span class="line"></span><br><span class="line">rgba表示法</span><br><span class="line">• 其实，比rgb表示法多个一个<span class="selector-tag">a</span>，<span class="selector-tag">a</span>表示透明度</span><br><span class="line">➢ <span class="selector-tag">a</span>的取值范围：<span class="number">0</span>~<span class="number">1</span></span><br><span class="line">• <span class="number">1</span>：完全不透明</span><br><span class="line">• <span class="number">0</span>：完全透明</span><br><span class="line">➢ 省略写法：</span><br><span class="line">• rgba ( <span class="number">0</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="number">0.5</span> ) 可以省略写成 rgba ( <span class="number">0</span> , <span class="number">0</span> , <span class="number">0</span> , .<span class="number">5</span> )</span><br><span class="line"></span><br><span class="line">十六进制表示法</span><br><span class="line">➢ 取值范围：</span><br><span class="line">• 两个数字为一组，每个数字的取值范围：<span class="number">0</span>~<span class="number">9</span> , <span class="selector-tag">a</span> , <span class="selector-tag">b</span> , c , d , e , f</span><br><span class="line">➢ 省略写法：</span><br><span class="line">• 如果三组中，每组数字都相同，此时可以每组可以省略只写一个数字</span><br><span class="line">• 正确写法：<span class="selector-id">#ffaabb</span> 改写成 <span class="selector-id">#fab</span></span><br><span class="line">➢ 常见取值：</span><br><span class="line">• <span class="selector-id">#fff</span> ：白色</span><br><span class="line">• <span class="selector-id">#000</span> ：黑色</span><br><span class="line">➢ 注意点</span><br><span class="line"><span class="number">1</span>. 类似于：<span class="selector-id">#ffaabc</span> 不能改写成 <span class="selector-id">#fabc</span></span><br></pre></td></tr></table></figure><p>font-size：字体大小</p><p>background-color：背景颜色</p><p>width：宽度</p><p>height：高度</p><p>标签选择器结构：标签名 { css属性名：属性值； }</p><p>类选择器.类名 { css属性名：属性值； }</p><p>id选择器id属性值 { css属性名：属性值； }</p><p>通配符选择器*{ css属性名：属性值； }</p><h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3><ol><li>字体大小：font-size取值：数字 + px</li><li>字体粗细：font-weight        取值：正常normal&#x2F;400    加粗bold&#x2F;700</li><li>字体样式：font-style            取值：正常normal            倾斜italic</li><li>字体类型：font-family         具体字体：”Microsoft YaHei”、微软雅黑、黑体、宋体、楷体等</li></ol><h3 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h3><ol><li>文本缩进：text-indent取值：数字 + px</li><li>文本水平对齐方式：text-align     取值：left左对齐、center居中对齐、right右对齐</li><li>文本修饰：text-decoration          取值：underline下划线、line-through删除线、overline上划线、none无装饰</li></ol><p>开发中会使用 text-decoration : none ; 清除a标签默认的下划线</p><p>line-height行高取值：数字+px</p><p>让单行文本垂直居中可以设置 line-height : 文字父元素高度</p><p>网页精准布局时，会设置 line-height : 1 可以取消上下间距</p><p>​    4.文字阴影:text-shadow</p><p>​取值：h-shadow (必填,水平偏移量) v-shadow(必填,垂直偏移量) </p><p>​    blur(可选,模糊度) color(可选,阴影颜色)</p><p>​取值之间以逗号隔开</p><p>​     5.盒子阴影：box-shadow</p><p>​取值：h-shadow (必填,水平偏移量) v-shadow(必填,垂直偏移量) </p><p>​   blur(可选,模糊度) color(可选,阴影颜色)     spread(可选,阴影扩大)inset(可选,将阴影改为内部阴影)</p><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><h4 id="后代选择器：空格"><a href="#后代选择器：空格" class="headerlink" title="后代选择器：空格"></a>后代选择器：空格</h4><p>选择器语法：选择器1 选择器2 { css } </p><p>作用：根据 HTML 标签的嵌套关系，选择父元素 后代中 满足条件的元素</p><h4 id="子代选择器：-gt"><a href="#子代选择器：-gt" class="headerlink" title="子代选择器：&gt;"></a>子代选择器：&gt;</h4><p>选择器语法：选择器1 &gt; 选择器2 { css } </p><p>作用：根据 HTML 标签的嵌套关系，选择父元素 子代中 满足条件的元素</p><h4 id="并集选择器："><a href="#并集选择器：" class="headerlink" title="并集选择器：,"></a>并集选择器：,</h4><p>选择器语法：选择器1 ， 选择器2 { css }</p><p>作用：同时选择多组标签，设置相同的样式</p><h4 id="交集选择器：紧挨着"><a href="#交集选择器：紧挨着" class="headerlink" title="交集选择器：紧挨着"></a>交集选择器：紧挨着</h4><p>选择器语法：选择器1选择器2 { css } </p><p>作用：选中页面中 同时满足 多个选择器的标签</p><h4 id="hover伪类选择器"><a href="#hover伪类选择器" class="headerlink" title="hover伪类选择器"></a>hover伪类选择器</h4><p>选择器语法：选择器:hover { css } </p><p>作用：选中鼠标悬停在元素上的状态，设置样式</p><h3 id="背景相关属性"><a href="#背景相关属性" class="headerlink" title="背景相关属性"></a>背景相关属性</h3><h4 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h4><p>属性名：background-color（bgc）</p><p>属性值：颜色取值：关键字、rgb表示法、rgba表示法、十六进制透明：rgba(0,0,0,0)、transparent</p><h4 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h4><p>属性名：background-image（bgi）</p><p>属性值：url(‘图片路径’)</p><h4 id="背景平铺"><a href="#背景平铺" class="headerlink" title="背景平铺"></a>背景平铺</h4><p>属性名：background-repeat（bgr）</p><p>属性值：repeat 默认值水平和垂直都平铺   no-repeat：不平铺repeat-x：水平方向平铺repeat-y：垂直方向平铺</p><h4 id="背景位置"><a href="#背景位置" class="headerlink" title="背景位置"></a>背景位置</h4><p>属性名：background-position（bgp）</p><p>属性值：background-position：水平方向位置 垂直方向位置</p><p>注意：方位名词取值和坐标取值可以混使用，第一个取值表示水平，第二个取值表示垂直</p><p>方位名称：水平方向 left、center、right  垂直方向top、center、bottom</p><p>坐标：(x,y)</p><h4 id="背景图片大小"><a href="#背景图片大小" class="headerlink" title="背景图片大小"></a>背景图片大小</h4><p>语法：background-size：宽度 高度；</p><p>属性名：background-size</p><p>属性值：</p><p>数字+px   </p><p>百分比%   </p><p>contain(包含,将背景图片等比例缩放,直到不会超出盒子的最大)   </p><p>cover(覆盖,将背景图片等比例缩放,直到刚好填满整个盒子没有空白)</p><h3 id="元素显示模式"><a href="#元素显示模式" class="headerlink" title="元素显示模式"></a>元素显示模式</h3><h4 id="块级元素-block-："><a href="#块级元素-block-：" class="headerlink" title="块级元素(block)："></a><strong>块级元素</strong>(block)：</h4><p>独占一行（一行只能显示一个）宽度默认是父元素的宽度，高度默认由内容撑开，可以设置宽高</p><p>代表标签：div、p、h系列、ul、li、dl、dt、dd、form、header、nav、footer</p><h4 id="行内元素-inline-："><a href="#行内元素-inline-：" class="headerlink" title="**行内元素(inline)**："></a>**行内元素(inline)**：</h4><p>一行可以显示多个，宽度和高度默认由内容撑开，不可以设置宽高</p><p>代表标签：a、span 、b、u、i、s、strong、ins、em、del</p><h4 id="行内块元素-inline-block-："><a href="#行内块元素-inline-block-：" class="headerlink" title="**行内块元素(inline-block)**："></a>**行内块元素(inline-block)**：</h4><p>一行可以显示多个，可以设置宽高</p><p>代表标签：input、textarea、button、select</p><h4 id="元素显示模式转换"><a href="#元素显示模式转换" class="headerlink" title="元素显示模式转换"></a><strong>元素显示模式转换</strong></h4><p>转换成块级元素display:block</p><p>转换成行内元素display：inline</p><p>转换成行内块元素display：inline-block</p><h4 id="css选择器优先级："><a href="#css选择器优先级：" class="headerlink" title="css选择器优先级："></a>css选择器优先级：</h4><p>不同选择器具有不同的优先级，优先级高的选择器样式会覆盖优先级低选择器样式</p><p>优先级公式：继承 &lt; 通配符选择器 &lt; 标签选择器 &lt; 类选择器 &lt; id选择器 &lt; 行内样式 &lt; !important</p><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><p>CSS 中规定每个盒子分别由：内容区域（content）、内边距区域（padding）、边框区域（border）、</p><p>外边距区域（margin）构成，这就是 盒子模型</p><h4 id="边框（border）-单个属性"><a href="#边框（border）-单个属性" class="headerlink" title="边框（border）- 单个属性"></a><strong>边框（border）</strong>- 单个属性</h4><p>border-width：数字+px边框粗细</p><p>​border-style：  solid(实线)、dashed(虚线)、dotted(点线)</p><p>​border-color： 颜色取值</p><h4 id="边框（border）-连写形式：border-10px-solid-red"><a href="#边框（border）-连写形式：border-10px-solid-red" class="headerlink" title="边框（border）- 连写形式：border : 10px solid red"></a><strong>边框（border）</strong>- 连写形式：border : 10px solid red</h4><h4 id="内边距（padding）-设置-边框-与-内容区域-之间的距离"><a href="#内边距（padding）-设置-边框-与-内容区域-之间的距离" class="headerlink" title="内边距（padding）-设置 边框 与 内容区域 之间的距离"></a><strong>内边距（padding）</strong>-设置 边框 与 内容区域 之间的距离</h4><p> 自动内减：给盒子设置属性 box-sizing : border-box ;  浏览器会自动计算多余大小，自动在内容中减去</p><h4 id="外边距（margin）-设置边框以外，盒子与盒子之间的距离"><a href="#外边距（margin）-设置边框以外，盒子与盒子之间的距离" class="headerlink" title="外边距（margin）-设置边框以外，盒子与盒子之间的距离"></a><strong>外边距（margin）</strong>-设置边框以外，盒子与盒子之间的距离</h4><h4 id="外边距折叠现象-–-①-合并现象"><a href="#外边距折叠现象-–-①-合并现象" class="headerlink" title="外边距折叠现象 – ① 合并现象"></a><strong>外边距折叠现象 – ① 合并现象</strong></h4><p>➢ 场景：垂直布局 的 块级元素，上下的margin会合并</p><p>➢ 结果：最终两者距离为margin的最大值</p><p>➢ 解决方法：避免就好</p><p>• 只给其中一个盒子设置margin即可</p><h4 id="外边距折叠现象-–-②-塌陷现象"><a href="#外边距折叠现象-–-②-塌陷现象" class="headerlink" title="外边距折叠现象 – ② 塌陷现象"></a><strong>外边距折叠现象 – ② 塌陷现象</strong></h4><p>➢ 场景：互相嵌套 的 块级元素，子元素的 margin-top 会作用在父元素上</p><p>➢ 结果：导致父元素一起往下移动</p><p>➢ 解决方法：</p><ol><li>给父元素设置border-top 或者 padding-top（分隔父子元素的margin-top）</li><li>给父元素设置overflow：hidden</li><li>转换成行内块元素</li><li>设置浮动</li></ol><h4 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h4><p>E.first-child { }匹配父元素中第一个子元素</p><p>E.last-child { }匹配父元素中最后一个子元素</p><p>E.nth-child(n) { }匹配父元素中第n个子元素</p><p>E.nth-last-child(n) { }匹配父元素中倒数第n个子元素</p><p>E.nth-of-type(n) { }只在父元素的同类型(E)子元素范围中，匹配第n个</p><p>区别：</p><p>• :nth-child → 直接在所有孩子中数个数</p><p>• :nth-of-type → 先通过该 类型 找到符合的一堆子元素，然后在这一堆子元素中数个数</p><h4 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h4><p>伪元素：一般页面中的非主体内容可以使用伪元素</p><p>➢ 区别：</p><ol><li>元素：HTML 设置的标签</li><li>伪元素：由 CSS 模拟出的标签效果</li></ol><p>::before   在父元素内容的最前面添加一个伪元素</p><p>::after    在父元素内容的最后面添加一个伪元素</p><p>注意点：</p><ol><li>必须设置content属性才能生效</li><li>伪元素默认是行内元素</li></ol><h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><p><strong>float:left&#x2F;right</strong></p><h4 id="浮动的特点"><a href="#浮动的特点" class="headerlink" title="浮动的特点"></a>浮动的特点</h4><ol><li>浮动元素会脱标，在标准流中不占位置</li><li>浮动元素比标准流高出半个级别，可以覆盖标准流中的元素</li><li>浮动找浮动，下一个浮动元素会在上一个浮动元素后面左右浮动</li><li>浮动元素有特殊的显示效果：① 一行可以显示多个 ② 可以设置宽高</li></ol><p>注意点：浮动的元素不能通过text-align:center或者margin:0 auto</p><h4 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a><strong>清除浮动</strong></h4><p>如果子元素浮动了，此时子元素不能撑开标准流的块级父元素</p><p>原因：</p><p>• 子元素浮动后脱标 → 不占位置</p><p>➢ 目的：</p><p>• 需要父元素有高度，从而不影响其他网页元素的布局</p><p>清除浮动的方法 — ① 直接设置父元素高度</p><p>缺点：有些布局中不能固定父元素高度。如：新闻列表、京东推荐模块</p><p>清除浮动的方法 — ② 额外标签法</p><p>操作：</p><ol><li>在父元素内容的最后添加一个块级元素</li><li>给添加的块级元素设置 clear:both</li></ol><p>缺点：会在页面中添加额外的标签，会让页面的HTML结构变得复杂</p><p>清除浮动的方法 — ③ 单伪元素清除法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">clearfix</span>::after &#123;</span><br><span class="line">  <span class="attr">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attr">display</span>: block;</span><br><span class="line">  <span class="attr">clear</span>: both;</span><br><span class="line">  <span class="comment">/*补充代码：在网页中看不到伪元素*/</span></span><br><span class="line">  <span class="attr">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attr">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="清除浮动的方法-—-④-双伪元素清除法"><a href="#清除浮动的方法-—-④-双伪元素清除法" class="headerlink" title="清除浮动的方法 — ④ 双伪元素清除法"></a><strong>清除浮动的方法 — ④ 双伪元素清除法</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">clearfix</span>::before,.<span class="property">clearfix</span>::after &#123;</span><br><span class="line">  <span class="attr">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attr">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">clearfix</span>::after &#123;</span><br><span class="line">  <span class="attr">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BFC的介绍"><a href="#BFC的介绍" class="headerlink" title="BFC的介绍"></a>BFC的介绍</h4><p>➢ 块格式化上下文（Block Formatting Context）：BFC</p><p>• 是Web页面的可视CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。</p><p>➢ 创建BFC方法：</p><ol><li>html标签是BFC盒子</li><li>浮动元素是BFC盒子</li><li>行内块元素是BFC盒子</li><li>overflow属性取值不为visible。如：auto、hidden…</li></ol><p>➢ BFC盒子常见特点：</p><ol><li>BFC盒子会默认包裹住内部子元素（标准流、浮动）→ 应用：清除浮动</li><li>BFC盒子本身与子元素之间不存在margin的塌陷现象 → 应用：解决margin的塌陷</li></ol><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><ol><li>可以让元素自由的摆放在网页的任意位置</li><li>一般用于 盒子之间的层叠情况</li></ol><p>属性名：position</p><p>属性值：static(默认：静态定位)、relative(相对定位)、absolute(绝对定位)、固定定位(fixed)</p><p><strong>相对定位position:relative</strong>相对于自己原来位置进行移动，在页面中占位置 → 没有脱标</p><p><strong>绝对定位position:absolute</strong>相对于非静态定位的父元素进行定位移动(默认相对于浏览器可视区域进行移动)</p><p>在页面中不占位置 → 已经脱标</p><p><strong>子绝父相水平垂直都居中案例</strong></p><ol><li><p>子绝父相</p></li><li><p>让子盒子往右走大盒子一半</p><p>• left:50%</p></li><li><p>让子盒子往下走大盒子一半</p><p>• top:50%</p></li><li><p>让子盒子往左+往上走自己的一半</p><p>• transform:translate(-50%,-50%);</p></li></ol><p><strong>固定定位 position:fixed</strong>  相对于浏览器进行定位移动    在页面中不占位置 → 已经脱标</p><h3 id="装饰"><a href="#装饰" class="headerlink" title="装饰"></a>装饰</h3><h4 id="垂直对齐方式"><a href="#垂直对齐方式" class="headerlink" title="垂直对齐方式"></a><strong>垂直对齐方式</strong></h4><p><strong>属性名:vertical-align</strong></p><p><strong>属性值:baseline(默认基线对齐)&#x2F;top(顶部对齐)&#x2F;middle(中部对齐)&#x2F;bottom(底部对齐)</strong></p><p>项目中 vertical-align 可以解决的问题</p><ol><li>文本框和表单按钮无法对齐问题</li><li>input和img无法对齐问题</li><li>div中的文本框，文本框无法贴顶问题</li><li>div不设高度由img标签撑开，此时img标签下面会存在额外间隙问题</li><li>使用line-height让img标签垂直居中问题</li></ol><h4 id="光标类型"><a href="#光标类型" class="headerlink" title="光标类型"></a><strong>光标类型</strong></h4><p>属性名:cursor设置鼠标光标在元素上时显示的样式</p><p>属性值:</p><p>default(默认值,通常是箭头)</p><p>pointer(小手效果,提示用户可以点击)</p><p>text(工字型,提示用户可以选择文字)</p><p>move(十字光标,提示用户可以移动)</p><h4 id="边框圆角"><a href="#边框圆角" class="headerlink" title="边框圆角"></a><strong>边框圆角</strong></h4><p>属性名：border-radius</p><p>➢ 画一个正圆：</p><ol><li>盒子必须是正方形</li><li>设置边框圆角为盒子宽高的一半 → border-radius:50%</li></ol><p>➢ 胶囊按钮：</p><ol><li>盒子要求是长方形</li><li>设置 → border-radius：盒子高度的一半</li></ol><h4 id="溢出部分显示效果"><a href="#溢出部分显示效果" class="headerlink" title="溢出部分显示效果"></a><strong>溢出部分显示效果</strong></h4><p>溢出部分：指的是盒子 内容部分 所超出盒子范围的区域</p><p>属性名：overflow</p><p>属性值：</p><p>visible(默认值：溢出部分可见)</p><p>hidden(溢出部分隐藏)</p><p>scroll(无论是否溢出,都显示滚动条)</p><p>auto(根据是否溢出,自动显示或隐藏滚动条)</p><h4 id="元素本身隐藏"><a href="#元素本身隐藏" class="headerlink" title="元素本身隐藏"></a><strong>元素本身隐藏</strong></h4><p>➢ 场景：让某元素本身在屏幕中不可见。如：鼠标:hover之后元素隐藏</p><p>➢ 常见属性：</p><ol><li><p>visibility:hidden</p></li><li><p>display:none</p></li></ol><p>➢ 区别：</p><ol><li><p>visibility:hidden 隐藏元素本身，并且在网页中 占位置</p></li><li><p>display:none 隐藏元素本身，并且在网页中 不占位置</p></li></ol><p>➢ 注意点：</p><p>• 开发中经常会通过 display属性完成元素的显示隐藏切换</p><p>• display:none;（隐藏）、 display:block;（显示）</p><h4 id="元素整体透明度"><a href="#元素整体透明度" class="headerlink" title="元素整体透明度"></a><strong>元素整体透明度</strong></h4><p>➢ 场景：让某元素整体（包括内容）一起变透明</p><p>➢ 属性名：opacity</p><p>➢ 属性值：0~1之间的数字</p><p>• 1：表示完全不透明</p><p>• 0：表示完全透明</p><p>➢ 注意点：</p><p>• opacity会让元素整体透明，包括里面的内容，如：文字、子元素等</p><h4 id="边框合并"><a href="#边框合并" class="headerlink" title="边框合并"></a><strong>边框合并</strong></h4><p>➢ 场景：让相邻表格边框进行合并，得到细线边框效果</p><p>➢ 代码：border-collapse:collapse;</p><p>用CSS画三角形的步骤</p><ol><li>设置一个盒子</li><li>设置四周不同颜色的边框</li><li>将盒子宽高设置为0，仅保留边框</li><li>得到四个三角形，选择其中一个后，其他三角形（边框）设置颜色为透明</li></ol><h4 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a><strong>过渡</strong></h4><p>属性名：transition</p><p>过渡的属性：all(所有属性过渡)、具体属性名如width(只有width有过渡)</p><p>过渡的时长：数字+s(秒)</p><p>Ø 注意点： </p><ol><li><p>过渡需要：默认状态 和 hover状态样式不同，才能有过渡效果 </p></li><li><p>transition属性给需要过渡的元素本身加 </p></li><li><p>transition属性设置在不同状态中，效果不同的 </p><p>① 给默认状态设置，鼠标移入移出都有过渡效果 </p><p>② 给hover状态设置，鼠标移入有过渡效果，移出没有过渡效果</p></li></ol><h3 id="选择器拓展"><a href="#选择器拓展" class="headerlink" title="选择器拓展"></a>选择器拓展</h3><h4 id="链接伪类选择器"><a href="#链接伪类选择器" class="headerlink" title="链接伪类选择器"></a>链接伪类选择器</h4><p>场景：常用于选中超链接的不同状态</p><p>选择器语法：</p><p>a:link { }选中a链接 未访问过 的状态</p><p>a:visited { }选中a链接 访问之后 的状态</p><p>a:hover { }选中 鼠标悬停 的状态</p><p>a:active { } 选中 鼠标按下 的状态</p><h4 id="焦点伪类选择器"><a href="#焦点伪类选择器" class="headerlink" title="焦点伪类选择器"></a>焦点伪类选择器</h4><p>场景：用于选中元素获取焦点时状态，常用于表单控件</p><p>选择器语法：:focus { }</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red</span><br><span class="line">&#125;</span><br><span class="line">// 表单控件获取焦点时默认会显示外部轮廓线</span><br></pre></td></tr></table></figure><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><p>场景：通过元素上的HTML属性来选择元素，常用于选择 input 标签</p><p>选中页面中所有的文本框input[type&#x3D;”text”] { }</p><h3 id="精灵图"><a href="#精灵图" class="headerlink" title="精灵图"></a>精灵图</h3><ol><li>创建一个盒子 </li><li>通过PxCook量取小图片大小，将小图片的宽高设置给盒子 </li><li>将精灵图设置为盒子的背景图片 </li><li>通过PxCook测量小图片左上角坐标，分别取负值设置给盒子的background-position：x y</li></ol><h3 id="版心"><a href="#版心" class="headerlink" title="版心"></a>版心</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1240px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*版心类名常用：container、wrapper、w*/</span></span><br></pre></td></tr></table></figure><h3 id="CSS书写顺序"><a href="#CSS书写顺序" class="headerlink" title="CSS书写顺序"></a>CSS书写顺序</h3><p>1.布局属性：display、position、float、clear、visibility、overflow</p><p>2.盒子模型+背景：width、height、margin、padding、border</p><p>3.文本内容属性：color、font、text-decoration、text-align、line-height</p><p>4.点缀属性：cursor、border-radius、text-shadow、box-shadow</p><p>注意点： </p><p>• 开发中推荐多用类 + 后代，但不是层级越多越好，一个选择器中的类选择器的个数推荐 不要超过 3 个 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h1&gt;&lt;h2 id=&quot;一、基础认知&quot;&gt;&lt;a href=&quot;#一、基础认知&quot; class=&quot;headerlink&quot; title=&quot;一、基础认知&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="资料" scheme="http://example.com/categories/%E8%B5%84%E6%96%99/"/>
    
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/11/05/hello-world/"/>
    <id>http://example.com/2022/11/05/hello-world/</id>
    <published>2022-11-05T08:24:20.768Z</published>
    <updated>2022-11-05T08:24:20.768Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
